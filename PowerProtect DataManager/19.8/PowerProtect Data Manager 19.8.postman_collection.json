{
	"info": {
		"_postman_id": "7934630d-deb4-4ee5-971c-c538f06e1e74",
		"name": "PowerProtect Data Manager 19.8",
		"description": "PowerProtect Data Manager Public Restful API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api/v2",
			"item": [
				{
					"name": "account",
					"item": [
						{
							"name": "Update user account login credentials.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/account/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"account",
										"change-password"
									]
								},
								"description": "Updates user account login credentials by providing the username, current password, and a new password. Returns the username and masked new password in the response body in JSON format."
							},
							"response": [
								{
									"name": "Successfully changed the user password.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"username\": \"commodo consequat\",\n \"password\": \"sed ut quis\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The provided credentials are invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable entity. An error has occurred when trying to change the user password.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newPassword\": \"sint culpa velit ex\",\n    \"password\": \"aute reprehenderit\",\n    \"username\": \"sed nostrud incididunt consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"change-password"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Send an email to reset a user password.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/account/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"account",
										"forgot-password"
									]
								},
								"description": "Resets a user password by providing the username. An email is sent to the user email address with a link to reset the token."
							},
							"response": [
								{
									"name": "If the username exists, an email is sent to the user email address.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"forgot-password"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"forgot-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable entity. An error has occurred when trying to send an email to the user.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"forgot-password"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"forgot-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"nostrud Ut reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"forgot-password"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reset user password with temporary reset token.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/account/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"account",
										"reset-password"
									]
								},
								"description": "Resets the user password with the temporary reset token. The temporary reset token is contained in the email sent to the user email address, after performing an API call to forgot-password."
							},
							"response": [
								{
									"name": "Successfully changed the user password.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"username\": \"eu laboris labore aliqua\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The reset password token is either invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable entity. An error occurred while trying to send an email to the user.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resetToken\": \"irure nulla nostrud\",\n    \"newPassword\": \"amet ad consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/account/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"account",
												"reset-password"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "activities",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get an activity by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the activity resource."
												}
											]
										},
										"description": "Retrieves an activity resource with matching ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned available activity resource.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"deserunt eiusmod\",\n \"name\": \"tempor\",\n \"category\": \"VALIDATE\",\n \"classType\": \"JOB\",\n \"createTime\": \"1974-11-26T22:43:45.189Z\",\n \"updateTime\": \"1994-03-25T16:47:42.771Z\",\n \"progress\": 63307710,\n \"state\": \"QUEUED\",\n \"actions\": {\n  \"cancelable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"retryable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"asset\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"averageBytesTransferred\": 43416101,\n \"averageDuration\": -27584415,\n \"destinationSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"displayId\": \"amet reprehenderit nulla\",\n \"duration\": -65686545,\n \"endTime\": \"1982-07-24T09:45:17.104Z\",\n \"failedToRetrieveStats\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"hasChildren\": false,\n \"hasLogs\": false,\n \"host\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"infrastructureSource\": \"sit anim\",\n \"initiatedType\": \"sint cillum nost\",\n \"inventorySource\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"logInfo\": {\n  \"fileName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logText\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"nextScheduledTime\": \"1974-03-01T02:10:23.612Z\",\n \"owner\": {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ownerResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"parentId\": \"aliqua dolor\",\n \"progressIssues\": \"CONNECTION_ISSUES\",\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"result\": {\n  \"bytesTransferred\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceCopy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceStorageSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"startTime\": \"1966-07-08T06:39:23.638Z\",\n \"stateSummaries\": {\n  \"canceled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"completed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"criticalEvent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"failed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ok\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"okWithErrors\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"pendingCancellation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queued\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"running\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"unknown\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"stats\": {\n  \"assetSizeInBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferred\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferredThroughput\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferredThroughputUnitOfTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dedupeRatio\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfAgents\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfProtectedAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"postCompBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"preCompBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"reductionPercentage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"statsNotSupportedByApp\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"statsRequireAgentUpgrade\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"steps\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"storageSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"subcategory\": \"Lorem Ut culpa\",\n \"username\": \"Lorem Excepteur\"\n}"
										},
										{
											"name": "The requestor is not authenticated.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor does not have required permissions.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "A server error prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Cancel a running activity.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities",
												":id",
												"cancel"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the activity resource."
												}
											]
										},
										"description": "Cancels the selected activity with the specified ID. Activities in running or queued state can be canceled.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"activityIds\": [\n  \"c\",\n  \"dolore\"\n ]\n}"
										},
										{
											"name": "The request is accepted and is processing. The activity transitions to Pending Cancellation state before being Canceled. In some cases, the cancel request may be rejected if the activity is close to completion when the request was issued.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"in in pariatur\",\n \"name\": \"magna culpa officia\",\n \"category\": \"PROTECT\",\n \"classType\": \"JOB_GROUP\",\n \"createTime\": \"1952-06-02T08:54:42.582Z\",\n \"updateTime\": \"2019-09-26T10:21:18.263Z\",\n \"progress\": 21164505,\n \"state\": \"PENDING_CANCELLATION\",\n \"actions\": {\n  \"cancelable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"retryable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"asset\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"averageBytesTransferred\": -59896277,\n \"averageDuration\": 2910666,\n \"destinationSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"displayId\": \"ex est magna\",\n \"duration\": -39735209,\n \"endTime\": \"1956-08-10T05:14:35.018Z\",\n \"failedToRetrieveStats\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"hasChildren\": true,\n \"hasLogs\": true,\n \"host\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"infrastructureSource\": \"in labore consectetur\",\n \"initiatedType\": \"qui in\",\n \"inventorySource\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"logInfo\": {\n  \"fileName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logText\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"nextScheduledTime\": \"1999-06-21T16:05:13.754Z\",\n \"owner\": {\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ownerResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"parentId\": \"aute ea\",\n \"progressIssues\": \"TIMEOUT_ISSUES\",\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"result\": {\n  \"bytesTransferred\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceCopy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceStorageSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"sourceSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"startTime\": \"2018-03-08T08:58:08.977Z\",\n \"stateSummaries\": {\n  \"canceled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"completed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"criticalEvent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"failed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ok\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"okWithErrors\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"pendingCancellation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queued\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"running\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"total\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"unknown\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"stats\": {\n  \"assetSizeInBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferred\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferredThroughput\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"bytesTransferredThroughputUnitOfTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dedupeRatio\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfAgents\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"numberOfProtectedAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"postCompBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"preCompBytes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"reductionPercentage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"statsNotSupportedByApp\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"statsRequireAgentUpgrade\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"steps\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"storageSystem\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"subcategory\": \"laborum exercitation voluptate anim\",\n \"username\": \"culpa in\"\n}"
										},
										{
											"name": "The request is not valid. Check request body and/or filters.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor does not have required permissions.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "A server error prevented the completion of the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"cancel"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Retry a failed activity.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retryJobIds\": [\n        \"commodo culpa consequat\",\n        \"enim minim id sit do\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities",
												":id",
												"retry"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the activity resource."
												}
											]
										},
										"description": "Retries one or more failed jobs within a job group for the specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The request has been accepted and is processing. A new job is generated when an existing job is retried. The new job replaces the old one under the job group if the retry operation is successful.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"retryJobsInitiatedCount\": -49797763,\n \"retryJobsReceivedCount\": 44825468,\n \"retryResults\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The request is not valid. Check request body and/or filters.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor does not have required permissions.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "A server error prevented the completion of the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"retryJobIds\": [\n        \"amet repr\",\n        \"aliqua minim sit mollit\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/activities/:id/retry",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"activities",
														":id",
														"retry"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all activities.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activities"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do",
											"description": "Token string to use to retrieve the next page of a result. The initial search request with queryState must be queryState=BEGIN and a pageSize. After a search begins, subsequent responses include a token string to pass as a parameter for the next page retrieval. When the query state in the response that is returned from the previous search is END, no further results can be retrieved from this query. More details see Tutorials - Page the List Result."
										},
										{
											"key": "q",
											"value": "incididunt in consequat do",
											"description": "A general search text.\nFor example: q=VM_1\nwhere the following fields will be searched for VM_1.\n\nThe following fields are searched:\n\n    name\n    result.summaries\n    result.error.reason\n    result.error.remediation\n    logInfo.logText\n    asset.name\n    asset.type\n    copy.name\n    copy.type\n    dataTarget.name\n    host.name\n    protectionPolicy.name\n    sourceDataTarget.name\n    serviceLevelAgreement.name\n    owner.name\n    lastUpdateTime\n    createdTime or createTime\n"
										},
										{
											"key": "groupBy",
											"value": "incididunt in consequat do",
											"description": "Entity type to group asset-level activities by."
										},
										{
											"key": "groupByValue",
											"value": "incididunt in consequat do",
											"description": "Value of entity of type specified in groupBy parameter."
										}
									]
								},
								"description": "Retrieves a list of all activities.\n> This endpoint supports execution by the following roles: admin\n\n> This endpoint supports pagination with types: random,serial\n"
							},
							"response": [
								{
									"name": "Successfully returned available activity resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupBy",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupByValue",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid. Check request parameters.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupBy",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupByValue",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupBy",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupByValue",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor does not have required permissions.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupBy",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupByValue",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "A server error prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/activities?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do&groupBy=incididunt in consequat do&groupByValue=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"activities"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupBy",
													"value": "incididunt in consequat do"
												},
												{
													"key": "groupByValue",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "alerts",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get an alert message by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the alerts resource."
												}
											]
										},
										"description": "Retrieves an alert message with the specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the alert message.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"messageID\": \"Excepteur id\",\n \"message\": \"veniam eiusmod irure\",\n \"category\": \"SERVER_DR\",\n \"severity\": \"INFORMATIONAL\",\n \"postedTime\": \"2017-01-06T14:18:59.829Z\",\n \"acknowledgement\": {\n  \"acknowledgeState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeBy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"esse cupidat\",\n \"detailSummaries\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"detailedDescription\": \"consequat quis in occaecat\",\n \"email\": false,\n \"esrs\": true,\n \"jobId\": \"in ex commodo ullamco\",\n \"messageArgs\": [\n  \"deserunt sit Exce\",\n  \"aute anim nisi sed\"\n ],\n \"responseAction\": \"Ut aliquip\",\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"supportDetails\": \"velit\",\n \"taskId\": \"eu\",\n \"userNote\": {\n  \"note\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"updatedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"username\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"visibility\": true\n}"
										},
										{
											"name": "The request is not valid. Verify the ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update message acknowledgement or user note by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the alerts resource."
												}
											]
										},
										"description": "Updates acknowledgement object of a message. Adds or updates userNote object of a message.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Resource updated.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"messageID\": \"Lorem dolor nisi\",\n    \"message\": \"ut esse voluptate dolore\",\n    \"category\": \"COMPLIANCE\",\n    \"severity\": \"INFORMATIONAL\",\n    \"postedTime\": \"2005-09-16T14:55:10.863Z\",\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"ad pariatur reprehenderit est nisi\",\n    \"detailSummaries\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"detailedDescription\": \"dolor Excepteur\",\n    \"email\": false,\n    \"esrs\": true,\n    \"jobId\": \"veniam cillum ut\",\n    \"messageArgs\": [\n        \"id\",\n        \"in\"\n    ],\n    \"responseAction\": \"tempor est do\",\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"supportDetails\": \"dolore\",\n    \"taskId\": \"eu\",\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"visibility\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update alert acknowledgement by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												":id",
												"acknowledgement"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the alerts resource."
												}
											]
										},
										"description": "Updates acknowledgement object of the specified alert.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Resource updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"acknowledgement\": {\n  \"acknowledgeState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeBy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"eiusmod esse nisi\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"eiusmod esse nisi\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/alerts/:id/acknowledgement",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"alerts",
														":id",
														"acknowledgement"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all alerts.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alerts"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do",
											"description": "Token string to use to retrieve the next page of a result. The initial search request with queryState must be queryState=BEGIN and a pageSize. After a search begins, subsequent responses include a token string to pass as a parameter for the next page retrieval. When the query state in the response that is returned from the previous search is END, no further results can be retrieved from this query. More details see Tutorials - Page the List Result."
										},
										{
											"key": "q",
											"value": "incididunt in consequat do",
											"description": "The general search text. For example q=VM_1"
										}
									]
								},
								"description": "Retrieves a list of alerts.\n> This endpoint supports execution by the following roles: admin\n\n> This endpoint supports pagination with types: random,serial\n"
							},
							"response": [
								{
									"name": "Successfully returned available alert resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid. Check the request parameters.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do&q=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												},
												{
													"key": "q",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Update message acknowledgements by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messageIds\": [\n        \"est id sit\",\n        \"eu quis officia\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 40752954,\n    \"acknowledgementReceivedCount\": 80460941,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alerts",
										"acknowledgements"
									]
								},
								"description": "Updates acknowledgement object of bulk messages.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Resources updated.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"messageIds\": [\n  \"nostrud\",\n  \"Duis deserunt ex sed elit\"\n ],\n \"acknowledgement\": {\n  \"acknowledgeState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeBy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"acknowledgeTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"acknowledgementCount\": 72138934,\n \"acknowledgementReceivedCount\": -87098726,\n \"bulkResults\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requested resources is not found.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messageIds\": [\n        \"nostrud\",\n        \"Duis deserunt ex sed elit\"\n    ],\n    \"acknowledgement\": {\n        \"acknowledgeState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeBy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"acknowledgeTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"acknowledgementCount\": 72138934,\n    \"acknowledgementReceivedCount\": -87098726,\n    \"bulkResults\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/alerts/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"alerts",
												"acknowledgements"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "assets",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get an asset by its ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The asset ID."
												}
											]
										},
										"description": "Retrieves an asset by its ID. Use this API request to get detailed information about the asset.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the asset.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"ut\",\n \"type\": \"ORACLE_DATABASE\",\n \"details\": {\n  \"database\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fileSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nasShare\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmaxStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assetGroupId\": \"aliquip officia veniam deserunt\",\n \"backupDetails\": [\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"createdAt\": \"1992-11-22T08:57:33.649Z\",\n \"credentialId\": \"aliqua deserunt qui nulla\",\n \"credentials\": [\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"dataTargetIds\": [\n  \"quis officia\",\n  \"aliquip do ut\"\n ],\n \"deleted\": false,\n \"filterIds\": [\n  \"Excepteur occaecat cillum\",\n  \"nulla fugiat magna\"\n ],\n \"id\": \"ipsum\",\n \"lastAvailableCopyTime\": \"1965-08-02T15:42:47.898Z\",\n \"networkLabel\": \"do est\",\n \"operatingSystem\": {\n  \"name\": \"irure in eiusmod eu\",\n  \"version\": \"officia\"\n },\n \"protectable\": false,\n \"protectionCapacity\": {\n  \"size\": -49002988,\n  \"time\": \"1993-09-16T03:03:05.227Z\"\n },\n \"protectionLifeCycleId\": \"proident deserunt\",\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionEngine\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"protectionPolicyId\": \"nisi veniam proident velit cupidatat\",\n \"resourceGroupIds\": [\n  \"velit adipisicing Excepteur laborum et\",\n  \"eu ex cillum veniam\"\n ],\n \"ruleId\": \"nulla culpa in officia\",\n \"ruleName\": \"cupidatat en\",\n \"size\": 98206004,\n \"status\": \"DELETED\",\n \"subtype\": \"VMAXSTORAGEGROUP\",\n \"updatedAt\": \"1943-04-01T06:33:44.257Z\",\n \"userTags\": [\n  \"pariatur incididunt culpa\",\n  \"Lorem ullamc\"\n ],\n \"vendor\": \"DELLEMC\",\n \"vmMoref\": \"nulla sint\"\n}"
										},
										{
											"name": "The requested asset does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Set disks excluded status of an asset.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The asset ID."
												}
											]
										},
										"description": "Sends patch request to set the VM disk excluded status to true or false. Each patch request sets only one asset by the specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The response shows the asset that includes the updated excluded disk status.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"laborum ullamco non\",\n \"type\": \"VMWARE_VIRTUAL_MACHINE\",\n \"details\": {\n  \"database\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fileSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nasShare\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmaxStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assetGroupId\": \"nostrud eu\",\n \"backupDetails\": [\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"createdAt\": \"1973-03-01T17:05:21.345Z\",\n \"credentialId\": \"culpa laborum mini\",\n \"credentials\": [\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"dataTargetIds\": [\n  \"Lorem nulla sunt Except\",\n  \"est dolor sint\"\n ],\n \"deleted\": true,\n \"filterIds\": [\n  \"pariatur ullamco in\",\n  \"pariatur incididunt\"\n ],\n \"id\": \"minim ut magna\",\n \"lastAvailableCopyTime\": \"1945-03-24T15:23:42.731Z\",\n \"networkLabel\": \"velit mini\",\n \"operatingSystem\": {\n  \"name\": \"dolore Lorem\",\n  \"version\": \"nulla ad velit\"\n },\n \"protectable\": false,\n \"protectionCapacity\": {\n  \"size\": -54041303,\n  \"time\": \"1999-06-27T21:03:46.486Z\"\n },\n \"protectionLifeCycleId\": \"dolor aute incididunt\",\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionEngine\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"protectionPolicyId\": \"in incididunt mollit dolor\",\n \"resourceGroupIds\": [\n  \"proident sunt in aute\",\n  \"ipsum dolor proident tempor sit\"\n ],\n \"ruleId\": \"dolor\",\n \"ruleName\": \"Ut ipsum deserunt\",\n \"size\": -9689521,\n \"status\": \"NOT_DETECTED\",\n \"subtype\": \"MSSQL\",\n \"updatedAt\": \"1986-08-03T20:09:41.330Z\",\n \"userTags\": [\n  \"in cupidatat\",\n  \"Ut incididunt\"\n ],\n \"vendor\": \"UNITY\",\n \"vmMoref\": \"nostrud officia sit\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"details\": {\n        \"vm\": {\n            \"disks\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    },\n    \"id\": \"sunt veniam ea occaecat laboris\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update asset credential ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The asset ID."
												}
											]
										},
										"description": "Updates the only credential ID of the specified asset. \n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the asset.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"laborum ullamco non\",\n \"type\": \"VMWARE_VIRTUAL_MACHINE\",\n \"details\": {\n  \"database\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fileSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nasShare\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmaxStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assetGroupId\": \"nostrud eu\",\n \"backupDetails\": [\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"backupType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"parallelism\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"createdAt\": \"1973-03-01T17:05:21.345Z\",\n \"credentialId\": \"culpa laborum mini\",\n \"credentials\": [\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"extraInfo\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"dataTargetIds\": [\n  \"Lorem nulla sunt Except\",\n  \"est dolor sint\"\n ],\n \"deleted\": true,\n \"filterIds\": [\n  \"pariatur ullamco in\",\n  \"pariatur incididunt\"\n ],\n \"id\": \"minim ut magna\",\n \"lastAvailableCopyTime\": \"1945-03-24T15:23:42.731Z\",\n \"networkLabel\": \"velit mini\",\n \"operatingSystem\": {\n  \"name\": \"dolore Lorem\",\n  \"version\": \"nulla ad velit\"\n },\n \"protectable\": false,\n \"protectionCapacity\": {\n  \"size\": -54041303,\n  \"time\": \"1999-06-27T21:03:46.486Z\"\n },\n \"protectionLifeCycleId\": \"dolor aute incididunt\",\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionEngine\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"protectionPolicyId\": \"in incididunt mollit dolor\",\n \"resourceGroupIds\": [\n  \"proident sunt in aute\",\n  \"ipsum dolor proident tempor sit\"\n ],\n \"ruleId\": \"dolor\",\n \"ruleName\": \"Ut ipsum deserunt\",\n \"size\": -9689521,\n \"status\": \"NOT_DETECTED\",\n \"subtype\": \"MSSQL\",\n \"updatedAt\": \"1986-08-03T20:09:41.330Z\",\n \"userTags\": [\n  \"in cupidatat\",\n  \"Ut incididunt\"\n ],\n \"vendor\": \"UNITY\",\n \"vmMoref\": \"nostrud officia sit\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"cillum ad\",\n    \"type\": \"VMAX_STORAGE_GROUP\",\n    \"credentialId\": \"ipsum magna Lorem reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get all copies by asset ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id",
												"copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "pageSize",
													"value": "100",
													"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do",
													"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do",
													"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The asset ID."
												}
											]
										},
										"description": "Retrieves all copies of the asset by the specified asset ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
									},
									"response": [
										{
											"name": "Successfully returned available copies.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copies"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copies"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copies"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copies"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copies"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get copy map for an asset.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id",
												"copy-map"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the asset."
												}
											]
										},
										"description": "Retrieves copy map of the specified asset.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned available copy map.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copy-map"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetType\": \"XTREMIO_CONSISTENCY_GROUP\",\n \"details\": {\n  \"database\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fileSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nasShare\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmaxStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"ex magna\",\n \"name\": \"id commodo Duis aliquip ad\",\n \"nodeId\": \"velit occaecat nisi\",\n \"storageLocations\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"storageSystemName\": \"cillum voluptate consequat quis\",\n \"totalCopyCount\": \"culpa in eu anim\",\n \"totalSizeBytes\": \"incididunt amet elit deserunt ex\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copy-map"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copy-map"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copy-map"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/copy-map",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"copy-map"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get files and folders within a protected asset.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets",
												":id",
												"file-instances"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "pageSize",
													"value": "100",
													"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do",
													"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do",
													"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
												},
												{
													"key": "copyStartDate",
													"value": "1969-01-08T22:21:53.890Z",
													"description": "The start date from which to show document copies.  Each file or folder copy has a copy start date and copy end date that records the from-and-to time.  Modifications to that file or folder cause another document to be indexed with a different copy start date and copy end date.  This filter limits result sets to be greater or equal to a particular copy start date."
												},
												{
													"key": "copyEndDate",
													"value": "1969-01-08T22:21:53.890Z",
													"description": "The end date up to which to show document copies.  Each file or folder copy has a copy start date and copy end date that records the from-and-to time.  Modifications to that file or folder cause another document to be indexed with a different copy start date and copy end date.  This filter limits result sets to be less or equal to a particular copy end date."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the protected asset."
												}
											]
										},
										"description": "Retrieves a paginated list of documents that represent files and folders within the specified asset. A number of query parameters can be used to customize the ordering, pagination, and filtering of the result. By default, a list of 10 objects is returned.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the array of files and folders within the specified asset.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"file-instances"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														},
														{
															"key": "copyStartDate",
															"value": "1969-01-08T22:21:53.890Z"
														},
														{
															"key": "copyEndDate",
															"value": "1969-01-08T22:21:53.890Z"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"file-instances"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														},
														{
															"key": "copyStartDate",
															"value": "1969-01-08T22:21:53.890Z"
														},
														{
															"key": "copyEndDate",
															"value": "1969-01-08T22:21:53.890Z"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"file-instances"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														},
														{
															"key": "copyStartDate",
															"value": "1969-01-08T22:21:53.890Z"
														},
														{
															"key": "copyEndDate",
															"value": "1969-01-08T22:21:53.890Z"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"file-instances"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														},
														{
															"key": "copyStartDate",
															"value": "1969-01-08T22:21:53.890Z"
														},
														{
															"key": "copyEndDate",
															"value": "1969-01-08T22:21:53.890Z"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Server error prevented the successful completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/assets/:id/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"assets",
														":id",
														"file-instances"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														},
														{
															"key": "copyStartDate",
															"value": "1969-01-08T22:21:53.890Z"
														},
														{
															"key": "copyEndDate",
															"value": "1969-01-08T22:21:53.890Z"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all assets.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all assets that PowerProtect Data Manager manages.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random,serial\n"
							},
							"response": [
								{
									"name": "Successfully returned available asset.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The request is too large to be retrieved.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Requested Range Not Satisfiable",
									"code": 416,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/assets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"assets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "audit-logs",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get an audit log resource with the given ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the audit log resource."
												}
											]
										},
										"description": "Retrieves the audit log resource that matches the given ID. \n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the audit log.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"ea sint sit\",\n \"createdAt\": \"1976-03-03T15:47:53.060Z\",\n \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n \"messageID\": \"esse adipisic\",\n \"changeDescription\": \"proident qu\",\n \"changedTime\": \"1942-02-23T15:43:05.094Z\",\n \"changedBy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"username\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"after\": \"ullamco\",\n \"before\": \"veniam ex voluptate nisi\",\n \"changedObject\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"resourceName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"resourceType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"messageArgs\": [\n  \"reprehenderit eu mollit sit\",\n  \"nulla id proident irure\"\n ],\n \"userNote\": {\n  \"note\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"updatedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"username\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid. Check if id is valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update the AuditLog resource with the given id.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs",
												":id",
												"notes"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the audit log resource."
												}
											]
										},
										"description": "Updates the audit log resource with the given ID. \n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the audit log.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"culpa\",\n \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n \"messageID\": \"in Duis ea\",\n \"changeDescription\": \"nostrud qui\",\n \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n \"changedBy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"username\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"after\": \"aliqua minim elit deserunt\",\n \"before\": \"elit\",\n \"changedObject\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"resourceName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"resourceType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"messageArgs\": [\n  \"id ipsum sunt\",\n  \"adipisicing ea deserunt nostrud\"\n ],\n \"userNote\": {\n  \"note\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"updatedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"username\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested audit logs does not exist.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"culpa\",\n    \"createdAt\": \"1952-02-26T22:30:45.336Z\",\n    \"auditType\": \"PROTECTION_INFRASTRUCTURE\",\n    \"messageID\": \"in Duis ea\",\n    \"changeDescription\": \"nostrud qui\",\n    \"changedTime\": \"1979-01-29T16:36:29.932Z\",\n    \"changedBy\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"after\": \"aliqua minim elit deserunt\",\n    \"before\": \"elit\",\n    \"changedObject\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"resourceType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"messageArgs\": [\n        \"id ipsum sunt\",\n        \"adipisicing ea deserunt nostrud\"\n    ],\n    \"userNote\": {\n        \"note\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"updatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"username\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/audit-logs/:id/notes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"audit-logs",
														":id",
														"notes"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all audit log resources.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"audit-logs"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do",
											"description": "Token string to use to retrieve the next page of a result. The initial search request with queryState must be queryState=BEGIN and a pageSize. After a search begins, subsequent responses include a token string to pass as a parameter for the next page retrieval. When the query state in the response that is returned from the previous search is END, no further results can be retrieved from this query. More details see Tutorials - Page the List Result."
										}
									]
								},
								"description": "Retrieves all audit log resources. \n> This endpoint supports execution by the following roles: admin\n\n> This endpoint supports pagination with types: random,serial\n"
							},
							"response": [
								{
									"name": "Successfully returned available audit logs.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid. Check the request parameters.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The request is too large to be satisfied.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Requested Range Not Satisfiable",
									"code": 416,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/audit-logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"audit-logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "certificates",
					"item": [
						{
							"name": "{cert Id}",
							"item": [
								{
									"name": "Delete a certificate by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId",
													"value": "incididunt in consequat do",
													"description": "(Required) Certificate ID in UUID format."
												}
											]
										},
										"description": "Deletes an external host TLS certificate that is currently stored in the trust store by using the ID of the certificate.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the specified certificate.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The Authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The certificate was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An issue has occurred on the system. Please contact the system administrator.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a certificate by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId",
													"value": "incididunt in consequat do",
													"description": "(Required) Certificate ID in UUID format."
												}
											]
										},
										"description": "Retrieves an external host TLS certificate that is currently stored in the trust store, and lists it in the response body in JSON format.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin \n"
									},
									"response": [
										{
											"name": "Successfully retrieved the specified certificate.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"host\": \"nisi et irure\",\n \"port\": \"mollit\",\n \"fingerprint\": \"aliqua dolore\",\n \"id\": \"culpa aute sed voluptate\",\n \"issuerName\": \"Duis commodo in tempor\",\n \"notValidAfter\": \"quis\",\n \"notValidBefore\": \"culpa incididunt\",\n \"state\": \"UNKNOWN\",\n \"subjectName\": \"eiusmod adipisicing\",\n \"type\": \"HOST\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The Authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The certificate was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An issue has occurred on the system. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a certificate by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId",
													"value": "incididunt in consequat do",
													"description": "(Required) Certificate ID in UUID format."
												}
											]
										},
										"description": "Updates an external host TLS certificate that is currently stored in the trust store by using the ID of the certificate, and lists the updated one in the response body in JSON format.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the specified certificate.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"host\": \"nisi et irure\",\n \"port\": \"mollit\",\n \"fingerprint\": \"aliqua dolore\",\n \"id\": \"culpa aute sed voluptate\",\n \"issuerName\": \"Duis commodo in tempor\",\n \"notValidAfter\": \"quis\",\n \"notValidBefore\": \"culpa incididunt\",\n \"state\": \"UNKNOWN\",\n \"subjectName\": \"eiusmod adipisicing\",\n \"type\": \"HOST\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The Authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The certificate was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An issue has occurred on the system. Please contact the system administrator.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"host\": \"nisi et irure\",\n    \"port\": \"mollit\",\n    \"fingerprint\": \"aliqua dolore\",\n    \"id\": \"culpa aute sed voluptate\",\n    \"issuerName\": \"Duis commodo in tempor\",\n    \"notValidAfter\": \"quis\",\n    \"notValidBefore\": \"culpa incididunt\",\n    \"state\": \"UNKNOWN\",\n    \"subjectName\": \"eiusmod adipisicing\",\n    \"type\": \"HOST\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/certificates/:certId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"certificates",
														":certId"
													],
													"variable": [
														{
															"key": "certId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all certificates.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									],
									"query": [
										{
											"key": "host",
											"value": "incididunt in consequat do",
											"description": "(Required) Specify the host from which to get the certificate."
										},
										{
											"key": "port",
											"value": "incididunt in consequat do",
											"description": "(Required) Specify the port number from which to get the certificate."
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get."
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name."
										}
									]
								},
								"description": "Retrieves all of the external hosts and root CA TLS certificates that are currently stored in the trust store and has the state of ACCEPTED, and lists them in the response body in JSON format.  Identical to GET /api/v2/certificates/external.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully retrieved all the certificates.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"items\": {\n  \"host\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fingerprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"issuerName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notValidAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notValidBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"state\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"type\": {}\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=incididunt in consequat do&port=incididunt in consequat do&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "incididunt in consequat do"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-accounts",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "cloud-dr-data-targets",
									"item": [
										{
											"name": "{td Id}",
											"item": [
												{
													"name": "Delete Cloud DR target.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets",
																":tdId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) ID of the Cloud DR account."
																},
																{
																	"key": "tdId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) ID of the Cloud DR target."
																}
															]
														},
														"description": "Deletes Cloud Disaster Recovery target for the specified Cloud DR account.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "Successfully deleted Cloud DR target.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requester is not authorized to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "The requester is not authenticated to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "Any server error that prevented the completion of the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Get Cloud DR target.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets",
																":tdId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) ID of the Cloud DR account."
																},
																{
																	"key": "tdId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) ID of the Cloud DR target."
																}
															]
														},
														"description": "Retrieves Cloud Disaster Recovery target by its ID.\n> This endpoint supports execution by the following roles: user\n"
													},
													"response": [
														{
															"name": "Successfully returned Cloud DR target.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"copiesStorageContainer\": {\n  \"cloudAccountId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n \"id\": \"eiusmod pariatur incididunt\",\n \"name\": \"commodo ipsum\",\n \"state\": \"ACTIVE\"\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requester is not authenticated to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requester is not authorized to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "Any server error that prevented the completion of the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets/:tdId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"cloud-dr-accounts",
																		":id",
																		"cloud-dr-data-targets",
																		":tdId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "tdId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get all Cloud DR targets.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id",
														"cloud-dr-data-targets"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) ID of the Cloud DR account."
														}
													]
												},
												"description": "Retrieves a list of Cloud DR targets for the specified Cloud DR account.\n> This endpoint supports execution by the following roles: user\n"
											},
											"response": [
												{
													"name": "Successfully returned Cloud DR targets list.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authenticated to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "Any server error that prevented the completion of the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Create Cloud DR target.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id",
														"cloud-dr-data-targets"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) ID of the Cloud DR account."
														}
													]
												},
												"description": "Creates Cloud Disaster Recovery target for the specified Cloud DR account.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Resource created.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"copiesStorageContainer\": {\n  \"cloudAccountId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n \"id\": \"eiusmod pariatur incididunt\",\n \"name\": \"commodo ipsum\",\n \"state\": \"ACTIVE\"\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authenticated to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authorized to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "Any server error that prevented the completion of the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"copiesStorageContainer\": {\n        \"cloudAccountId\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"encryptionMethod\": \"commodo Excepteur sunt dolore\",\n    \"id\": \"eiusmod pariatur incididunt\",\n    \"name\": \"commodo ipsum\",\n    \"state\": \"ACTIVE\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-data-targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-data-targets"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "cloud-dr-storage-containers",
									"item": [
										{
											"name": "Get Cloud DR storage containers.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id",
														"cloud-dr-storage-containers"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of storage container. "
														}
													]
												},
												"description": "Retrieves a list of Cloud DR storage containers for the specified Cloud DR account.\n> This endpoint supports execution by the following roles: user\n"
											},
											"response": [
												{
													"name": "Successfully returned storage containers.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"cloudAccountId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"location\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"cloudAccountId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"location\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authenticated to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "Any server error that prevented the completion of the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Get Cloud DR storage container.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id",
														"cloud-dr-storage-containers",
														":scId"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) ID of the Cloud DR account."
														},
														{
															"key": "scId",
															"value": "incididunt in consequat do",
															"description": "(Required) Storage container ID."
														}
													]
												},
												"description": "Retrieves the specified Cloud Disaster Recovery storage container for the Cloud DR account.\n> This endpoint supports execution by the following roles: user\n"
											},
											"response": [
												{
													"name": "Successfully returned storage container.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers",
																":scId"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "scId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"cloudAccountId\": \"esse qui sit ullamco\",\n \"id\": \"do officia\",\n \"location\": \"qui\",\n \"name\": \"proident do\",\n \"type\": \"nostrud\"\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers",
																":scId"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "scId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authenticated to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers",
																":scId"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "scId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requester is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers",
																":scId"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "scId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "Any server error that prevented the completion of the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id/cloud-dr-storage-containers/:scId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"cloud-dr-accounts",
																":id",
																"cloud-dr-storage-containers",
																":scId"
															],
															"variable": [
																{
																	"key": "id"
																},
																{
																	"key": "scId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get Cloud DR account by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Cloud DR account ID."
												}
											]
										},
										"description": "Retrieves the specified Cloud Disaster Recovery account by ID.\n> This endpoint supports execution by the following roles: user\n"
									},
									"response": [
										{
											"name": "Successfully returned Cloud DR account.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"connectionStatus\": \"consequat eiusmod non est in\",\n \"connectionStatusMessage\": \"qui do sit officia est\",\n \"id\": \"id enim\",\n \"providerAccountId\": \"ullamco aliquip in \",\n \"providerName\": \"eu\",\n \"providerParameters\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"secretKey\": \"aliqua ad\",\n \"userKey\": \"pariatur qui\",\n \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update Cloud DR account.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The Cloud DR account ID."
												}
											]
										},
										"description": "Updates the specified Cloud Disaster Recovery account.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Resource updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"connectionStatus\": \"consequat eiusmod non est in\",\n \"connectionStatusMessage\": \"qui do sit officia est\",\n \"id\": \"id enim\",\n \"providerAccountId\": \"ullamco aliquip in \",\n \"providerName\": \"eu\",\n \"providerParameters\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"secretKey\": \"aliqua ad\",\n \"userKey\": \"pariatur qui\",\n \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-accounts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get Cloud DR accounts.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-accounts"
									]
								},
								"description": "Retrieves a complete listing of the Cloud Disaster Recovery (Cloud DR) accounts in the system. This listing includes the IDs for each Cloud DR account as well as other information such as the name of the provider, user name, connection status, and so on.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "Successfully returned Cloud DR accounts list.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create Cloud DR accounts.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"connectionStatus\": \"sit ex sunt aliquip\",\n    \"connectionStatusMessage\": \"in dolor nulla\",\n    \"id\": \"d\",\n    \"providerAccountId\": \"irure nulla\",\n    \"providerName\": \"sit labore elit magna cupidatat\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"\",\n    \"userKey\": \"ex veniam id\",\n    \"userName\": \"voluptate officia\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-accounts"
									]
								},
								"description": "Creates a new Cloud Disaster Recovery account.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Resource created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"connectionStatus\": \"consequat eiusmod non est in\",\n \"connectionStatusMessage\": \"qui do sit officia est\",\n \"id\": \"id enim\",\n \"providerAccountId\": \"ullamco aliquip in \",\n \"providerName\": \"eu\",\n \"providerParameters\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"secretKey\": \"aliqua ad\",\n \"userKey\": \"pariatur qui\",\n \"userName\": \"dolore eu esse nulla dolore\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"connectionStatus\": \"consequat eiusmod non est in\",\n    \"connectionStatusMessage\": \"qui do sit officia est\",\n    \"id\": \"id enim\",\n    \"providerAccountId\": \"ullamco aliquip in \",\n    \"providerName\": \"eu\",\n    \"providerParameters\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"secretKey\": \"aliqua ad\",\n    \"userKey\": \"pariatur qui\",\n    \"userName\": \"dolore eu esse nulla dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-accounts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-accounts"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-configurations",
					"item": [
						{
							"name": "Update Cloud DR configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-configurations"
									]
								},
								"description": "Update the Cloud Disaster Recovery configuration. Cloud DR configuration settings are internal and should not be modified without the supervision of Customer Support.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Resource has been updated successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"cdrsConnectivityState\": {\n  \"CdrsConnectivityStateEnum\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ]\n },\n \"cidr\": \"tempor occaecat dolor\",\n \"cloudTargetId\": \"dolor id occaecat laboris\",\n \"connectionIp\": \"qui tempor enim\",\n \"deploymentCompleted\": false,\n \"email\": \"tempor quis Excepteur nulla\",\n \"privateNetwork\": true,\n \"publicDns\": \"exercitation consectetur ut\",\n \"region\": \"officia dolor Lorem ea\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"officia\",\n    \"value\": \"in dolore sed ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get Cloud DR configuration by key.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-configurations",
										":key"
									],
									"variable": [
										{
											"key": "key",
											"value": "incididunt in consequat do",
											"description": "(Required) Key of the Cloud DR configuration setting."
										}
									]
								},
								"description": "Retrieves the Cloud Disaster Recovery configuration setting for the specified key. Cloud DR configuration settings are internal and should not be modified without the supervision of Customer Support.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "The response body contains the requested Cloud DR configuration setting.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations",
												":key"
											],
											"variable": [
												{
													"key": "key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"key\": \"officia\",\n \"value\": \"in dolore sed ad\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations",
												":key"
											],
											"variable": [
												{
													"key": "key"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations",
												":key"
											],
											"variable": [
												{
													"key": "key"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations",
												":key"
											],
											"variable": [
												{
													"key": "key"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-configurations/:key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-configurations",
												":key"
											],
											"variable": [
												{
													"key": "key"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-proxy",
					"item": [
						{
							"name": "Delete Cloud DR proxy configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-proxy"
									]
								},
								"description": "Deletes proxy details from Cloud DR.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "The request was accepted for processing.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-proxy"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						},
						{
							"name": "Get Cloud DR proxy configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-proxy"
									]
								},
								"description": "Retrieves details about the Cloud DR proxy.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "The request completed successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-proxy"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n },\n {\n  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n }\n]"
								}
							]
						},
						{
							"name": "Update Cloud DR proxy configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enableAuthentication\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"host\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"port\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"username\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": \"id sint\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-proxy"
									]
								},
								"description": "Updates proxy details in Cloud DR.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "The request was accepted for processing.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"enable\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"enableAuthentication\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"host\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"port\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"username\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"password\": \"id sint\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-proxy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-proxy"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-server-configuration",
					"item": [
						{
							"name": "Get CDRS properties.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-configuration"
									]
								},
								"description": "Retrieves the Cloud Disaster Recovery Server (CDRS) properties. CDRS properties include Cloud target ID, CDRS connection IP address and connectivity state, region, whether the deployment completed or not, and so on.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "Successfully returned CDRS properties.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"cdrsConnectivityState\": {\n  \"CdrsConnectivityStateEnum\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ]\n },\n \"cidr\": \"Lorem reprehenderit\",\n \"cloudTargetId\": \"dolor reprehenderit eiusmod\",\n \"connectionIp\": \"reprehenderit qui amet\",\n \"deploymentCompleted\": true,\n \"email\": \"commodo adipisicing \",\n \"privateNetwork\": true,\n \"publicDns\": \"Duis laboris re\",\n \"region\": \"ad irure laboris\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Edit CDRS connection properties.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-configuration"
									]
								},
								"description": "Edit the Cloud Disaster Recovery Server (CDRS) connection properties.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Resource updated.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"eu ex mollit nulla\",\n    \"privateIp\": \"nostrud ex aliqua Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-configuration"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-server-deployment",
					"item": [
						{
							"name": "Delete CDRS.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"tempor eu Lorem\""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-deployment"
									]
								},
								"description": "Deletes the Cloud Disaster Recovery Server (CDRS).\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully deleted CDRS.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"tempor eu Lorem\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"tempor eu Lorem\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"tempor eu Lorem\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"tempor eu Lorem\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"tempor eu Lorem\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get CDRS deployment state.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-deployment"
									]
								},
								"description": "Get the Cloud Disaster Recovery Server (CDRS) deployment state. The deployment state includes job name, deployment state, and deployment stages and their status.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "Successfully returned CDRS deployment state.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"deployStagesStatus\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"deployState\": \"IN_PROGRESS\",\n \"jobName\": \"magna dolore ullamco\",\n \"message\": \"sunt nisi tempor\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Deploy a CDRS.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-deployment"
									]
								},
								"description": "Deploys a Cloud Disaster Recovery Server (CDRS).\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Request accepted.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"taskId\": \"commodo ut aliqu\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminPassword\": \"in\",\n    \"cidrBlockIp\": \"Lorem commodo\",\n    \"cloudTargetId\": \"in reprehenderit\",\n    \"deleteExisting\": true,\n    \"email\": \"ut aute exercitation\",\n    \"monitorPassword\": \"elit irure\",\n    \"vpcId\": \"qui consequat nisi velit id\",\n    \"workflowTaskId\": \"voluptate aliquip ullamco Duis\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-server-deployment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-server-deployment"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-sessions",
					"item": [
						{
							"name": "Get Cloud DR sessions.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-sessions"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves Cloud Disaster Recovery sessions by pagination, order by, and filter.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "Successfully returned available Cloud DR sessions resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"pageInfo\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "End Cloud DR session.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-sessions",
										":drId"
									],
									"variable": [
										{
											"key": "drId",
											"value": "incididunt in consequat do",
											"description": "(Required) Cloud DR session ID."
										}
									]
								},
								"description": "Ends the Cloud Disaster Recovery session according to the specified session ID. You can get a list of Cloud Disaster Recovery session IDs by using GET /api/v2/cloud-dr-sessions.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully invoked ending of Cloud DR session.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions",
												":drId"
											],
											"variable": [
												{
													"key": "drId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions",
												":drId"
											],
											"variable": [
												{
													"key": "drId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions",
												":drId"
											],
											"variable": [
												{
													"key": "drId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions",
												":drId"
											],
											"variable": [
												{
													"key": "drId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-sessions/:drId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-sessions",
												":drId"
											],
											"variable": [
												{
													"key": "drId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-dr-vcenters",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Update vCenter configuration.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"magna sed ut\",\n    \"isFailoverTarget\": true,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters",
												":id",
												"configuration"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The vCenter Server ID."
												}
											]
										},
										"description": "Updates the vCenter configuration for the specified vCenter Server.\n> This endpoint supports execution by the following roles: export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated vCenter configuration.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The vCenter id in the request is not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataStores\": [\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"id\": \"in esse\",\n    \"isFailoverTarget\": false,\n    \"networks\": [\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ipRanges\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"moref\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netMask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/configuration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"configuration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get vCenter inventory.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters",
												":id",
												"inventory"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The vCenter Server ID."
												}
											]
										},
										"description": "Retrieves vCenter inventory for the specified vCenter Server ID.\n> This endpoint supports execution by the following roles: user\n"
									},
									"response": [
										{
											"name": "Successfully returned vCenter inventory.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"dataCenters\": [\n  {\n   \"dataStores\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"moref\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networks\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"dataStores\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"moref\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networks\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"id\": \"occaecat incididunt\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requester is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The vCenter id in the request is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters/:id/inventory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cloud-dr-vcenters",
														":id",
														"inventory"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get Cloud DR vCenters list.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-vcenters"
									]
								},
								"description": "Retrieves a list of Cloud Disaster Recovery vCenter Servers. The list includes the vCenter Server IDs, which you can use to update the vCenter Server configuration or get the vCenter Server inventory of the specified vCenter Server.\n> This endpoint supports execution by the following roles: user\n"
							},
							"response": [
								{
									"name": "Successfully returned vCenter Servers list.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-dr-vcenters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-dr-vcenters"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "cloud-recalled-copies",
					"item": [
						{
							"name": "Recall a copy from the cloud.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-recalled-copies"
									]
								},
								"description": "Runs a process to move back a copy set from the cloud to the active tier based on the specified protection copy set ID and retier retention time.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Asset has been moved back to Data Domain. ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"taskId\": \"proident\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protectionCopySetId\": \"eiusmod est enim\",\n    \"retierRetentionTime\": \"1999-10-11T17:20:25.912Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a copy set retier time to the cloud.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-recalled-copies",
										":copySetId"
									],
									"variable": [
										{
											"key": "copySetId",
											"value": "incididunt in consequat do",
											"description": "(Required) The asset ID of a copy on the Data Domain."
										}
									]
								},
								"description": "Updates the retier retention time for a specified copy set on a Data Domain based on the copy set ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Resource updated.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies",
												":copySetId"
											],
											"variable": [
												{
													"key": "copySetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"taskId\": \"proident\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies",
												":copySetId"
											],
											"variable": [
												{
													"key": "copySetId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requester is not authorized to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies",
												":copySetId"
											],
											"variable": [
												{
													"key": "copySetId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requester is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies",
												":copySetId"
											],
											"variable": [
												{
													"key": "copySetId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"retierRetentionTime\": \"1958-03-10T23:13:30.971Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/cloud-recalled-copies/:copySetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cloud-recalled-copies",
												":copySetId"
											],
											"variable": [
												{
													"key": "copySetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "common-settings",
					"item": [
						{
							"name": "ASSET SETTING",
							"item": [
								{
									"name": "Get asset settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"ASSET_SETTING"
											]
										},
										"description": "Get asset settings.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the asset settings.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"labore sit ex cillum\"\n}"
										},
										{
											"name": "The request is invalid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Modify asset settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"ASSET_SETTING"
											]
										},
										"description": "Modify the current asset settings.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the asset settings.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "Invalid request to update Dynamic Filter setting.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/ASSET_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"ASSET_SETTING"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "DYNAMIC FILTER SETTING",
							"item": [
								{
									"name": "Get dynamic filter settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"DYNAMIC_FILTER_SETTING"
											]
										},
										"description": "Retrieves dynamic filter settings.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The request is invalid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update dynamic filter settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"DYNAMIC_FILTER_SETTING"
											]
										},
										"description": "Updates the dynamic filter settings (known as protection rules in the PowerProtect Data Manager UI).\n\nPowerProtect Data Manager supports migrating any assets across protection policies by default. If you want to migrate only *unprotected* assets across protection policies, remove the \"value\" from the supportMoveAssetsAcrossProtectionPolicy property when forming the request. Using the \"VMWARE_VIRTUAL_MACHINE\" value as an example, if you want to enable migrating only *unprotected* VMs across protection policies, remove the value \"VMWARE_VIRTUAL_MACHINE.\"\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the dynamic filter settings.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "Invalid request to update the dynamic filter setting.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/DYNAMIC_FILTER_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"DYNAMIC_FILTER_SETTING"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "TELEMETRY SETTING",
							"item": [
								{
									"name": "Get telemetry settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"TELEMETRY_SETTING"
											]
										},
										"description": "Retrieves the current telemetry settings.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Found and returned the telemetry settings.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Modify telemetry settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"TELEMETRY_SETTING"
											]
										},
										"description": "Updates the current telemetry settings.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the telemetry settings.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The submitted settings payload has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Required fields are missing in the request payload.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/TELEMETRY_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"TELEMETRY_SETTING"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "VM BACKUP SETTING",
							"item": [
								{
									"name": "Get VM backup settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"VM_BACKUP_SETTING"
											]
										},
										"description": "Retrieves VM backup settings.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the VM backup settings.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The request is invalid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update VM backup settings.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												"VM_BACKUP_SETTING"
											]
										},
										"description": "Updates the current VM backup settings.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the VM backup settings.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "Invalid request to update VM backup setting.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/VM_BACKUP_SETTING",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														"VM_BACKUP_SETTING"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get common settings by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) \tCommon settings ID."
												}
											]
										},
										"description": "Retrieves common settings by ID.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned all the settings with the specified common settings ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find settings with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Modify the settings by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Common settings ID sent in request."
												}
											]
										},
										"description": "Modifies the settings by ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the settings.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"id\": \"culpa incididunt\"\n}"
										},
										{
											"name": "The submitted settings payload has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find settings with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Occurs when the required fields are missing in the request payload.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"properties\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"id\": \"culpa incididunt\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/common-settings/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"common-settings",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all settings.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/common-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"common-settings"
									]
								},
								"description": "Retrieves the available common settings.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned the available settings successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/common-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"common-settings"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "compliance-results",
					"item": [
						{
							"name": "Get all compliance results.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-results"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves the compliance results. The compliance result is one run of compliance verification for one asset for all SLAs that are assigned to the asset.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available compliance result.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get  compliance results by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-results",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) ID of the compliance result."
										}
									]
								},
								"description": "Retrieves the compliance result with the specified ID. The compliance result is one run of compliance verification for one asset for all SLAs that are assigned to the asset.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned the compliance result.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"completionTime\": \"1948-09-07T05:14:52.161Z\",\n \"id\": \"magna est eu\",\n \"nextStartTime\": \"1949-08-27T07:56:47.154Z\",\n \"startTime\": \"1981-08-18T14:40:56.065Z\",\n \"state\": \"WAITING\",\n \"status\": \"FAILED\",\n \"verifiedObjectives\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"windowEndTime\": \"2006-07-19T20:01:31.139Z\"\n}"
								},
								{
									"name": "The requested compliance result does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/compliance-results/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"compliance-results",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "components",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get component by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/components/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Component ID."
												}
											]
										},
										"description": "Retrieves component with the specific ID.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the component with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"componentDisplayName\": \"Duis adipisicing sint\",\n \"componentServiceName\": \"Ut\",\n \"componentType\": \"occaecat reprehenderi\",\n \"id\": \"co\",\n \"logging\": {\n  \"configurable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logLocation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"monitored\": false,\n \"status\": \"SHUTTING_DOWN\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a component with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update component by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/components/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Component ID."
												}
											]
										},
										"description": "Updates a component by ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The update operation is successful.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"componentDisplayName\": \"Duis adipisicing sint\",\n \"componentServiceName\": \"Ut\",\n \"componentType\": \"occaecat reprehenderi\",\n \"id\": \"co\",\n \"logging\": {\n  \"configurable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logLocation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"monitored\": false,\n \"status\": \"SHUTTING_DOWN\"\n}"
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a component with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"componentDisplayName\": \"Duis adipisicing sint\",\n    \"componentServiceName\": \"Ut\",\n    \"componentType\": \"occaecat reprehenderi\",\n    \"id\": \"co\",\n    \"logging\": {\n        \"configurable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logLocation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"monitored\": false,\n    \"status\": \"SHUTTING_DOWN\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Manage CDRA component.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/components/:id/management",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components",
												":id",
												"management"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID"
												}
											]
										},
										"description": "Manages the Cloud Disaster Recovery Appliance (CDRA) component.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"esse reprehenderit\""
										},
										{
											"name": "The POST operation is successful.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a component with the specified ID.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/components/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"components",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all components.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/components",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"components"
									]
								},
								"description": "Retrieves all the available components.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/components",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/components",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/components",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/components",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"components"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "configurations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) id"
												}
											]
										},
										"description": "Retrieves a PowerProtect Data Manager appliance configuration by its ID. Running GET on this API returns an array of configurations objects with which the PowerProtect Data Manager appliance can be configured.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the configuration with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"reprehenderit\",\n \"applicationUserPassword\": \"in dolore\",\n \"timeZone\": \"Duis fugiat elit dolore voluptate\",\n \"lockbox\": {\n  \"newPassphrase\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"passphrase\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastUpdatedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"osUsers\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"autoSupport\": false,\n \"configType\": \"veniam aliqua sit ullamco\",\n \"deployedPlatform\": \"GCP\",\n \"firewall\": {\n  \"outbounds\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"gettingStartedCompleted\": false,\n \"integratedStorageSecuritySetupCompleted\": true,\n \"networks\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"nodeId\": \"nostrud dolore adipisicing\",\n \"ntpServers\": [\n  \"dolor veniam aute officia\",\n  \"dolor dolore\"\n ]\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a configuration with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Start the initial configuration.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Configuration ID sent in request."
												}
											]
										},
										"description": "The initial configuration request is allowed only when the appliance state is PENDING or RESTORE. You can only perform the request once.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"in ex eiusmod non\",\n \"applicationUserPassword\": \"cillum quis\",\n \"timeZone\": \"dolore nisi culpa incididunt\",\n \"lockbox\": {\n  \"newPassphrase\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"passphrase\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastUpdatedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"osUsers\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"autoSupport\": false,\n \"configType\": \"culpa est fugiat Ut\",\n \"deployedPlatform\": \"GCP\",\n \"firewall\": {\n  \"outbounds\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"gettingStartedCompleted\": true,\n \"integratedStorageSecuritySetupCompleted\": true,\n \"networks\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"nodeId\": \"fugiat mollit cillum\",\n \"ntpServers\": [\n  \"do officia in anim\",\n  \"tempor fugiat\"\n ]\n}"
										},
										{
											"name": "Accepted and processing the initial configuration request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The submitted configuration has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot change the configuration in the current node state.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a configuration with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in ex eiusmod non\",\n    \"applicationUserPassword\": \"cillum quis\",\n    \"timeZone\": \"dolore nisi culpa incididunt\",\n    \"lockbox\": {\n        \"newPassphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastUpdatedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"osUsers\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"autoSupport\": false,\n    \"configType\": \"culpa est fugiat Ut\",\n    \"deployedPlatform\": \"GCP\",\n    \"firewall\": {\n        \"outbounds\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"gettingStartedCompleted\": true,\n    \"integratedStorageSecuritySetupCompleted\": true,\n    \"networks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"nodeId\": \"fugiat mollit cillum\",\n    \"ntpServers\": [\n        \"do officia in anim\",\n        \"tempor fugiat\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all configurations.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"configurations"
									]
								},
								"description": "Retrieves all PowerProtect Data Manager appliance configurations. Running GET on this API endpoint returns an array of configurations objects with which the PowerProtect Data Manager appliance can be configured.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the progress of initial configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"configurations",
										":configurationId",
										"config-status"
									],
									"variable": [
										{
											"key": "configurationId",
											"value": "incididunt in consequat do",
											"description": "(Required) Configuration ID."
										}
									]
								},
								"description": "Retrieves the progress of the initial configuration. The configuration ID must first be obtained by running GET on the configurations API, which returns an array of configurations objects with which the PowerProtect Data Manager appliance can be configured.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned the available configuration status successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":configurationId",
												"config-status"
											],
											"variable": [
												{
													"key": "configurationId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"completedStage\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"currentStage\": {\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"endTime\": \"Duis ut\",\n \"percentageCompleted\": 9730359,\n \"startTime\": \"dolore qui ipsum\",\n \"status\": \"FAILED\"\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":configurationId",
												"config-status"
											],
											"variable": [
												{
													"key": "configurationId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":configurationId",
												"config-status"
											],
											"variable": [
												{
													"key": "configurationId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Cannot find a configuration status with the given ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":configurationId",
												"config-status"
											],
											"variable": [
												{
													"key": "configurationId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/configurations/:configurationId/config-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"configurations",
												":configurationId",
												"config-status"
											],
											"variable": [
												{
													"key": "configurationId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "copies/{id}",
					"item": [
						{
							"name": "cloud",
							"item": [
								{
									"name": "Recall and retier a copy from cloud.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"action\": \"RETIER\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"cloud"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the copy."
												}
											]
										},
										"description": "Recall and retier a copy from cloud. The header should contain a valid authentication token. Retier and retention time is required.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully create the copy.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"action\": \"RECALL\",\n \"retierRetentionTime\": \"Excepteur ullamco\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update recall and retier a copy retier time from cloud.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"action\": \"RETIER\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"cloud"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the copy."
												}
											]
										},
										"description": "Update recall and retier a copy retier time from cloud. Only retier retention time can be updated. Retier retention time is required.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the copy.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"action\": \"RECALL\",\n \"retierRetentionTime\": \"Excepteur ullamco\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/copies/:id/cloud",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"copies",
														":id",
														"cloud"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Delete copy by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies",
										":id"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false",
											"description": "For asset type without dependency, this option makes no difference. For asset type with dependency between copies:\n- cascadeDelete=true deletes all copies in the dependency chain.\n- cascadeDelete=false does not delete any copy with HTTP status code of 409 (Conflict).\n- By default, when cascadeDelete is not specified, it operates as if cascadeDelete is false."
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false",
											"description": "- removeConfigurationOnly=true only deletes metadata from PowerProtect Data Manager without physically deleting from storage or application agent.\n- removeConfigurationOnly=false deletes copy from storage and application agent (if any). If successfully deleted from storage and application agent, then it deletes metadata from PowerProtect Data Manager.\n- By default, when removeConfigurationOnly is not specified, it operates as if removeConfigurationOnly is false."
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false",
											"description": "- forceRemoveLatestBackup=true enables deleting the latest backup. It may break the later chain, or for VM CBT backup, it may break the in-progress backup.\n- forceRemoveLatestBackup=false, if the specified copy is the latest backup, produces HTTP error 409 (Conflict).\n- By default, when forceRemoveLatestBackup is not specified, it operates as if removeConfigurationOnly is false."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) ID of the copy."
										}
									]
								},
								"description": "Deletes asset copy by ID.\n> This endpoint supports execution by the following roles: user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Success.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"copyIds\": [\n  \"proident velit reprehenderit\",\n  \"minim aliqua in\"\n ],\n \"activityId\": \"qui laboris labore\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The copy to be deleted is not found.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The copy could not be deleted because of a dependency issue. Examples of dependency issues include retention lock, dependency copies could not be deleted, restoring, or cloud tiering, or cloud recalling.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"query": [
												{
													"key": "cascadeDelete",
													"value": "false"
												},
												{
													"key": "removeConfigurationOnly",
													"value": "false"
												},
												{
													"key": "forceRemoveLatestBackup",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get copy by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) ID of the copy."
										}
									]
								},
								"description": "Retrieves a copy by its ID. The copy defines asset backup. Each copy is assigned to an asset. A asset can correspond to many copies.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned copy.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"adhocBackup\": true,\n \"assetId\": \"sed\",\n \"assetSubtype\": \"K8S_PERSISTENT_VOLUME_CLAIM\",\n \"backupTransactionId\": \"ipsum laboris aute\",\n \"baseCopyId\": \"ut\",\n \"copyConsistency\": \"APPLICATION_CONSISTENT\",\n \"copyType\": \"FULL\",\n \"createTime\": \"1953-07-13T11:27:08.988Z\",\n \"dataTargetIds\": [\n  \"et proident ex\",\n  \"fugiat sint\"\n ],\n \"details\": {\n  \"arraySerialNo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"arraySubType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"backupStartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"fileSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8sBackup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"mssqlBackup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nasBackup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"oracleBackup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageClass\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageGroupID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmBackup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"endTime\": \"2016-04-04T15:29:07.848Z\",\n \"exportedCopyCount\": 96920889,\n \"externalId\": \"proident voluptate eu qui\",\n \"id\": \"tempor in adipisicing s\",\n \"location\": \"LOCAL_RECALLED\",\n \"logCount\": \"culpa adipisicing aliquip dolore\",\n \"metadataIndexingStatus\": \"PARTIAL_SUCCESS\",\n \"partialCopy\": true,\n \"partialCopyDescription\": \"esse elit proident amet\",\n \"protectionCreated\": false,\n \"protectionPolicy\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"stages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"replicatedCopy\": false,\n \"restoreTargetCompatibilities\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"retentionLock\": \"ALL_COPIES_LOCKED\",\n \"retentionTime\": \"2004-05-18T01:29:40.612Z\",\n \"retierTime\": \"2006-12-12T16:26:51.469Z\",\n \"size\": 86288929,\n \"startTime\": \"1959-11-29T05:51:29.620Z\",\n \"state\": \"READY_FOR_CLOUD_TIERING\",\n \"storageSystemId\": \"laborum minim\",\n \"validationResult\": {\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"time\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get copy logs by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies",
										":id",
										"logs"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) ID of the copy."
										}
									]
								},
								"description": "Retrieves copy logs by ID. The parameter ID is the ID of a full copy. It returns BAD_REQUEST if parameter ID is invalid.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned copy logs.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/copies/:id/logs?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"copies",
												":id",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "credentials",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete credential by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the credential."
												}
											]
										},
										"description": "Deletes a **Credential** by ID from PowerProtect Data Manager. The deleted **Credential** is removed from PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the credential.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a credential by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the credential."
												}
											]
										},
										"description": "Retrieves a **Credential** by ID. **Credential** contains username and password. The password is securely stored in the lockbox of PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the credential.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"deserunt aliqua dolore irure\",\n \"username\": \"amet\",\n \"password\": \"adipisicing labore\",\n \"type\": \"SAPHANA_DB_USER\",\n \"consumersCount\": 11892409,\n \"id\": \"dolor re\",\n \"internal\": false,\n \"method\": \"USER_KEY\",\n \"secretId\": \"do laborum culpa pariatu\"\n}"
										},
										{
											"name": "The requested credential does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update credential by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the credential."
												}
											]
										},
										"description": "Updates a **Credential** by ID. **Credential** contains username and password. The password is securely stored in the lockbox of PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the credential.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"deserunt aliqua dolore irure\",\n \"username\": \"amet\",\n \"password\": \"adipisicing labore\",\n \"type\": \"SAPHANA_DB_USER\",\n \"consumersCount\": 11892409,\n \"id\": \"dolor re\",\n \"internal\": false,\n \"method\": \"USER_KEY\",\n \"secretId\": \"do laborum culpa pariatu\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get all the consumers which are using this credential",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials",
												":id",
												"usage"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The credential Id"
												}
											]
										},
										"description": "Get all the consumers which are using this credential\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"consumerList\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"consumersCount\": 95916791\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested credential does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/credentials/:id/usage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"credentials",
														":id",
														"usage"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all credentials.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all **Credentials** in PowerProtect Data Manager. **Credentials** contains username and password or token. The password is securely stored in the lockbox of PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available credentials.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a credential.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									]
								},
								"description": "Creates a **Credential** in PowerProtect Data Manager. **Credential** contains username and password. The password is securely stored in the lockbox of PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"deserunt aliqua dolore irure\",\n \"username\": \"amet\",\n \"password\": \"adipisicing labore\",\n \"type\": \"SAPHANA_DB_USER\",\n \"consumersCount\": 11892409,\n \"id\": \"dolor re\",\n \"internal\": false,\n \"method\": \"USER_KEY\",\n \"secretId\": \"do laborum culpa pariatu\"\n}"
								},
								{
									"name": "Successfully created the credential.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"deserunt aliqua dolore irure\",\n \"username\": \"amet\",\n \"password\": \"adipisicing labore\",\n \"type\": \"SAPHANA_DB_USER\",\n \"consumersCount\": 11892409,\n \"id\": \"dolor re\",\n \"internal\": false,\n \"method\": \"USER_KEY\",\n \"secretId\": \"do laborum culpa pariatu\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"sed minim amet\",\n    \"username\": \"dolor aliqua culpa sunt adipisicing\",\n    \"password\": \"nulla aliquip\",\n    \"type\": \"OS\",\n    \"consumersCount\": 45825945,\n    \"id\": \"sunt Excepteur in\",\n    \"internal\": true,\n    \"method\": \"USER_KEY\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"credentials"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "data-targets",
					"item": [
						{
							"name": "Get all data targets.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"data-targets"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all data targets. These data targets are automatically generated by storage systems. This API request returns a list of data targets.  An empty list is returned if there are no data sources. Filtering is supported for asterisked properties. Paging is supported.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "The request completed successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"details\": {\n  \"replica\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalId\": \"consequat dolore\",\n \"id\": \"ea eu elit\",\n \"lastDiscovered\": \"2010-01-08T07:08:25.340Z\",\n \"lastDiscoveryStatus\": \"DETECTED\",\n \"name\": \"in quis anim velit\",\n \"storageArrayId\": \"Excepteur aliqua nulla\",\n \"subtype\": \"DDV_DISK_SERVICE\",\n \"type\": \"TARGET_VOLUME\",\n \"vendor\": \"VMAX\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get a data target by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/data-targets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"data-targets",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) id of the data target"
										}
									]
								},
								"description": "Retrieves a data target by its ID. This API request returns a data target. If the data target ID does not exist, 404 is returned.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "The request completed successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"details\": {\n  \"replica\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalId\": \"consequat dolore\",\n \"id\": \"ea eu elit\",\n \"lastDiscovered\": \"2010-01-08T07:08:25.340Z\",\n \"lastDiscoveryStatus\": \"DETECTED\",\n \"name\": \"in quis anim velit\",\n \"storageArrayId\": \"Excepteur aliqua nulla\",\n \"subtype\": \"DDV_DISK_SERVICE\",\n \"type\": \"TARGET_VOLUME\",\n \"vendor\": \"VMAX\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requested resource was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/data-targets/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"data-targets",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "datadomain-ddboost-encryption-settings",
					"item": [
						{
							"name": "Get Data Domain system encryption setting.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-ddboost-encryption-settings"
									],
									"query": [
										{
											"key": "hostname",
											"value": "incididunt in consequat do",
											"description": "(Required) The hostname."
										},
										{
											"key": "port",
											"value": "43251073",
											"description": "(Required) The port number."
										},
										{
											"key": "type",
											"value": "incididunt in consequat do",
											"description": "(Required) The encrytion type."
										},
										{
											"key": "credentialId",
											"value": "incididunt in consequat do",
											"description": "(Required) The credential ID."
										}
									]
								},
								"description": "Retrieves Data Domain system encryption setting information of the specified Data Domain system or PowerProtect Data Manager. The result contains the authentication mode and the encryption strength information.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "The request completed successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											],
											"query": [
												{
													"key": "hostname",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "43251073"
												},
												{
													"key": "type",
													"value": "incididunt in consequat do"
												},
												{
													"key": "credentialId",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ddboostOptions\": {\n  \"globalAuthenticationMode\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"globalEncryptionStrength\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"hostname\": \"nostrud aliquip Ut esse dolore\",\n \"replicationOptions\": {\n  \"authenticationMode\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"encryption\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											],
											"query": [
												{
													"key": "hostname",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "43251073"
												},
												{
													"key": "type",
													"value": "incididunt in consequat do"
												},
												{
													"key": "credentialId",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											],
											"query": [
												{
													"key": "hostname",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "43251073"
												},
												{
													"key": "type",
													"value": "incididunt in consequat do"
												},
												{
													"key": "credentialId",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											],
											"query": [
												{
													"key": "hostname",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "43251073"
												},
												{
													"key": "type",
													"value": "incididunt in consequat do"
												},
												{
													"key": "credentialId",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings?hostname=incididunt in consequat do&port=43251073&type=incididunt in consequat do&credentialId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											],
											"query": [
												{
													"key": "hostname",
													"value": "incididunt in consequat do"
												},
												{
													"key": "port",
													"value": "43251073"
												},
												{
													"key": "type",
													"value": "incididunt in consequat do"
												},
												{
													"key": "credentialId",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Data Domain system encryption setting.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-ddboost-encryption-settings"
									]
								},
								"description": "Updates Data Domain system encryption setting of the local PowerProtect Data Manager. The encryption settings will be updated on the local Intergrated Storage system.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "The request completed successfully.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ddboostOptions\": {\n  \"globalAuthenticationMode\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"globalEncryptionStrength\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"hostname\": \"nostrud aliquip Ut esse dolore\",\n \"replicationOptions\": {\n  \"authenticationMode\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"encryption\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ddboostOptions\": {\n        \"globalAuthenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"globalEncryptionStrength\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"nostrud aliquip Ut esse dolore\",\n    \"replicationOptions\": {\n        \"authenticationMode\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/datadomain-ddboost-encryption-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"datadomain-ddboost-encryption-settings"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "discoveries",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete a discovery by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the internal discovery model stored in Elasticsearch."
												}
											]
										},
										"description": "Deletes a discovery that is identified by a specified ID. If the discovery that is identified by the specified ID is already running, the API returns an error with HTTP status code 409 (CONFLICT). If the discovery is deleted successfully, this API returns the HTTP status code 204 (NO CONTENT).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the discovery.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "A similar discovery request is currently processing.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update a discovery by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the internal discovery model stored in Elasticsearch."
												}
											]
										},
										"description": "Updates a discovery that is identified by a specified ID. Use this API to update the scheduled start time (hour and minute) when a discovery re-runs each day or set whether that scheduled discovery is enabled. If the server is in the quiesce state before a backup, the API returns the HTTP status code 503 (SERVICE UNAVAILABLE). If the discovery is updated successfully, the API returns the HTTP status code 200 (OK).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the discovery.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"start\": \"minim consectetur\",\n \"description\": \"deserunt\",\n \"id\": \"ullamco nulla ad\",\n \"level\": \"DataCopies\",\n \"name\": \"commodo nisi Duis dolore consequat\",\n \"schedule\": {\n  \"enabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startHour\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startMinute\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"taskId\": \"tempor reprehenderit\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Server in quiesce state prior to a backup.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/discoveries/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"discoveries",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all discoveries.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/discoveries?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"discoveries"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves a paginated list of discoveries. You can specify the page number and the page size by using **page** and **pageSize** query parameters respectively. By default, a list of all discovery objects is returned. This API also supports a **filter** query parameter that returns discovery objects that match a specified set of conditions. This API supports an **orderby** query parameter to specify how the returned list of discovery objects is sorted. When successful, the API returns the HTTP status code 200 (OK).\n\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully returned known discoveries.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Request a discovery.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/discoveries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"discoveries"
									]
								},
								"description": "Runs a discovery that is identified by a specified **start** value. If the discovery that is identified by the specified **start** value is already running, the API returns an error with HTTP status code 409 (CONFLICT). If the discovery starts successfully, the API returns the HTTP status code 202 (ACCEPTED).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully accepted the discovery request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"start\": \"minim consectetur\",\n \"description\": \"deserunt\",\n \"id\": \"ullamco nulla ad\",\n \"level\": \"DataCopies\",\n \"name\": \"commodo nisi Duis dolore consequat\",\n \"schedule\": {\n  \"enabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startHour\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startMinute\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"taskId\": \"tempor reprehenderit\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "A similar discovery request is currently processing.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start\": \"minim consectetur\",\n    \"description\": \"deserunt\",\n    \"id\": \"ullamco nulla ad\",\n    \"level\": \"DataCopies\",\n    \"name\": \"commodo nisi Duis dolore consequat\",\n    \"schedule\": {\n        \"enabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startHour\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startMinute\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"taskId\": \"tempor reprehenderit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/discoveries",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"discoveries"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "disks",
					"item": [
						{
							"name": "Get all disks in the appliance.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/disks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"disks"
									]
								},
								"description": "Retrieves all disks in the appliance.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned the available disks successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get disk by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/disks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"disks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) Disk ID."
										}
									]
								},
								"description": "Retrieves a disk by ID.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Found and returned the disk with the specified ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"availableSize\": -5657476,\n \"id\": \"id ea adipisicing\",\n \"name\": \"Lorem qui sit\",\n \"nodeId\": \"qui amet\",\n \"partitions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"totalSize\": -94224917\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Cannot find a disk with the specified ID.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/disks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "dynamic-filters",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete dynamic filter by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the dynamic filter."
												}
											]
										},
										"description": "Deletes dynamic filter by specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the dynamic filter.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a dynamic filter by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the dynamic filter."
												}
											]
										},
										"description": "Retrieves a dynamic filter by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the dynamic filter.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"sed\",\n \"action\": \"NOT_SUPPORTED\",\n \"actionResult\": \"nisi culpa incididunt\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"OR\",\n \"inventorySourceType\": \"MICROSOFT_EXCHANGE_DATABASE\",\n \"priority\": -12989852,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assignedAssetsCount\": 89948701,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"in non consectetur\",\n \"displayDescription\": \"veniam tempor laboris\",\n \"id\": \"commodo labore dolore laboris\",\n \"lastRunAt\": \"2017-01-21T11:49:22.502Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The requested dynamic filter does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update dynamic filter by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the dynamic filter."
												}
											]
										},
										"description": "Update dynamic filter by ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the dynamic filter.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"sed\",\n \"action\": \"NOT_SUPPORTED\",\n \"actionResult\": \"nisi culpa incididunt\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"OR\",\n \"inventorySourceType\": \"MICROSOFT_EXCHANGE_DATABASE\",\n \"priority\": -12989852,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assignedAssetsCount\": 89948701,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"in non consectetur\",\n \"displayDescription\": \"veniam tempor laboris\",\n \"id\": \"commodo labore dolore laboris\",\n \"lastRunAt\": \"2017-01-21T11:49:22.502Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/dynamic-filters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dynamic-filters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all dynamic filters.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all dynamic filters\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available dynamic filters.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a dynamic filter.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"mollit voluptate fugiat\",\n    \"action\": \"MOVE_TO_GROUP\",\n    \"actionResult\": \"deserunt\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"MICROSOFT_EXCHANGE_DATABASE\",\n    \"priority\": -80750186,\n    \"assignedAssetsCount\": -49597298,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"AND\",\n    \"description\": \"elit\",\n    \"displayDescription\": \"velit nisi esse\",\n    \"id\": \"dolore in\",\n    \"lastRunAt\": \"2008-04-16T21:39:14.510Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters"
									]
								},
								"description": "Create a dynamic filter.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successful operation. ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"sed\",\n \"action\": \"NOT_SUPPORTED\",\n \"actionResult\": \"nisi culpa incididunt\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"OR\",\n \"inventorySourceType\": \"MICROSOFT_EXCHANGE_DATABASE\",\n \"priority\": -12989852,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assignedAssetsCount\": 89948701,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"in non consectetur\",\n \"displayDescription\": \"veniam tempor laboris\",\n \"id\": \"commodo labore dolore laboris\",\n \"lastRunAt\": \"2017-01-21T11:49:22.502Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Successfully created the dynamic filter.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"sed\",\n \"action\": \"NOT_SUPPORTED\",\n \"actionResult\": \"nisi culpa incididunt\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"OR\",\n \"inventorySourceType\": \"MICROSOFT_EXCHANGE_DATABASE\",\n \"priority\": -12989852,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"assignedAssetsCount\": 89948701,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"in non consectetur\",\n \"displayDescription\": \"veniam tempor laboris\",\n \"id\": \"commodo labore dolore laboris\",\n \"lastRunAt\": \"2017-01-21T11:49:22.502Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/dynamic-filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-filters"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "eulas",
					"item": [
						{
							"name": "PPDM",
							"item": [
								{
									"name": "Get PowerProtect Data Manager EULA.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"eulas",
												"PPDM"
											]
										},
										"description": "Retrieves the current PowerProtect Data Manager end user license agreement (EULA).\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the PowerProtect Data Manager EULA.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"accepted\": false,\n \"acceptedTime\": \"eiusmod et e\",\n \"link\": \"nisi tempor Duis amet\"\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Accept PowerProtect Data Manager EULA.",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accepted\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"eulas",
												"PPDM"
											]
										},
										"description": "Accepts PowerProtect Data Manager end user license agreement (EULA).\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the PowerProtect Data Manager EULA.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"accepted\": false,\n \"acceptedTime\": \"eiusmod et e\",\n \"link\": \"nisi tempor Duis amet\"\n}"
										},
										{
											"name": "The submitted settings payload has a syntax error.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Required fields are missing in the request payload.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"PPDM"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "TELEMETRY",
							"item": [
								{
									"name": "Get telemetry EULA.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"eulas",
												"TELEMETRY"
											]
										},
										"description": "Retrieves the current telemetry end user license agreement (EULA).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Found and returned the telemetry EULA.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"accepted\": true,\n \"acceptedTime\": \"ut tempor\",\n \"link\": \"mollit dolor nisi sed\"\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Accept telemetry EULA.",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accepted\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"eulas",
												"TELEMETRY"
											]
										},
										"description": "Accepts telemetry end user license agreement (EULA).\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the telemetry EULA.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"accepted\": true,\n \"acceptedTime\": \"ut tempor\",\n \"link\": \"mollit dolor nisi sed\"\n}"
										},
										{
											"name": "The submitted settings payload has a syntax error.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Required fields are missing in the request payload.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The service is unavailable.",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/eulas/TELEMETRY",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"eulas",
														"TELEMETRY"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "exported-copies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete an exported copy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of exported copy."
												}
											]
										},
										"description": "Deletes an exported copy by parameter ID. This API request defines which copy is already mounted.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully initiated deletion of the exported copy.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"taskId\": \"esse sunt\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get an exported copy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of copy."
												}
											]
										},
										"description": "Retrieves an exported copy by parameter ID. This API request defines which copy is already mounted. Exported copies are deleted after use.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the exported copies.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"description\": \"ei\",\n \"exportType\": \"RESTORED_COPIES\",\n \"assetId\": \"ullamco magna\",\n \"copyId\": \"officia amet\",\n \"completionTime\": \"2017-04-10T17:42:34.845Z\",\n \"expirationTime\": \"1953-11-06T19:59:42.879Z\",\n \"exportedCopiesDetails\": {\n  \"targetExportedStorageInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetExportedVmInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt ipsum ad voluptate eiusmod\",\n \"startTime\": \"1945-05-03T00:29:54.786Z\",\n \"state\": \"RUNNING\",\n \"storageSystem\": \"ad id et\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested exported copies do not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/exported-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"exported-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all exported copies.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"exported-copies"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all the exported copies. This API request defines which copy is already mounted. Exported copies are deleted after use.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully returned available exported copy resources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/exported-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"exported-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "external-notifications",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete an external notification by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the external notification resource."
												}
											]
										},
										"description": "Deletes an existing notification configuration by UUID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned with no content.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get an external notification by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the external notification resource."
												}
											]
										},
										"description": "Retrieves an external notification by UUID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the event.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"est officia non nostrud\",\n \"emails\": [\n  \"minim culpa esse\",\n  \"adipisicing ex aliquip\"\n ],\n \"id\": \"consequat labore\",\n \"categoryList\": [\n  \"nisi eu irure voluptate\",\n  \"eu voluptate culpa\"\n ],\n \"disabled\": true,\n \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n \"messageIdList\": [\n  \"laborum tempor incididunt elit\",\n  \"proident exercitation aliquip id\"\n ],\n \"notificationWindow\": 31272922,\n \"severityList\": [\n  \"sint incididunt sed non eu\",\n  \"tempor do\"\n ],\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"subjectOverride\": \"minim dolo\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update external notification by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the external notification resource."
												}
											]
										},
										"description": "Updates an external notification by UUID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Resource updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"est officia non nostrud\",\n \"emails\": [\n  \"minim culpa esse\",\n  \"adipisicing ex aliquip\"\n ],\n \"id\": \"consequat labore\",\n \"categoryList\": [\n  \"nisi eu irure voluptate\",\n  \"eu voluptate culpa\"\n ],\n \"disabled\": true,\n \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n \"messageIdList\": [\n  \"laborum tempor incididunt elit\",\n  \"proident exercitation aliquip id\"\n ],\n \"notificationWindow\": 31272922,\n \"severityList\": [\n  \"sint incididunt sed non eu\",\n  \"tempor do\"\n ],\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"subjectOverride\": \"minim dolo\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authenticated to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requested resource is not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevented the completion of the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/external-notifications/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"external-notifications",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all configured external notifications.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"external-notifications"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do",
											"description": "Token string to use to retrieve the next page of a result. The initial search request with queryState must be queryState=BEGIN and a pageSize. After a search begins, subsequent responses include a token string to pass as a parameter for the next page retrieval. When the query state in the response that is returned from the previous search is END, no further results can be retrieved from this query. More details see Tutorials - Page the List Result."
										}
									]
								},
								"description": "Retrieves all configured external notifications.\n> This endpoint supports execution by the following roles: admin\n\n> This endpoint supports pagination with types: random,serial\n"
							},
							"response": [
								{
									"name": "Successfully returned available external notification.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "queryState",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create external notification.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"consequat voluptate officia ad\",\n    \"emails\": [\n        \"in adipisicing anim\",\n        \"dolor\"\n    ],\n    \"id\": \"nisi off\",\n    \"categoryList\": [\n        \"ut voluptate\",\n        \"ut ipsum ad\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1953-05-04T21:16:21.325Z\",\n    \"lastNotificationTime\": \"1986-01-11T07:44:05.485Z\",\n    \"messageIdList\": [\n        \"ea\",\n        \"proident nostrud cupidatat\"\n    ],\n    \"notificationWindow\": -48812786,\n    \"severityList\": [\n        \"aute ex dolo\",\n        \"magna\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"proident magna nisi minim\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/external-notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"external-notifications"
									]
								},
								"description": "Create a new notification configuration.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Resource created.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"est officia non nostrud\",\n \"emails\": [\n  \"minim culpa esse\",\n  \"adipisicing ex aliquip\"\n ],\n \"id\": \"consequat labore\",\n \"categoryList\": [\n  \"nisi eu irure voluptate\",\n  \"eu voluptate culpa\"\n ],\n \"disabled\": true,\n \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n \"messageIdList\": [\n  \"laborum tempor incididunt elit\",\n  \"proident exercitation aliquip id\"\n ],\n \"notificationWindow\": 31272922,\n \"severityList\": [\n  \"sint incididunt sed non eu\",\n  \"tempor do\"\n ],\n \"source\": {\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"subjectOverride\": \"minim dolo\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authenticated to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Any server error that prevented the completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"est officia non nostrud\",\n    \"emails\": [\n        \"minim culpa esse\",\n        \"adipisicing ex aliquip\"\n    ],\n    \"id\": \"consequat labore\",\n    \"categoryList\": [\n        \"nisi eu irure voluptate\",\n        \"eu voluptate culpa\"\n    ],\n    \"disabled\": true,\n    \"lastAlertMatchTime\": \"1972-08-11T03:00:21.442Z\",\n    \"lastNotificationTime\": \"1985-09-26T04:24:07.356Z\",\n    \"messageIdList\": [\n        \"laborum tempor incididunt elit\",\n        \"proident exercitation aliquip id\"\n    ],\n    \"notificationWindow\": 31272922,\n    \"severityList\": [\n        \"sint incididunt sed non eu\",\n        \"tempor do\"\n    ],\n    \"source\": {\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"subjectOverride\": \"minim dolo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/external-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"external-notifications"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "flr-sessions",
					"item": [
						{
							"name": "{flr Session Id}",
							"item": [
								{
									"name": "Delete the specified FLR session.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions",
												":flrSessionId"
											],
											"variable": [
												{
													"key": "flrSessionId",
													"value": "incididunt in consequat do",
													"description": "(Required) Restored files ID."
												}
											]
										},
										"description": "Unmounts the disks from the target VM and deletes the FLR session resource. A prerequisite is that an flrSessionId be created by creating a new FLR session (POST /api/v2/flr-sessions).  The usual workflow is to browse the directories after creating the session, and collect a list (on the client side) of the file paths to be restored.\n\nThe final step of the restore files API is to automatically delete the FLR session. Calling this API after the restore files API is called is not necessary.\n\nDeleting the FLR session is typically the last (cleanup) step of the workflow, which will release the resources allocated to maintain the FLR browse session.\n\nUnmounting the disks from the target VM is an asynchronous operation. The response from this API contains a PowerProtect Data Manager task API reference. The task API can be called to determine the progress of this operation.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Unmounted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"flrSessionId\": \"aute velit reprehenderit\",\n \"taskId\": \"in nisi\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get FLR session state.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions",
												":flrSessionId"
											],
											"variable": [
												{
													"key": "flrSessionId",
													"value": "incididunt in consequat do",
													"description": "(Required) Restored files ID."
												}
											]
										},
										"description": "Returns the current settings (the UpdateBrowseRequest) for the specified FLR Session ID.\n\nA prerequisite is that an flrSessionId be created by creating a new FLR session (POST /api/v2/flr-sessions). The usual workflow is to browse the directories after creating the session, and collect a list (on the client side) of the file paths to be restored (and browsing would be done, in part, by this API).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Get browse session.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"browseDest\": false,\n \"directory\": \"ea do\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Modify FLR session.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions",
												":flrSessionId"
											],
											"variable": [
												{
													"key": "flrSessionId",
													"value": "incididunt in consequat do",
													"description": "(Required) Restored files ID."
												}
											]
										},
										"description": "Changes the directories on the target or in the backup for the specified FLR session ID.\n\nA prerequisite is that an flrSessionId be created by creating a new FLR session (POST /api/v2/flr-sessions).  The usual workflow is to browse the directories after creating the session (where changing directories is part of the browsing, and would be achieved by calling this API).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "The response includes two fields: A flag indicating whether the copy or the destination VM is being browsed and the name directory currently being browsed.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"browseDest\": false,\n \"directory\": \"ea do\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The request could not be completed due to a conflict with the current state of the target resource.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"browseDest\": false,\n    \"directory\": \"ea do\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get directory file list.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions",
												":flrSessionId",
												"files"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "pageSize",
													"value": "100",
													"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do",
													"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do",
													"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
												}
											],
											"variable": [
												{
													"key": "flrSessionId",
													"value": "incididunt in consequat do",
													"description": "(Required) Restored files ID."
												}
											]
										},
										"description": "Retrieves the directory file list for the specified FLR session ID. The file list can be filtered based on the optional filter and paging query parameters.\n\nA prerequisite is that an flrSessionId be created by creating a new FLR session (POST /api/v2/flr-sessions). The usual workflow is to browse the directories after creating the session, and collect a list (on the client side) of the file paths to be restored.\n\nThis API call allows the caller to retrieve the file list corresponding to the current directory in the FLR browse session. Finally, the caller calls the flr-sessions/{flrSessionId}/tasks API with the desired file list to restore those files on the target VM. The FLR session is automatically closed down when the restore task API is called. Otherwise, the session is be terminated by calling the DELETE API.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "The response is a list of files formatted by the filter and page information specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The request could not be completed because of a conflict with the current state of the target resource.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/files?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"files"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Restore files picked during the browse.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filePaths\": [\n        \"aute d\",\n        \"ipsum in\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"in sit aute ad\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions",
												":flrSessionId",
												"tasks"
											],
											"variable": [
												{
													"key": "flrSessionId",
													"value": "incididunt in consequat do",
													"description": "(Required) Restored files ID."
												}
											]
										},
										"description": "Restores the files specified in the request body. Once the files are restored, the FLR session is deleted. It is not necessary to call the DELETE API after calling this API.\n\nA prerequisite is that an flrSessionId be created by creating a new FLR session (POST /api/v2/flr-sessions).  The usual workflow is to then browse the directories after creating the session, and collect a list (on the client side) of the file paths to be restored, and then call this API to restore the files.\n\nRestoring the files is an asynchronous operation. The response from this API contains a PowerProtect Data Manager task ID and API reference. The task API can be called to determine the progress of this operation.\n\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "FLR initiated.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"taskId\": \"commodo Lorem elit incididunt\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filePaths\": [\n        \"consequat cillum laborum\",\n        \"deserunt officia mollit sint\"\n    ],\n    \"overwriteExisting\": true,\n    \"restoreToOriginalPath\": false,\n    \"targetDirectory\": \"fugiat laboris consectetur sit adipisicing\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/flr-sessions/:flrSessionId/tasks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"flr-sessions",
														":flrSessionId",
														"tasks"
													],
													"variable": [
														{
															"key": "flrSessionId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Create a new FLR Session.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions"
									]
								},
								"description": "Establishes a File-Level-Restore (FLR) session. An FLR session is used to restore individual files or directories as opposed to performing an Image-Level-Restore (that is, restoring entire VMs).\n\nCalling this API mounts the disks of a copy to a target VM. The ID of the copy and the ID of the target VM are acquired by browsing the PowerProtect Data Manager inventory. The mount operation will make the files present on the mounted disk available for selection to be restored. Once the disks are mounted onto the target VM, the disk file system (or systems) may be browsed directory-by-directory. The caller may select files within each directory to be restored.\n\nThe mounting of the disk from the copy is an asynchronous operation, so the response from this API contains a PowerProtect Data Manager task ID and a hyperlink. The task API can be called to monitor the progress of of the operation.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "FLR session create task started.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"flrSessionId\": \"aute velit reprehenderit\",\n \"taskId\": \"in nisi\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The request precondition failed.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"copyId\": \"nisi consequat culpa\",\n    \"targetVmAssetId\": \"est\",\n    \"removeAgent\": false,\n    \"targetPassword\": \"consequat veniam\",\n    \"targetUser\": \"e\",\n    \"timeout\": \"300\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/flr-sessions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"flr-sessions"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "hosts",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a host by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the host."
												}
											]
										},
										"description": "Retrieves **Hosts** like PRIMARY, GROUP, APP_HOST, ESX_HOST, ESX_CLUSTER, MSSQL, ORACLE, Filesystem by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the host.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"addresses\": {\n  \"ipv4\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipv6\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"wwpn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"cluster\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"appHost\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"esxCluster\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"esxHost\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"hostname\": \"aliquip labore\",\n \"id\": \"ut ea eiusmod dolor dolore\",\n \"includedInDiscovery\": true,\n \"inventorySourceId\": \"et tempor\",\n \"lastDiscovered\": \"culpa sit\",\n \"lastDiscoveryAt\": \"1991-11-26T15:44:09.399Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryStatus\": \"ut occaeca\",\n \"lastDiscoveryTaskId\": \"enim minim et Duis\",\n \"lastUpdated\": \"minim irure\",\n \"name\": \"nostrud ex\",\n \"type\": \"GROUP\"\n}"
										},
										{
											"name": "The requested host does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update host credential and TNS values by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the host."
												}
											]
										},
										"description": "Update credentail and TNS for host by ID.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the host.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"addresses\": {\n  \"ipv4\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipv6\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"wwpn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"cluster\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"appHost\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"esxCluster\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"esxHost\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"hostname\": \"aliquip labore\",\n \"id\": \"ut ea eiusmod dolor dolore\",\n \"includedInDiscovery\": true,\n \"inventorySourceId\": \"et tempor\",\n \"lastDiscovered\": \"culpa sit\",\n \"lastDiscoveryAt\": \"1991-11-26T15:44:09.399Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryStatus\": \"ut occaeca\",\n \"lastDiscoveryTaskId\": \"enim minim et Duis\",\n \"lastUpdated\": \"minim irure\",\n \"name\": \"nostrud ex\",\n \"type\": \"GROUP\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addresses\": {\n        \"ipv4\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipv6\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"wwpn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"cluster\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"appHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxCluster\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"esxHost\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"hostname\": \"sint nul\",\n    \"id\": \"Ex\",\n    \"includedInDiscovery\": false,\n    \"inventorySourceId\": \"in veniam\",\n    \"lastDiscovered\": \"nulla dolor\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"i\",\n    \"lastUpdated\": \"anim in veniam\",\n    \"name\": \"nulla\",\n    \"type\": \"ESX_CLUSTER\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/hosts/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"hosts",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all hosts.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all **Hosts** including PRIMARY, GROUP, APP_HOST, ESX_HOST, ESX_CLUSTER, MSSQL, ORACLE, and Filesystem.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available host.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/hosts?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"hosts"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "identity-sources",
					"item": [
						{
							"name": "{Id Source Id}",
							"item": [
								{
									"name": "groups",
									"item": [
										{
											"name": "Get groups belonging to the identity source.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId",
														"groups"
													],
													"query": [
														{
															"key": "filter",
															"value": "incididunt in consequat do",
															"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
														}
													],
													"variable": [
														{
															"key": "IdSourceId",
															"value": "incididunt in consequat do",
															"description": "(Required) Identity source ID."
														}
													]
												},
												"description": "Retrieves the groups belonging to the identity source. These groups can be mapped to roles to provide access to the system and perform operations.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully retrieved all identity source group names.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
												},
												{
													"name": "The request body is either invalid or is missing the required fields.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The authorization token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The user does not have the proper privileges to perform the action.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "An internal server error occurred. Please contact the system administrator.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups?filter=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "IdSourceId"
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Get users belonging to an identity source group.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId",
														"groups",
														":groupName",
														"users"
													],
													"variable": [
														{
															"key": "IdSourceId",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the identity source."
														},
														{
															"key": "groupName",
															"value": "incididunt in consequat do",
															"description": "(Required) The group name of the identity source."
														}
													]
												},
												"description": "Retrieves the users belonging to an identity source group. This information helps administrators know which users are in each group. The information is useful when creating group-to-role mappings.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully retrieved the usernames within the specified identity source group.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
												},
												{
													"name": "The request body is either invalid or is missing the required fields.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The authorization token is either invalid or expired.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The user does not have the proper privileges to perform the action.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "An internal server error occurred. Please contact the system administrator.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId/groups/:groupName/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"identity-sources",
																":IdSourceId",
																"groups",
																":groupName",
																"users"
															],
															"variable": [
																{
																	"key": "IdSourceId"
																},
																{
																	"key": "groupName"
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Delete an identity source.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources",
												":IdSourceId"
											],
											"variable": [
												{
													"key": "IdSourceId",
													"value": "incididunt in consequat do",
													"description": "(Required) Identity source ID."
												}
											]
										},
										"description": "Deletes an identity source by ID. When the identity source is deleted, if any groups are mapped to roles, the users in those groups are no longer able to access the system or perform any operations.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the identity source.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get an identity source by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources",
												":IdSourceId"
											],
											"variable": [
												{
													"key": "IdSourceId",
													"value": "incididunt in consequat do",
													"description": "(Required) Identity source ID."
												}
											]
										},
										"description": "Retrieves an identity source by ID. When the identity source is retrieved, groups can be mapped to roles to provide access to the system and perform operations.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved the specified identity source.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"base\": \"officia non nisi ut\",\n \"configPassword\": \"officia eu in\",\n \"configUser\": \"nisi irure Ut nulla\",\n \"createdDate\": \"1945-12-04T09:22:57.884Z\",\n \"description\": \"ut labore\",\n \"groupMemberAttribute\": \"sunt\",\n \"groupNameAttribute\": \"exercitation tempor amet sint in\",\n \"groupObjectTypeName\": \"aliqua Lorem\",\n \"groupSearchPath\": \"qui velit\",\n \"id\": \"dolor Excepteur\",\n \"port\": \"consequat est in enim\",\n \"serverAddress\": \"enim exercitation\",\n \"serverType\": \"ad\",\n \"userIdAttribute\": \"qui aliqua enim\",\n \"userObjectTypeName\": \"adipisicing veniam in ipsum anim\",\n \"userSearchPath\": \"in minim\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The identity source was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update an identity source.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"base\": \"officia non nisi ut\",\n    \"configPassword\": \"officia eu in\",\n    \"configUser\": \"nisi irure Ut nulla\",\n    \"createdDate\": \"1945-12-04T09:22:57.884Z\",\n    \"description\": \"ut labore\",\n    \"groupMemberAttribute\": \"sunt\",\n    \"groupNameAttribute\": \"exercitation tempor amet sint in\",\n    \"groupObjectTypeName\": \"aliqua Lorem\",\n    \"groupSearchPath\": \"qui velit\",\n    \"id\": \"dolor Excepteur\",\n    \"port\": \"consequat est in enim\",\n    \"serverAddress\": \"enim exercitation\",\n    \"serverType\": \"ad\",\n    \"userIdAttribute\": \"qui aliqua enim\",\n    \"userObjectTypeName\": \"adipisicing veniam in ipsum anim\",\n    \"userSearchPath\": \"in minim\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources",
												":IdSourceId"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false",
													"description": "Checks the connection of the identity source with the provided credentials."
												}
											],
											"variable": [
												{
													"key": "IdSourceId",
													"value": "incididunt in consequat do",
													"description": "(Required) Identity source ID."
												}
											]
										},
										"description": "Updates an identity source by ID. When updated, the identity source uses the new information to access the LDAP or Windows Active Directory, including the retrieval of groups.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the identity source.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"base\": \"officia non nisi ut\",\n \"configPassword\": \"officia eu in\",\n \"configUser\": \"nisi irure Ut nulla\",\n \"createdDate\": \"1945-12-04T09:22:57.884Z\",\n \"description\": \"ut labore\",\n \"groupMemberAttribute\": \"sunt\",\n \"groupNameAttribute\": \"exercitation tempor amet sint in\",\n \"groupObjectTypeName\": \"aliqua Lorem\",\n \"groupSearchPath\": \"qui velit\",\n \"id\": \"dolor Excepteur\",\n \"port\": \"consequat est in enim\",\n \"serverAddress\": \"enim exercitation\",\n \"serverType\": \"ad\",\n \"userIdAttribute\": \"qui aliqua enim\",\n \"userObjectTypeName\": \"adipisicing veniam in ipsum anim\",\n \"userSearchPath\": \"in minim\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The identity source was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict. The system may already have an identity source.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Connection to the identity source timed out.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/identity-sources/:IdSourceId?validateOnly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"identity-sources",
														":IdSourceId"
													],
													"query": [
														{
															"key": "validateOnly",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "IdSourceId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all identity sources.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/identity-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"identity-sources"
									]
								},
								"description": "Retrieves all identity sources. When filtering with createdDate, if the value contains a plus sign (+), replace it with %2B. Not replacing the plus sign can cause an unexpected response.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the list of identity sources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token (access token) is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create an identity source.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"base\": \"officia non nisi ut\",\n    \"configPassword\": \"officia eu in\",\n    \"configUser\": \"nisi irure Ut nulla\",\n    \"createdDate\": \"1945-12-04T09:22:57.884Z\",\n    \"description\": \"ut labore\",\n    \"groupMemberAttribute\": \"sunt\",\n    \"groupNameAttribute\": \"exercitation tempor amet sint in\",\n    \"groupObjectTypeName\": \"aliqua Lorem\",\n    \"groupSearchPath\": \"qui velit\",\n    \"id\": \"dolor Excepteur\",\n    \"port\": \"consequat est in enim\",\n    \"serverAddress\": \"enim exercitation\",\n    \"serverType\": \"ad\",\n    \"userIdAttribute\": \"qui aliqua enim\",\n    \"userObjectTypeName\": \"adipisicing veniam in ipsum anim\",\n    \"userSearchPath\": \"in minim\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"identity-sources"
									],
									"query": [
										{
											"key": "validateOnly",
											"value": "false",
											"description": "Checks the connection of the identity source with the provided credentials."
										}
									]
								},
								"description": "Creates an identity source. The identity source provides login credentials for LDAP or Windows Active Directory users, after mapping groups to roles.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successfully created the identity source.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"base\": \"officia non nisi ut\",\n \"configPassword\": \"officia eu in\",\n \"configUser\": \"nisi irure Ut nulla\",\n \"createdDate\": \"1945-12-04T09:22:57.884Z\",\n \"description\": \"ut labore\",\n \"groupMemberAttribute\": \"sunt\",\n \"groupNameAttribute\": \"exercitation tempor amet sint in\",\n \"groupObjectTypeName\": \"aliqua Lorem\",\n \"groupSearchPath\": \"qui velit\",\n \"id\": \"dolor Excepteur\",\n \"port\": \"consequat est in enim\",\n \"serverAddress\": \"enim exercitation\",\n \"serverType\": \"ad\",\n \"userIdAttribute\": \"qui aliqua enim\",\n \"userObjectTypeName\": \"adipisicing veniam in ipsum anim\",\n \"userSearchPath\": \"in minim\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token (access token) is either invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Conflict.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Connection to the identity source timed out.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/identity-sources?validateOnly=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"identity-sources"
											],
											"query": [
												{
													"key": "validateOnly",
													"value": "false"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "inventory-sources",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete an inventory source by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
												"key": "Prefer",
												"value": "respond-async"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The inventory source ID."
												}
											]
										},
										"description": "Deletes an inventory source by the specified ID.\nThese inventory source types are supported: VCENTER, KUBERNETES, DATADOMAINMANAGEMENTCENTER, EXTERNALDATADOMAIN, POWERPROTECTSYSTEM\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "When request with header \"Prefer: respond-async\", the delete inventory source action runs as an asynchronous operation. The response contains the tracking 'activityId'.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"activityId\": \"et esse\"\n}"
										},
										{
											"name": "Successfully deleted the inventory source.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "With header \"Prefer: respond-async\", returns HTTP status 202 with 'activityId' in response body.",
														"key": "Prefer",
														"value": "respond-async"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get an inventory source by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The inventory source ID."
												}
											]
										},
										"description": "Retrieves an inventory source by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned requested inventory source.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"velit magna sit\",\n \"type\": \"UNITYMANAGEMENTSERVER\",\n \"address\": \"laborum et\",\n \"_embedded\": {\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"customAppGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"customStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"model\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nas\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ppdm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vCenter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalTenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sit voluptate\",\n \"lastDiscovered\": \"2006-03-13T06:42:16.081Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryTaskId\": \"officia incididunt\",\n \"local\": false,\n \"port\": 82071794,\n \"vendor\": \"SAP\",\n \"version\": \"dolor\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested inventory source does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update an inventory source by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The inventory source ID."
												}
											]
										},
										"description": "Updates an inventory source by ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the inventory source.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"velit magna sit\",\n \"type\": \"UNITYMANAGEMENTSERVER\",\n \"address\": \"laborum et\",\n \"_embedded\": {\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"customAppGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"customStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"model\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nas\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ppdm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vCenter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalTenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sit voluptate\",\n \"lastDiscovered\": \"2006-03-13T06:42:16.081Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryTaskId\": \"officia incididunt\",\n \"local\": false,\n \"port\": 82071794,\n \"vendor\": \"SAP\",\n \"version\": \"dolor\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get all storage systems associated to the inventory source.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources/:id/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources",
												":id",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "pageSize",
													"value": "100",
													"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do",
													"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do",
													"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The inventory source ID."
												}
											]
										},
										"description": "Retrieves all storage systems associated to the inventory source.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
									},
									"response": [
										{
											"name": "Successfully returned available storage systems.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id",
														"storage-systems"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"_embedded\": {\n  \"inventorySource\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"capacityUtilization\": -70205296.64504015,\n \"createdAt\": \"2020-10-04T08:16:01.952Z\",\n \"ddLocationId\": \"in eiusmod amet nisi\",\n \"details\": {\n  \"dataDomain\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"recoverPoint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmax\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"xio\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"enim dolore nisi\",\n \"lastDiscovered\": \"1994-09-29T04:28:22.687Z\",\n \"lastDiscoveryAt\": \"1982-11-24T07:47:45.348Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryStatus\": \"DELETED\",\n \"lastDiscoveryTaskId\": \"qui et ex Ut\",\n \"local\": false,\n \"locationId\": \"sed tempor\",\n \"name\": \"incididunt quis proid\",\n \"operatingSystem\": {\n  \"name\": \"laborum minim\",\n  \"version\": \"sint irure minim\"\n },\n \"type\": \"XTREMIO_STORAGE_SYSTEM\",\n \"updatedAt\": \"1957-06-09T09:34:55.082Z\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id",
														"storage-systems"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id",
														"storage-systems"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/inventory-sources/:id/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"inventory-sources",
														":id",
														"storage-systems"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "pageSize",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do"
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all inventory sources.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all inventory sources in the PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully returned available inventory sources.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create an inventory source.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									]
								},
								"description": "Creates an inventory source.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"velit magna sit\",\n \"type\": \"UNITYMANAGEMENTSERVER\",\n \"address\": \"laborum et\",\n \"_embedded\": {\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"customAppGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"customStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"model\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nas\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ppdm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vCenter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalTenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sit voluptate\",\n \"lastDiscovered\": \"2006-03-13T06:42:16.081Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryTaskId\": \"officia incididunt\",\n \"local\": false,\n \"port\": 82071794,\n \"vendor\": \"SAP\",\n \"version\": \"dolor\"\n}"
								},
								{
									"name": "Successfully created the inventory source.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"velit magna sit\",\n \"type\": \"UNITYMANAGEMENTSERVER\",\n \"address\": \"laborum et\",\n \"_embedded\": {\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"details\": {\n  \"customAppGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"customStorageGroup\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"k8s\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"model\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nas\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ppdm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vCenter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"externalTenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sit voluptate\",\n \"lastDiscovered\": \"2006-03-13T06:42:16.081Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryTaskId\": \"officia incididunt\",\n \"local\": false,\n \"port\": 82071794,\n \"vendor\": \"SAP\",\n \"version\": \"dolor\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laboris do exercitation ipsum\",\n    \"type\": \"KUBERNETES\",\n    \"address\": \"nisi minim\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"details\": {\n        \"customAppGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"customStorageGroup\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"k8s\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"model\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nas\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ppdm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vCenter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"externalTenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"in veniam nisi dolor quis\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"local\": true,\n    \"port\": 82675467,\n    \"vendor\": \"ORACLE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/inventory-sources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"inventory-sources"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "kubernetes-clusters",
					"item": [
						{
							"name": "Get Kubernetes clusters.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"kubernetes-clusters"
									]
								},
								"description": "Retrieves the list of Kubernetes clusters."
							},
							"response": [
								{
									"name": "Retrieving list of Kubernetes clusters.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Service unavailable.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get storage classes from target Kubernetes cluster.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"kubernetes-clusters",
										":cluster-id",
										"pvc-storage-class-mappings"
									],
									"query": [
										{
											"key": "copyId",
											"value": "incididunt in consequat do",
											"description": "(Required) The ID of the copy to be restored."
										}
									],
									"variable": [
										{
											"key": "cluster-id",
											"value": "incididunt in consequat do",
											"description": "(Required) The ID of the Kubernetes cluster."
										}
									]
								},
								"description": "When an alternate storage class is required for restoring to an alternate cluster, this request retrieves a list of compatible storage classes per PersistentVolumeClaim (PVC) from the specified Kubernetes cluster."
							},
							"response": [
								{
									"name": "Successfully retrieved list of compatible storage classes.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Required string parameter copyId is not present.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Service unavailable.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/kubernetes-clusters/:cluster-id/pvc-storage-class-mappings?copyId=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"kubernetes-clusters",
												":cluster-id",
												"pvc-storage-class-mappings"
											],
											"query": [
												{
													"key": "copyId",
													"value": "incididunt in consequat do"
												}
											],
											"variable": [
												{
													"key": "cluster-id"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "licenses",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get license by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Unique identifier for license",
													"description": "(Required) License ID sent in request."
												}
											]
										},
										"description": "Retrieves the license associated with the specified ID.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the license with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"key\": \"dolore \",\n \"activationDate\": \"proident labore laboris irure\",\n \"daysLeftForExpiry\": -89863795,\n \"id\": \"eu adipisicing\",\n \"licenseKeys\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"status\": \"VALID\",\n \"swid\": \"nisi\",\n \"type\": \"EMERGENCY\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find the license with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update the license that is associated with the specified ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Unique identifier for license",
													"description": "(Required) License ID sent in request."
												}
											]
										},
										"description": "Updates the license associated with the specified ID.\nA license xml file is passed in a key field in the REST API body.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The license update completed successfully.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"key\": \"dolore \",\n \"activationDate\": \"proident labore laboris irure\",\n \"daysLeftForExpiry\": -89863795,\n \"id\": \"eu adipisicing\",\n \"licenseKeys\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"status\": \"VALID\",\n \"swid\": \"nisi\",\n \"type\": \"EMERGENCY\"\n}"
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find license with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The submitted license is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"esse reprehenderit\""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/licenses/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"licenses",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all licenses.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/licenses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"licenses"
									]
								},
								"description": "Retrieves licenses that are available on the system.\nPowerProtect Data Manager licenses include status details such as capacity usage, license Type, license status.\nType can be CAPACITY, SOCKET, APPLIANCE.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned available licenses.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create new license.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"esse reprehenderit\""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/licenses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"licenses"
									]
								},
								"description": "Creates a new license.\nA license xml file is passed in a key field.\n\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "The license was validated successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"key\": \"nostrud irure ut tempor\",\n \"activationDate\": \"officia anim ad\",\n \"daysLeftForExpiry\": -82566205,\n \"id\": \"labore ullamco sint et\",\n \"licenseKeys\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"status\": \"VALID\",\n \"swid\": \"laborum\",\n \"type\": \"TRIAL\"\n}"
								},
								{
									"name": "The license was created successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"key\": \"dolore \",\n \"activationDate\": \"proident labore laboris irure\",\n \"daysLeftForExpiry\": -89863795,\n \"id\": \"eu adipisicing\",\n \"licenseKeys\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"status\": \"VALID\",\n \"swid\": \"nisi\",\n \"type\": \"EMERGENCY\"\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The submitted license is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"esse reprehenderit\""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/licenses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"licenses"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "locations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete location by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the location."
												}
											]
										},
										"description": "Deletes a **Location** from PowerProtect Data Manager. **Location** can be set to **Storage System**. For example, set location for Data Domain system.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the location.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a location by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the location."
												}
											]
										},
										"description": "Retrieves a **Location** by ID in PowerProtect Data Manager. **Location** can be set to **Storage System**. For example, set location for Data Domain system.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the location.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"et amet dolor\",\n \"lat\": \"nostrud ut tempor\",\n \"lon\": \"dolor sunt ullamco\",\n \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										{
											"name": "The requested location does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/locations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"locations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all locations.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"locations"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all **locations** in the PowerProtect Data Manager. **Location** can be set to **Storage System**. For example, set location for Data Domain system.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available locations.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a location.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"locations"
									]
								},
								"description": "Creates a **Location** in the PowerProtect Data Manager. **Location** can be set to **Storage System**. For example, set location for Data Domain system.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"et amet dolor\",\n \"lat\": \"nostrud ut tempor\",\n \"lon\": \"dolor sunt ullamco\",\n \"name\": \"Lorem commodo incididunt ut\"\n}"
								},
								{
									"name": "Successfully created the location.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"et amet dolor\",\n \"lat\": \"nostrud ut tempor\",\n \"lon\": \"dolor sunt ullamco\",\n \"name\": \"Lorem commodo incididunt ut\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"et amet dolor\",\n    \"lat\": \"nostrud ut tempor\",\n    \"lon\": \"dolor sunt ullamco\",\n    \"name\": \"Lorem commodo incididunt ut\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"locations"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "log-bundles",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Deletes a completed, cancelled, or failed log bundle. ",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) UUID for the log bundle."
												}
											]
										},
										"description": "Deletes a completed, cancelled, or failed log bundle.  A building log bundle cannot be deleted.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The log bundle was successfully set to a DELETING status and is purged later on.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"aute laborum mollit ad\"\n}"
										},
										{
											"name": "The requestor did not provide valid authentication credentials.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor does not have required permissions to access the resource.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If the log bundle with the given ID was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If the log bundle is currently in a BUILDING state.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Any server error that prevents completion of the request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get the log bundle with the specified ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) UUID for the log bundle."
												}
											]
										},
										"description": "Retrieves the log bundle with the specified ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved and returned the log bundle with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"bundleStartDate\": \"dolor in aliquip nisi\",\n \"logBundleFormula\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"createdDate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"duration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"includeAllLogCategories\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"includeAllLogSources\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logCategoryList\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logSourceList\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"filename\": \"ad \",\n \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n \"id\": \"dolore ut irure\",\n \"logBundleFiles\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"percentComplete\": -34125808,\n \"sizeOnDiskInBytes\": 89146449,\n \"sourceSystems\": [\n  \"ex consectetur labore\",\n  \"Excepteur sit\"\n ],\n \"status\": \"anim eu sed\"\n}"
										},
										{
											"name": "The requestor did not provide valid authentication credentials.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor does not have required permissions to access the resource.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No log bundle with that ID was found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Any server error that prevents completion of the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/log-bundles/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"log-bundles",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all existing log bundles in the system.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-bundles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-bundles"
									]
								},
								"description": "Retrieves all existing log bundles in the system. Supports filtering. The status case is ignored.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully retrieved and returned available log bundles.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The filter string was not parsable.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor did not provide valid authentication credentials.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor does not have required permissions to access the resource.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Any server error that prevents completion of the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a new log bundle.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bundleStartDate\": \"commodo ipsum\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"quis Lorem\",\n    \"generationEndDateTime\": \"2007-02-14T20:39:58.830Z\",\n    \"generationStartDateTime\": \"1962-09-23T18:23:11.577Z\",\n    \"id\": \"ut\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -52460322,\n    \"sizeOnDiskInBytes\": 90162384,\n    \"sourceSystems\": [\n        \"ad esse ipsum ut\",\n        \"in cillum qui\"\n    ],\n    \"status\": \"dolore commodo ex labore occaec\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-bundles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-bundles"
									]
								},
								"description": "Creates a new log bundle and returns the log bundle with its ID and a status of BUILDING.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "The log bundle was successfully posted and started.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"mollit Duis ut\"\n}"
								},
								{
									"name": "The submitted log bundle could not be parsed due to syntax errors.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor did not provide valid authentication credentials.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor does not have required permissions to access the resource.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Another log bundle is currently building.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Occurs if the log bundle contains anything other than the bundle start date and log bundle formula. Also occurs if the formula provided contains an ID and other fields, or other fields and an ID.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Any server error that prevents completion of the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"bundleStartDate\": \"dolor in aliquip nisi\",\n    \"logBundleFormula\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"createdDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"description\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"duration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogCategories\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"includeAllLogSources\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logCategoryList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logSourceList\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filename\": \"ad \",\n    \"generationEndDateTime\": \"1945-04-19T07:56:24.128Z\",\n    \"generationStartDateTime\": \"1964-01-11T12:11:09.691Z\",\n    \"id\": \"dolore ut irure\",\n    \"logBundleFiles\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"percentComplete\": -34125808,\n    \"sizeOnDiskInBytes\": 89146449,\n    \"sourceSystems\": [\n        \"ex consectetur labore\",\n        \"Excepteur sit\"\n    ],\n    \"status\": \"anim eu sed\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"log-bundles"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "networks",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete network by id.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) "
												}
											]
										},
										"description": "Need check whether VLAN used by any Asset, if yes, return error.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Delete network successfully and ip released.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Request is accepted, delete is on going, check result by GET and expect 404 for success, otherwise, check status, Changed means on going, failed for failed.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Need login.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Network used by some assets, can't be delete, remove assign first.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error when delete.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get network by id.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) "
												}
											]
										},
										"description": "Get the specific network by id.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Return network info.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"laborum u\",\n \"vlanId\": 3315,\n \"ips\": [\n  \"quis ipsum\",\n  \"enim id sit nisi\"\n ],\n \"netmask\": \"ut\",\n \"mtu\": 1500,\n \"type\": \"any\",\n \"gateway\": \"laboris mollit enim proident\",\n \"id\": \"amet dolor labore aliqua qui\",\n \"routes\": [\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"status\": \"init\",\n \"usages\": [\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										{
											"name": "Need login.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot retrieve the network.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update whole network.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) "
												}
											]
										},
										"description": "Update the specific network by id.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "No any changes need apply to all sub systems and would directly return success.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"laborum u\",\n \"vlanId\": 3315,\n \"ips\": [\n  \"quis ipsum\",\n  \"enim id sit nisi\"\n ],\n \"netmask\": \"ut\",\n \"mtu\": 1500,\n \"type\": \"any\",\n \"gateway\": \"laboris mollit enim proident\",\n \"id\": \"amet dolor labore aliqua qui\",\n \"routes\": [\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"status\": \"init\",\n \"usages\": [\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										{
											"name": "Request accepted and executing on going.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"laborum u\",\n \"vlanId\": 3315,\n \"ips\": [\n  \"quis ipsum\",\n  \"enim id sit nisi\"\n ],\n \"netmask\": \"ut\",\n \"mtu\": 1500,\n \"type\": \"any\",\n \"gateway\": \"laboris mollit enim proident\",\n \"id\": \"amet dolor labore aliqua qui\",\n \"routes\": [\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"status\": \"init\",\n \"usages\": [\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										{
											"name": "Request contains invalid content.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Need login.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If update network but some using IP removed, can't continue.\nIf need more IP than passed in, can't continue.\n",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Some error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/networks/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"networks",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all networks.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"networks"
									]
								},
								"description": "Retrieves all existing networks. Does not return a default network if no additional networks are added.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Returns all VLANs.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Valid login is required.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Cannot retrieve the networks.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a network.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"in\",\n    \"vlanId\": 2945,\n    \"ips\": [\n        \"proident ullamco officia adipisicing exercitation\",\n        \"ex quis sit esse\"\n    ],\n    \"netmask\": \"dolor qui aliqua incididunt\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"ullamco mollit\",\n    \"id\": \"aliqua incididunt in mollit reprehenderit\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"networks"
									]
								},
								"description": "Creates a network. The operation occurs asynchronously. When successful, the request is accepted for processing.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Add network successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"laborum u\",\n \"vlanId\": 3315,\n \"ips\": [\n  \"quis ipsum\",\n  \"enim id sit nisi\"\n ],\n \"netmask\": \"ut\",\n \"mtu\": 1500,\n \"type\": \"any\",\n \"gateway\": \"laboris mollit enim proident\",\n \"id\": \"amet dolor labore aliqua qui\",\n \"routes\": [\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"destination\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"gateway\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"netmask\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"status\": \"init\",\n \"usages\": [\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  {\n   \"device\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"inUse\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"ip\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"lastUpdateAt\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"networkInterface\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"referenceId\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"serverType\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"vmNetworkName\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ],\n \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Need login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Request contains conflict info with existing info.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Center not found.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Can't save networks",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"laborum u\",\n    \"vlanId\": 3315,\n    \"ips\": [\n        \"quis ipsum\",\n        \"enim id sit nisi\"\n    ],\n    \"netmask\": \"ut\",\n    \"mtu\": 1500,\n    \"type\": \"any\",\n    \"gateway\": \"laboris mollit enim proident\",\n    \"id\": \"amet dolor labore aliqua qui\",\n    \"routes\": [\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"destination\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"gateway\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"netmask\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"status\": \"init\",\n    \"usages\": [\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"device\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"inUse\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"ip\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"lastUpdateAt\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"networkInterface\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"referenceId\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"serverType\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"status\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"vmNetworkName\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ],\n    \"vmNetworkName\": \"DPG_VM_PUBLIC_DATA_NETWORK\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/networks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"networks"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "nodes",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get node by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Node ID."
												}
											]
										},
										"description": "Retrieves a node on the appliance with the specified ID. The node has information about the appliance status, subcomponents in the appliance, uptime, version, and other system details.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the node with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"labore sunt qui in enim\",\n \"status\": \"RESTORE\",\n \"components\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"lastNodeStatusUpdated\": \"1980-10-12T07:32:19.457Z\",\n \"lastReboot\": \"in\",\n \"lastUpdated\": \"2003-08-06T06:43:42.657Z\",\n \"lastUpdatedBy\": \"voluptate consequat eiusmod sit\",\n \"powerProtectModel\": \"est reprehenderit\",\n \"powerProtectVersion\": \"id deserunt ex Excepteur ad\",\n \"restrictions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"statusDescription\": \"do quis labore ullamco\",\n \"systemId\": \"ullamco\",\n \"uptimeInDays\": \"amet ipsum in et\",\n \"version\": \"Duis et laborum\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a node with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Change the status of the appliance.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Node ID sent in request."
												}
											]
										},
										"description": "Updates the status of the appliance to any of the following states: MAINTENANCE, RESTORE, QUIESCE, OPERATIONAL.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"in nulla ea\",\n \"status\": \"OPERATIONAL_INIT\",\n \"components\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n \"lastReboot\": \"anim nostrud\",\n \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n \"restrictions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"statusDescription\": \"enim id\",\n \"systemId\": \"ut dolore ex\",\n \"uptimeInDays\": \"et ad\",\n \"version\": \"Excepteur qui magna consequat\"\n}"
										},
										{
											"name": "Accepted and processing the node status request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The submitted node has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The system state change request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a node with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"in nulla ea\",\n    \"status\": \"OPERATIONAL_INIT\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"lastNodeStatusUpdated\": \"1995-02-26T02:47:50.358Z\",\n    \"lastReboot\": \"anim nostrud\",\n    \"lastUpdated\": \"2017-07-17T00:58:23.810Z\",\n    \"lastUpdatedBy\": \"sint dolor sed aliqua\",\n    \"powerProtectModel\": \"eu eiusmod aute et commodo\",\n    \"powerProtectVersion\": \"laborum Excepteur adipisicing non\",\n    \"restrictions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"statusDescription\": \"enim id\",\n    \"systemId\": \"ut dolore ex\",\n    \"uptimeInDays\": \"et ad\",\n    \"version\": \"Excepteur qui magna consequat\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/nodes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"nodes",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all nodes.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/nodes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"nodes"
									]
								},
								"description": "Retrieves all nodes on the appliance. Each node has information about the appliance status, subcomponents in the appliance, uptime, version, and other system details.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned the available nodes successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"nodes"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "protection-engines",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "proxies",
									"item": [
										{
											"name": "{proxy Id}",
											"item": [
												{
													"name": "Delete protection engine proxy.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies",
																":proxyId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the VPE protection engine."
																},
																{
																	"key": "proxyId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The proxy ID of the proxy to be removed."
																}
															]
														},
														"description": "Deletes the VPE proxy with a proxyId that is registered to the protection engine with the specified ID.  The protection engine with the specified ID must already be registered with PowerProtect Data Manager. The VPE proxy with the proxyId must also be registered.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Get protection engine proxy.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies",
																":proxyId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the VPE protection engine."
																},
																{
																	"key": "proxyId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The proxy ID."
																}
															]
														},
														"description": "Retrieves the VPE proxy with proxyId that is registered to the protection engine with the specified ID.  The protection engine with the specified ID must already be registered with PowerProtect Data Manager. The VPE proxy with the proxyId must also be registered.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "Successfully returned VPE proxy resource.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Update protection engine proxy configuration.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies",
																":proxyId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the protection engine."
																},
																{
																	"key": "proxyId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The proxy ID of the proxy to be updated."
																}
															]
														},
														"description": "Update the VPE proxy with proxyId that is registered to the protection engine with the specified ID.  The protection engine with the specified ID must already be registered with PowerProtect Data Manager. The VPE proxy with the proxyId must also be registered.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "Successful operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Redeploy protection engine proxy.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies",
																":proxyId",
																"redeploy"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the protection engine."
																},
																{
																	"key": "proxyId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The proxy ID of the proxy to be redeployed."
																}
															]
														},
														"description": "Redeploys the VPE proxy with proxyId that is registered to the protection engine with the specified ID.  The protection engine with the specified ID must already be registered with PowerProtect Data Manager. The VPE proxy with the proxyId must also be registered.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "Successful operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies/:proxyId/redeploy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxies",
																		":proxyId",
																		"redeploy"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "proxyId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get all protection engine proxies.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxies"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "pageSize",
															"value": "100",
															"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do",
															"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do",
															"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the VPE protection engine."
														}
													]
												},
												"description": "Retrieves a list of VPE protection engine proxies for the protection engine with the specified ID. The protection engine with the specified ID must already be registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully returned available proxies.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Add protection engine proxy.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxies"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the VPE protection engine."
														}
													]
												},
												"description": "Adds a VPE proxy to the protection engine with the specified ID. The protection engine with the specified ID must already be registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successful operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request was accepted for processing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Accepted",
													"code": 202,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Config\": {\n        \"AdvancedOptions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ApplicationData\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AutoUpdateConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Credential\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployProxy\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Disabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HealthCheckInterval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"InstanceUuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"MORef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Operation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Port\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeploymentConfig\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyType\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SkipRegistration\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"SupportedProtectionTypes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UpdateCredentials\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VimServerRef\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n    \"Status\": {\n        \"Aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedModes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"AllottedNasSessions\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Certificate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ConfigChange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DaemonStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DatacenterMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Datastores\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"DeployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"HostedComputeRes\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"LastOperation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ModesAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"NasSessionsAvailable\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Networks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"PowerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyDeployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyRegistered\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ProxyStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"RegisteredTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Thumbprint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Uuid\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"VlanStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxies",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxies"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "proxy-bundles",
									"item": [
										{
											"name": "{session Id}",
											"item": [
												{
													"name": "Delete protection engine proxy bundle session.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles",
																":sessionId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the VPE protection engine."
																},
																{
																	"key": "sessionId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The log bundle session ID."
																}
															]
														},
														"description": "Deletes protection engine proxy bundle session.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Get protection engine proxy bundle session.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles",
																":sessionId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the VPE protection engine."
																},
																{
																	"key": "sessionId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The protection engine proxy bundle session ID."
																}
															]
														},
														"description": "Retrieves the protection engine proxy bundle session.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
													},
													"response": [
														{
															"name": "Successfully returned VPE proxy resource.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Config\": {\n  \"AdvancedOptions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AutoUpdateConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Credential\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployProxy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Disabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HealthCheckInterval\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"InstanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"MORef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Operation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Port\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SkipRegistration\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SupportedProtectionTypes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UpdateCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VimServerRef\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Id\": \"Lorem dolore consequat mollit cupidatat\",\n \"Status\": {\n  \"Aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedModes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"AllottedNasSessions\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Certificate\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ConfigChange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DaemonStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DatacenterMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Datastores\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"DeployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"HostedComputeRes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LastOperation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ModesAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NasSessionsAvailable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Networks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"PowerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyDeployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyRegistered\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"RegisteredTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Thumbprint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Uuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"VlanStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles/:sessionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"protection-engines",
																		":id",
																		"proxy-bundles",
																		":sessionId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "sessionId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get all protection engine proxy log bundles.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-bundles"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "pageSize",
															"value": "100",
															"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do",
															"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do",
															"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the VPE protection engine."
														}
													]
												},
												"description": "Retrieves all protection engine proxy log bundles.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully returned available proxy bundle sessions.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Collect protection engine proxy bundles.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-bundles"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the VPE protection engine."
														}
													]
												},
												"description": "Collects protection engine proxy bundles.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successful operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Id\": \"eiusmod incididunt ex deserunt\",\n \"Config\": {\n  \"AcceptedLanguage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ClientSessionData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"IdleTimeout\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogBundleRange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogLevel\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogTag\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NoCancelOnTimeout\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxySpec\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SessionId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Status\": {\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationVersion\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"EndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Progress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyLogBundleStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"StartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"State\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Warnings\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request was accepted for processing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Accepted",
													"code": 202,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Id\": \"eiusmod incididunt ex deserunt\",\n \"Config\": {\n  \"AcceptedLanguage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ClientSessionData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"IdleTimeout\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogBundleRange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogLevel\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"LogTag\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"NoCancelOnTimeout\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxySpec\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"SessionId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"Status\": {\n  \"ApplicationData\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ApplicationVersion\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Description\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"EndTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Progress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ProxyLogBundleStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"StartTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"State\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Warnings\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"IdleTimeout\": 81033449,\n    \"LogBundleRange\": {\n        \"EndDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"StartDate\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"LogDirectory\": \"proident ullamco enim\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-bundles",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-engines",
																":id",
																"proxy-bundles"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "Unregister protection engine.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the protection engine to be deleted."
												}
											]
										},
										"description": "Unregisters the protection engine, specified by its ID, from PowerProtect Data Manager.  A prerequisite is that the protection engine with the specified ID is already registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the protection engine.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get protection engine.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the protection engine to be retrieved."
												}
											]
										},
										"description": "Retrieves the registered protection engine with the specified ID.  A prerequisite is that the protection engine with the specified ID is already registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the protection engine.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"culpa\",\n \"type\": \"VPE\",\n \"ipAddress\": \"pariatur mollit nostrud f\",\n \"status\": \"cillum inci\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"detail\": {\n  \"vpe\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"dataDomainMtree\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt\",\n \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The protection engine ID does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update protection engine.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the protection engine to be updated."
												}
											]
										},
										"description": "Updates the protection engine with the specified ID. The protection engine with the specified ID must already be registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"culpa\",\n \"type\": \"VPE\",\n \"ipAddress\": \"pariatur mollit nostrud f\",\n \"status\": \"cillum inci\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"detail\": {\n  \"vpe\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"dataDomainMtree\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt\",\n \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										{
											"name": "The request was accepted for processing.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"culpa\",\n \"type\": \"VPE\",\n \"ipAddress\": \"pariatur mollit nostrud f\",\n \"status\": \"cillum inci\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"detail\": {\n  \"vpe\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"dataDomainMtree\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt\",\n \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation as it is not implemented.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Manage protection engine.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id",
												"management"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the protection engine to be managed."
												}
											]
										},
										"description": "Performs the specified operation (ProtectionManagementResource.operation) on the protection engine with the specified ID.  The protection engine with the specified ID must already be registered with PowerProtect Data Manager.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"engineId\": \"irure et magna\",\n \"engineType\": \"VPE\",\n \"operation\": \"STOP_PROXIES\",\n \"jobId\": \"commodo dolore\",\n \"options\": {\n  \"minimumProxyVersion\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"quiesceWaitTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request was accepted for processing.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"engineId\": \"irure et magna\",\n \"engineType\": \"VPE\",\n \"operation\": \"STOP_PROXIES\",\n \"jobId\": \"commodo dolore\",\n \"options\": {\n  \"minimumProxyVersion\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"quiesceWaitTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"engineId\": \"irure et magna\",\n    \"engineType\": \"VPE\",\n    \"operation\": \"STOP_PROXIES\",\n    \"jobId\": \"commodo dolore\",\n    \"options\": {\n        \"minimumProxyVersion\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"quiesceWaitTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get all protection engine proxy images.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id",
												"proxy-images"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the VPE protection engine."
												}
											]
										},
										"description": "Retrieves all protection engine proxy images.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned available proxy OVA files.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-images"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-images"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-images"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-images"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/proxy-images",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"proxy-images"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get protection engine supported upgrade type.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines",
												":id",
												"supported-upgrade"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the protection engine."
												}
											]
										},
										"description": "Retrieves protection engine supported upgrade type.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "The request completed successfully.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"minimumProxyVersion\": \"ipsum\",\n \"upgradeType\": \"DU\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The request could not be completed due to a conflict with the current state of the target resource.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"minimumProxyVersion\": \"ipsum\",\n    \"upgradeType\": \"DU\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-engines/:id/supported-upgrade",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-engines",
														":id",
														"supported-upgrade"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all protection engines.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-engines"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all registered protection engines supported by PowerProtect Data Manager.  This list is expected to grow, and for the current release (and upcoming releases), the supported protection engine is VPE.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available protection engine.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Register protection engine.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-engines",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-engines"
									]
								},
								"description": "Registers a protection engine with PowerProtect Data Manager.  This list of possible protection engines is expected to grow; however, for the current release (and upcoming releases), the supported protection engine is VPE.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"culpa\",\n \"type\": \"VPE\",\n \"ipAddress\": \"pariatur mollit nostrud f\",\n \"status\": \"cillum inci\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"detail\": {\n  \"vpe\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"dataDomainMtree\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt\",\n \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
								},
								{
									"name": "The request was accepted for processing.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"culpa\",\n \"type\": \"VPE\",\n \"ipAddress\": \"pariatur mollit nostrud f\",\n \"status\": \"cillum inci\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"detail\": {\n  \"vpe\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"_embedded\": {\n  \"dataDomainMtree\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"sunt\",\n \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"culpa\",\n    \"type\": \"VPE\",\n    \"ipAddress\": \"pariatur mollit nostrud f\",\n    \"status\": \"cillum inci\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"detail\": {\n        \"vpe\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"_embedded\": {\n        \"dataDomainMtree\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"storageSystem\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"sunt\",\n    \"registeredAt\": \"1950-11-29T15:37:56.974Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-engines",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-engines"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "protection-policies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "asset-assignments",
									"item": [
										{
											"name": "Get all assets protected by protection policy ID.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-assignments"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "pageSize",
															"value": "100",
															"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do",
															"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do",
															"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The protection policy ID."
														}
													]
												},
												"description": "Retrieves all assets that are protected with the specified protection policy ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully returned available assets.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Assign assets to the protection policy by protection policy ID.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"Ut\",\n    \"cillum nulla minim\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-assignments"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The protection policy ID."
														}
													]
												},
												"description": "Assigns the assets to the protection policy with the specified protection policy ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
											},
											"response": [
												{
													"name": "Successfully assign the assets.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-assignments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"protection-policies",
																":id",
																"asset-assignments"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "Delete protection policy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The protection policy ID."
												}
											]
										},
										"description": "Deletes protection policy by ID.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the protection policy.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a protection policy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The protection policy ID."
												}
											]
										},
										"description": "Retrieves a protection policy by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the protection policy.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"ipsum\",\n \"name\": \"eiusmod mollit\",\n \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n \"type\": \"EXCLUDED\",\n \"enabled\": false,\n \"priority\": 28586929,\n \"encrypted\": false,\n \"complianceInterval\": \"Lorem esse id ut aliquip\",\n \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n \"description\": \"sunt Ut\",\n \"details\": {\n  \"oracle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"filterIds\": [\n  \"do elit\",\n  \"occaecat dolore\"\n ],\n \"forceFull\": false,\n \"passive\": true,\n \"slaId\": \"Duis\",\n \"stages\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"summary\": {\n  \"lastExecutionStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetProtectionCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										{
											"name": "The requested protection policy does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update protection policy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The protection policy ID."
												}
											]
										},
										"description": "Updates protection policy by ID.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the protection policy.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"ipsum\",\n \"name\": \"eiusmod mollit\",\n \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n \"type\": \"EXCLUDED\",\n \"enabled\": false,\n \"priority\": 28586929,\n \"encrypted\": false,\n \"complianceInterval\": \"Lorem esse id ut aliquip\",\n \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n \"description\": \"sunt Ut\",\n \"details\": {\n  \"oracle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"filterIds\": [\n  \"do elit\",\n  \"occaecat dolore\"\n ],\n \"forceFull\": false,\n \"passive\": true,\n \"slaId\": \"Duis\",\n \"stages\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"summary\": {\n  \"lastExecutionStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetProtectionCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Unassign assets protected from the protection policy by protection policy ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"Ut\",\n    \"cillum nulla minim\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id",
												"asset-unassignments"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The protection policy ID."
												}
											]
										},
										"description": "Unassigns protected assets from the specified protection policy ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully unassign the assets.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-unassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-unassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-unassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-unassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    \"commodo est\",\n    \"sed incididunt nostrud fugiat\"\n]"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/asset-unassignments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"asset-unassignments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Trigger manual backup at protection policy level.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetIds\": [\n        \"laboris amet dolor labore\",\n        \"consectetur ullamco non ex amet\"\n    ],\n    \"backupType\": \"SYNTHETIC_FULL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id",
												"backups"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The protection policy Id."
												}
											]
										},
										"description": "Trigger All or Selected assets in one protection policy as manual backup.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully triggered the adhoc backup process.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"cul\",\n        \"non quis es\"\n    ],\n    \"backupType\": \"DIFFERENTIAL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"backups"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"cul\",\n        \"non quis es\"\n    ],\n    \"backupType\": \"DIFFERENTIAL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"backups"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"cul\",\n        \"non quis es\"\n    ],\n    \"backupType\": \"DIFFERENTIAL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"backups"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"cul\",\n        \"non quis es\"\n    ],\n    \"backupType\": \"DIFFERENTIAL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"backups"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"cul\",\n        \"non quis es\"\n    ],\n    \"backupType\": \"DIFFERENTIAL\",\n    \"disableProtectionPolicyProcessing\": false,\n    \"retention\": {\n        \"interval\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"unit\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/backups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"backups"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Manually protect assets by policy.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetIds\": [\n        \"in qui do veniam\",\n        \"id temp\"\n    ],\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies/:id/protections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies",
												":id",
												"protections"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the protection policy."
												}
											]
										},
										"description": "Manually protect assets at the protection policy level."
									},
									"response": [
										{
											"name": "The requested is accepted for processing.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"assetIds\": [\n        \"ut reprehenderit elit in tempor\",\n        \"deserunt laboris\"\n    ],\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-policies/:id/protections",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-policies",
														":id",
														"protections"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"results\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all protection policies.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all protection policies.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully returned available protection policies.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a protection policy.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"non aute laboris\",\n    \"name\": \"ullamco velit enim commodo Ut\",\n    \"assetType\": \"XTREMIO_CONSISTENCY_GROUP\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 91076635,\n    \"encrypted\": true,\n    \"complianceInterval\": \"Excepteur et\",\n    \"createdAt\": \"2017-04-05T19:05:15.522Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"CRASH_CONSISTENT\",\n    \"description\": \"proident\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"dolore laboris in\",\n        \"consequat labore dolor aliqua cillum\"\n    ],\n    \"forceFull\": true,\n    \"passive\": false,\n    \"slaId\": \"ullamco sed\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"USE_CONFIGURED\",\n    \"updatedAt\": \"1950-10-17T18:47:39.759Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									]
								},
								"description": "Creates a protection policy.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully created the protection policy.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"ipsum\",\n \"name\": \"eiusmod mollit\",\n \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n \"type\": \"EXCLUDED\",\n \"enabled\": false,\n \"priority\": 28586929,\n \"encrypted\": false,\n \"complianceInterval\": \"Lorem esse id ut aliquip\",\n \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n \"credentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"type\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n \"description\": \"sunt Ut\",\n \"details\": {\n  \"oracle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vm\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"filterIds\": [\n  \"do elit\",\n  \"occaecat dolore\"\n ],\n \"forceFull\": false,\n \"passive\": true,\n \"slaId\": \"Duis\",\n \"stages\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"summary\": {\n  \"lastExecutionStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetProtectionCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ipsum\",\n    \"name\": \"eiusmod mollit\",\n    \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n    \"type\": \"EXCLUDED\",\n    \"enabled\": false,\n    \"priority\": 28586929,\n    \"encrypted\": false,\n    \"complianceInterval\": \"Lorem esse id ut aliquip\",\n    \"createdAt\": \"2009-10-29T10:37:51.291Z\",\n    \"credentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"dataConsistency\": \"APPLICATION_CONSISTENT\",\n    \"description\": \"sunt Ut\",\n    \"details\": {\n        \"oracle\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vm\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"filterIds\": [\n        \"do elit\",\n        \"occaecat dolore\"\n    ],\n    \"forceFull\": false,\n    \"passive\": true,\n    \"slaId\": \"Duis\",\n    \"stages\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"summary\": {\n        \"lastExecutionStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssetProtectionCapacity\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"targetStorageProvisionStrategy\": \"AUTO_PROVISION\",\n    \"updatedAt\": \"1952-02-05T19:19:07.398Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-policies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-policies"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "protection-rules",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete protection rule by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the protection rule."
												}
											]
										},
										"description": "Deletes protection rule by specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the protection rule.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a protection rule by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the protection rule."
												}
											]
										},
										"description": "Retrieves a protection rule by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the protection rule.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"sed pariatur non eu\",\n \"action\": \"MOVE_TO_GROUP\",\n \"actionResult\": \"ut amet dolor dolore\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"AND\",\n \"inventorySourceType\": \"MICROSOFT_SQL_DATABASE\",\n \"priority\": -47008297,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"assignedAssetsCount\": -8120476,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"ea enim\",\n \"displayDescription\": \"Excepteur\",\n \"id\": \"officia magna minim sunt\",\n \"lastRunAt\": \"1968-03-16T09:30:34.040Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The requested protection rule does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update protection rule by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the protection rule."
												}
											]
										},
										"description": "Update protection rule by ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the protection rule.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"sed pariatur non eu\",\n \"action\": \"MOVE_TO_GROUP\",\n \"actionResult\": \"ut amet dolor dolore\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"AND\",\n \"inventorySourceType\": \"MICROSOFT_SQL_DATABASE\",\n \"priority\": -47008297,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"assignedAssetsCount\": -8120476,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"ea enim\",\n \"displayDescription\": \"Excepteur\",\n \"id\": \"officia magna minim sunt\",\n \"lastRunAt\": \"1968-03-16T09:30:34.040Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/protection-rules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"protection-rules",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all protection rules.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all protection rules\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available protection rules.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a protection rule.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules"
									]
								},
								"description": "Create a protection rule.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successful operation. ",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"sed pariatur non eu\",\n \"action\": \"MOVE_TO_GROUP\",\n \"actionResult\": \"ut amet dolor dolore\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"AND\",\n \"inventorySourceType\": \"MICROSOFT_SQL_DATABASE\",\n \"priority\": -47008297,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"assignedAssetsCount\": -8120476,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"ea enim\",\n \"displayDescription\": \"Excepteur\",\n \"id\": \"officia magna minim sunt\",\n \"lastRunAt\": \"1968-03-16T09:30:34.040Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Successfully created the protection rule.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"sed pariatur non eu\",\n \"action\": \"MOVE_TO_GROUP\",\n \"actionResult\": \"ut amet dolor dolore\",\n \"conditions\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"logicalOperator\": \"AND\",\n \"inventorySourceType\": \"MICROSOFT_SQL_DATABASE\",\n \"priority\": -47008297,\n \"_embedded\": {\n  \"protectionPolicy\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"protectionlifeCycle\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"storageSystem\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"assignedAssetsCount\": -8120476,\n \"category\": \"COMPOUND\",\n \"conditionConnector\": \"AND\",\n \"description\": \"ea enim\",\n \"displayDescription\": \"Excepteur\",\n \"id\": \"officia magna minim sunt\",\n \"lastRunAt\": \"1968-03-16T09:30:34.040Z\",\n \"managedBy\": \"null\",\n \"rules\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"tenant\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"quis nisi nulla ipsum Lorem\",\n    \"action\": \"NOT_SUPPORTED\",\n    \"actionResult\": \"mollit\",\n    \"conditions\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"logicalOperator\": \"AND\",\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\",\n    \"priority\": 54268183,\n    \"assignedAssetsCount\": 52195919,\n    \"category\": \"COMPOUND\",\n    \"conditionConnector\": \"NONE\",\n    \"description\": \"Lorem\",\n    \"displayDescription\": \"anim sunt amet\",\n    \"id\": \"mollit aliquip Exc\",\n    \"lastRunAt\": \"1981-01-22T14:49:11.059Z\",\n    \"managedBy\": \"null\",\n    \"rules\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"tenant\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/protection-rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"protection-rules"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "remote-services-gateway",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Unregister the device from the ESRS gateway.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the Remote Services Gateway connection."
												}
											]
										},
										"description": "Removes appliance registration from the remote services gateway.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Unregistered and deleted the device from the remote services gateway.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Forbidden.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find a remote services connection with the given ID.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get the remote services gateway connections.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the remote services gateway connection."
												}
											]
										},
										"description": "Retrieves list of connections to the remote services gateway.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "The request was successful and returned the requested resource.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"automaticDownloadUpgradePackage\": false,\n \"createdDate\": \"anim non\",\n \"deploymentStatus\": \"aliquip mi\",\n \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n \"emcSupportPassword\": \"aliquip in nulla\",\n \"emcSupportUsername\": \"commodo\",\n \"gatewayHostAddress\": \"quis labore qui\",\n \"gatewaySerialNumber\": \"consectetur\",\n \"id\": \"Ut aute magna exercitation\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find a remote services connection with the given ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Occurs if component state is RESTORE.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Patch an updated value of automatic download upgrade package.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the remote services gateway connection."
												}
											]
										},
										"description": "Enables or disables automatic download upgrade package.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the remote services connection with the new gateway address.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"automaticDownloadUpgradePackage\": false,\n \"createdDate\": \"anim non\",\n \"deploymentStatus\": \"aliquip mi\",\n \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n \"emcSupportPassword\": \"aliquip in nulla\",\n \"emcSupportUsername\": \"commodo\",\n \"gatewayHostAddress\": \"quis labore qui\",\n \"gatewaySerialNumber\": \"consectetur\",\n \"id\": \"Ut aute magna exercitation\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Forbidden.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find a remote services connection with the given ID.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Some fields in the request body are not valid or required fields are not supplied.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Failed to contact the remote services backend or an error occurred in the remote services backend.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Failed Dependency (WebDAV) (RFC 4918)",
											"code": 424,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-services-gateway/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-services-gateway",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get the remote services gateway resource.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"remote-services-gateway"
									]
								},
								"description": "Retrieves a list of connections to the remote services gateway.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successful.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Occurs if component state is RESTORE.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Register a device for telemetry management.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"remote-services-gateway"
									]
								},
								"description": "Registers the PowerProtect Data Manager appliance with a remote services gateway.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Registered the device with the remote services gateway.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"automaticDownloadUpgradePackage\": false,\n \"emcSupportPassword\": \"in et incididunt\",\n \"emcSupportUsername\": \"ut sed\",\n \"gatewayHostAddress\": \"cillum exercitation eiusmod\",\n \"gatewaySerialNumber\": \"anim tempor laboris aliqua \",\n \"id\": \"velit rep\"\n}"
								},
								{
									"name": "The JSON syntax is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operationr.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Forbidden.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "A valid license does not exist for the system.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Some fields in the request body are not valid or required fields are not supplied.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Failed to contact the remote services backend or an error occurred in the remote services backend.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Failed Dependency (WebDAV) (RFC 4918)",
									"code": 424,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"automaticDownloadUpgradePackage\": false,\n    \"createdDate\": \"anim non\",\n    \"deploymentStatus\": \"aliquip mi\",\n    \"deviceStatus\": \"eiusmod occaecat exercitation aute\",\n    \"emcSupportPassword\": \"aliquip in nulla\",\n    \"emcSupportUsername\": \"commodo\",\n    \"gatewayHostAddress\": \"quis labore qui\",\n    \"gatewaySerialNumber\": \"consectetur\",\n    \"id\": \"Ut aute magna exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-services-gateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-services-gateway"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "remote-upgrade-packages",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Download the remote upgrade package that is assigned to the product.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages",
												":id",
												"download"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the remote services gateway connection."
												}
											]
										},
										"description": "Starts file download for the remote upgrade package of the specified ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Accepted and processing the download request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Occurs if the state of the upgrade package for the given ID is DOWNLOADING, DOWNLOADED, IGNORED; the metadata of the file has been changed in the remote services backend; or the downloaded package already exists on the appliance.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a device connection to the remote services gateway or the upgrade package with the given ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An error occurred in the ESRS backend, or the file was not found in the backend.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Failed Dependency (WebDAV) (RFC 4918)",
											"code": 424,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The Telemetry Manager component is in the RESTORE state.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get remote upgrade package download progress.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages",
												":id",
												"download-status"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The UUID of the remote services gateway connection."
												}
											]
										},
										"description": "Retieves the download progress percentage and package transfer rate in MBPS.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The request was successful and returned the requested resource.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"errorMsg\": \"nostrud do cillum\",\n \"percentageCompleted\": -52975673.59307469,\n \"transferRate\": -6966661.385228738\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The download for the given file ID has not started or the state of the upgrade package for the given ID is DOWNLOADED.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An error occurred in the remote services backend, or the upgrade package was deleted from the appliance while the download was in progress.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Failed Dependency (WebDAV) (RFC 4918)",
											"code": 424,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The Telemetry Manager component is in the RESTORE state.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages/:id/download-status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"remote-upgrade-packages",
														":id",
														"download-status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get the list of available upgrade packages.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"remote-upgrade-packages"
									]
								},
								"description": "Retrieves list of remote upgrade packages from the database.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "The request was successful and returned the requested resource.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Cannot find a device connection to the ESRS gateway.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Failed to contact the remote services backend, or an error occurred in the remote services backend.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "Failed Dependency (WebDAV) (RFC 4918)",
									"code": 424,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Telemetry Manager component is in the RESTORE state.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/remote-upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"remote-upgrade-packages"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "restored-copies",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a restored copy by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The restored copy ID."
												}
											]
										},
										"description": "Retrieves a restored copy by the specified ID. The restored copies define which copies of an asset already are restored. Each restored asset corresponds to a restored copy.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the requested restored copy.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"description\": \"qui Duis e\",\n \"restoreType\": \"INSTANT_ACCESS\",\n \"activityId\": \"eiusmod ex dolor irure\",\n \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n \"copyId\": \"sunt do dolore velit nostrud\",\n \"copyIds\": [\n  \"amet sit veniam elit\",\n  \"in velit Ut eu\"\n ],\n \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n \"id\": \"ipsum enim\",\n \"options\": {\n  \"allowOverwrite\": \"officia Lorem ipsum labore\",\n  \"disconnectDatabaseUsers\": false,\n  \"enableCompressedRestore\": false,\n  \"enableDebug\": true,\n  \"fileRelocationOptions\": {\n   \"targetDataFileLocation\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"targetLogFileLocation\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"forceDatabaseOverwrite\": false,\n  \"performTailLogBackup\": false,\n  \"recoveryState\": \"NO_RECOVERY\",\n  \"restoreOriginalMachineConfig\": false,\n  \"stopAtTime\": \"sint est laboris eu\",\n  \"vcenterId\": \"deserunt non\"\n },\n \"restoreEntireBackupTransaction\": false,\n \"restoredCopiesDetails\": {\n  \"targetCloudInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetDatabaseInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetFileSystemInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetK8sInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetNasInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetStorageInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetVmInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"startTime\": \"1971-12-31T08:15:18.144Z\",\n \"state\": \"MOUNTED\",\n \"status\": \"CANCELLED\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Extend the expiration time of the Live VM/Instant Access session.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"extendedDay\": -13673410\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies",
												":id",
												"expiration"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The exported copy resource ID."
												}
											]
										},
										"description": "Handles the request to extend, by specifying the number of days, the expiration time of the Live VM/Instant Access session.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully extend the expiration time.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"extendedDay\": -13673410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"expiration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"taskId\": \"commodo\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"extendedDay\": -13673410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"expiration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"extendedDay\": -13673410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"expiration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"extendedDay\": -13673410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"expiration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"extendedDay\": -13673410\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/expiration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"expiration"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Unmount the NAS datastore and clean up the VM proxy restore session resource.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies",
												":id",
												"remove"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) "
												}
											]
										},
										"description": "Unmounts the NAS datastore and cleans up the VM proxy restore session resource.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully removed NAS datastore and restored session resource.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"remove"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"taskId\": \"commodo\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"remove"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"remove"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"remove"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/remove",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"remove"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Vmotion a VM from an instant-access restore to permanent storage",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"cillum incididunt est\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"aute Excepteur cillum Du\",\n    \"targetFolderMoref\": \"sint et\",\n    \"targetHostMoref\": \"dolore est\",\n    \"targetResourcePoolMoref\": \"dolor deserunt\",\n    \"vmMoref\": \"Lorem mollit et\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies",
												":id",
												"vmotion"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The restored copy resource ID."
												}
											]
										},
										"description": "vMotions a VM that is deployed as an instant access restore to permanent storage. In an instant access restore, the VM is deployed to an NFS share that is attached to a specified ESX host, cluster, or resource pool. This API call migrates the VM from the temporary NFS share to permanent storage.\n\nThe VM configuration files and VMDK files can be migrated to different datastores.\n\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully Vmotion the VM files.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"consectetur ut ut sit laborum\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"elit et consequat\",\n    \"targetFolderMoref\": \"laborum minim\",\n    \"targetHostMoref\": \"consectetur\",\n    \"targetResourcePoolMoref\": \"id ea do\",\n    \"vmMoref\": \"Lorem ut cupidatat in\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"vmotion"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"taskId\": \"commodo\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"consectetur ut ut sit laborum\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"elit et consequat\",\n    \"targetFolderMoref\": \"laborum minim\",\n    \"targetHostMoref\": \"consectetur\",\n    \"targetResourcePoolMoref\": \"id ea do\",\n    \"vmMoref\": \"Lorem ut cupidatat in\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"vmotion"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"consectetur ut ut sit laborum\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"elit et consequat\",\n    \"targetFolderMoref\": \"laborum minim\",\n    \"targetHostMoref\": \"consectetur\",\n    \"targetResourcePoolMoref\": \"id ea do\",\n    \"vmMoref\": \"Lorem ut cupidatat in\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"vmotion"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"consectetur ut ut sit laborum\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"elit et consequat\",\n    \"targetFolderMoref\": \"laborum minim\",\n    \"targetHostMoref\": \"consectetur\",\n    \"targetResourcePoolMoref\": \"id ea do\",\n    \"vmMoref\": \"Lorem ut cupidatat in\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"vmotion"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"description\": \"consectetur ut ut sit laborum\",\n    \"disks\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"targetDatastoreMoref\": \"elit et consequat\",\n    \"targetFolderMoref\": \"laborum minim\",\n    \"targetHostMoref\": \"consectetur\",\n    \"targetResourcePoolMoref\": \"id ea do\",\n    \"vmMoref\": \"Lorem ut cupidatat in\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/restored-copies/:id/vmotion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"restored-copies",
														":id",
														"vmotion"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all restored copies.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"restored-copies"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all restored copies by parameters. The restored copies define which copies of an asset are already restored.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully returned available restored copies.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a restored copy.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"minim in non\",\n    \"restoreType\": \"IR_TO_ALTERNATE\",\n    \"activityId\": \"laborum nulla dolore enim pariatur\",\n    \"completionTime\": \"1980-03-31T13:00:00.144Z\",\n    \"copyId\": \"non cillu\",\n    \"copyIds\": [\n        \"veniam do incididunt\",\n        \"ea ipsum Lorem\"\n    ],\n    \"expirationTime\": \"1976-12-14T15:05:54.299Z\",\n    \"id\": \"adipi\",\n    \"options\": {\n        \"allowOverwrite\": \"dolor reprehenderit Lorem\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": false,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": true,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": true,\n        \"stopAtTime\": \"in cupidatat ut\",\n        \"vcenterId\": \"reprehenderit occaecat ipsu\"\n    },\n    \"restoreEntireBackupTransaction\": true,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1951-04-21T21:24:41.960Z\",\n    \"state\": \"STOPPING\",\n    \"status\": \"SUCCESS\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/restored-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"restored-copies"
									]
								},
								"description": "Creates a restored copy by request body. The restored copies define which copies of an asset already are restored.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"qui Duis e\",\n    \"restoreType\": \"INSTANT_ACCESS\",\n    \"activityId\": \"eiusmod ex dolor irure\",\n    \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n    \"copyId\": \"sunt do dolore velit nostrud\",\n    \"copyIds\": [\n        \"amet sit veniam elit\",\n        \"in velit Ut eu\"\n    ],\n    \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n    \"id\": \"ipsum enim\",\n    \"options\": {\n        \"allowOverwrite\": \"officia Lorem ipsum labore\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": true,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": false,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": false,\n        \"stopAtTime\": \"sint est laboris eu\",\n        \"vcenterId\": \"deserunt non\"\n    },\n    \"restoreEntireBackupTransaction\": false,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1971-12-31T08:15:18.144Z\",\n    \"state\": \"MOUNTED\",\n    \"status\": \"CANCELLED\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"description\": \"qui Duis e\",\n \"restoreType\": \"INSTANT_ACCESS\",\n \"activityId\": \"eiusmod ex dolor irure\",\n \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n \"copyId\": \"sunt do dolore velit nostrud\",\n \"copyIds\": [\n  \"amet sit veniam elit\",\n  \"in velit Ut eu\"\n ],\n \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n \"id\": \"ipsum enim\",\n \"options\": {\n  \"allowOverwrite\": \"officia Lorem ipsum labore\",\n  \"disconnectDatabaseUsers\": false,\n  \"enableCompressedRestore\": false,\n  \"enableDebug\": true,\n  \"fileRelocationOptions\": {\n   \"targetDataFileLocation\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"targetLogFileLocation\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"type\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"forceDatabaseOverwrite\": false,\n  \"performTailLogBackup\": false,\n  \"recoveryState\": \"NO_RECOVERY\",\n  \"restoreOriginalMachineConfig\": false,\n  \"stopAtTime\": \"sint est laboris eu\",\n  \"vcenterId\": \"deserunt non\"\n },\n \"restoreEntireBackupTransaction\": false,\n \"restoredCopiesDetails\": {\n  \"targetCloudInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetDatabaseInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetFileSystemInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetK8sInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetNasInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetStorageInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"targetVmInfo\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"startTime\": \"1971-12-31T08:15:18.144Z\",\n \"state\": \"MOUNTED\",\n \"status\": \"CANCELLED\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"qui Duis e\",\n    \"restoreType\": \"INSTANT_ACCESS\",\n    \"activityId\": \"eiusmod ex dolor irure\",\n    \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n    \"copyId\": \"sunt do dolore velit nostrud\",\n    \"copyIds\": [\n        \"amet sit veniam elit\",\n        \"in velit Ut eu\"\n    ],\n    \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n    \"id\": \"ipsum enim\",\n    \"options\": {\n        \"allowOverwrite\": \"officia Lorem ipsum labore\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": true,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": false,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": false,\n        \"stopAtTime\": \"sint est laboris eu\",\n        \"vcenterId\": \"deserunt non\"\n    },\n    \"restoreEntireBackupTransaction\": false,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1971-12-31T08:15:18.144Z\",\n    \"state\": \"MOUNTED\",\n    \"status\": \"CANCELLED\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"qui Duis e\",\n    \"restoreType\": \"INSTANT_ACCESS\",\n    \"activityId\": \"eiusmod ex dolor irure\",\n    \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n    \"copyId\": \"sunt do dolore velit nostrud\",\n    \"copyIds\": [\n        \"amet sit veniam elit\",\n        \"in velit Ut eu\"\n    ],\n    \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n    \"id\": \"ipsum enim\",\n    \"options\": {\n        \"allowOverwrite\": \"officia Lorem ipsum labore\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": true,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": false,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": false,\n        \"stopAtTime\": \"sint est laboris eu\",\n        \"vcenterId\": \"deserunt non\"\n    },\n    \"restoreEntireBackupTransaction\": false,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1971-12-31T08:15:18.144Z\",\n    \"state\": \"MOUNTED\",\n    \"status\": \"CANCELLED\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"qui Duis e\",\n    \"restoreType\": \"INSTANT_ACCESS\",\n    \"activityId\": \"eiusmod ex dolor irure\",\n    \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n    \"copyId\": \"sunt do dolore velit nostrud\",\n    \"copyIds\": [\n        \"amet sit veniam elit\",\n        \"in velit Ut eu\"\n    ],\n    \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n    \"id\": \"ipsum enim\",\n    \"options\": {\n        \"allowOverwrite\": \"officia Lorem ipsum labore\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": true,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": false,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": false,\n        \"stopAtTime\": \"sint est laboris eu\",\n        \"vcenterId\": \"deserunt non\"\n    },\n    \"restoreEntireBackupTransaction\": false,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1971-12-31T08:15:18.144Z\",\n    \"state\": \"MOUNTED\",\n    \"status\": \"CANCELLED\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"qui Duis e\",\n    \"restoreType\": \"INSTANT_ACCESS\",\n    \"activityId\": \"eiusmod ex dolor irure\",\n    \"completionTime\": \"1958-07-24T15:32:45.666Z\",\n    \"copyId\": \"sunt do dolore velit nostrud\",\n    \"copyIds\": [\n        \"amet sit veniam elit\",\n        \"in velit Ut eu\"\n    ],\n    \"expirationTime\": \"1972-09-21T10:22:26.711Z\",\n    \"id\": \"ipsum enim\",\n    \"options\": {\n        \"allowOverwrite\": \"officia Lorem ipsum labore\",\n        \"disconnectDatabaseUsers\": false,\n        \"enableCompressedRestore\": false,\n        \"enableDebug\": true,\n        \"fileRelocationOptions\": {\n            \"targetDataFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"targetLogFileLocation\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        \"forceDatabaseOverwrite\": false,\n        \"performTailLogBackup\": false,\n        \"recoveryState\": \"NO_RECOVERY\",\n        \"restoreOriginalMachineConfig\": false,\n        \"stopAtTime\": \"sint est laboris eu\",\n        \"vcenterId\": \"deserunt non\"\n    },\n    \"restoreEntireBackupTransaction\": false,\n    \"restoredCopiesDetails\": {\n        \"targetCloudInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetDatabaseInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetFileSystemInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetK8sInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetNasInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetStorageInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"targetVmInfo\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"startTime\": \"1971-12-31T08:15:18.144Z\",\n    \"state\": \"MOUNTED\",\n    \"status\": \"CANCELLED\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/restored-copies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"restored-copies"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "roles",
					"item": [
						{
							"name": "Get all roles.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"roles"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves the list of all the assignable system roles and their descriptions. This list contains information about the role privileges.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the list of roles.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a role.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/roles/:roleId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"roles",
										":roleId"
									],
									"variable": [
										{
											"key": "roleId",
											"value": "incididunt in consequat do",
											"description": "(Required) Role ID."
										}
									]
								},
								"description": "Retrieves a role by ID. The role information contains the role description and role privileges. Each local user is assigned a role.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the specified role.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"description\": \"Lorem ipsum ex dolore\",\n \"hiddenRole\": true,\n \"id\": \"cillum enim aliqua veniam aute\",\n \"name\": \"UYX7r\",\n \"privilegeList\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"systemRole\": false,\n \"transferable\": false\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The specified role was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/roles/:roleId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "search-clusters",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "nodes",
									"item": [
										{
											"name": "{node Id}",
											"item": [
												{
													"name": "Remove search cluster node.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes",
																":nodeId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster."
																},
																{
																	"key": "nodeId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster node to be removed."
																}
															]
														},
														"description": "Removes a search cluster node.\n> This endpoint supports execution by the following roles: admin\n"
													},
													"response": [
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"hostName\": \"esse in ea\",\n \"nodeType\": \"dolore cillum non\",\n \"inventorySourceId\": \"minim sit exercitation\",\n \"deploymentConfig\": {\n  \"fqdn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipAddress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dns\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"gateway\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"netMask\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"networkMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipProtocol\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ovafile\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"additionalVMNetworks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"multiVlanEnabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"timeZone\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vlans\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"adminCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"adipisicing\",\n \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n \"rootCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"status\": {\n  \"aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"hostedComputeResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStats\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatusDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"powerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vcenterName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Get search cluster node by ID.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes",
																":nodeId"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster node."
																},
																{
																	"key": "nodeId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster node."
																}
															]
														},
														"description": "Retrieves a search cluster node by its ID.\n> This endpoint supports execution by the following roles: admin\n"
													},
													"response": [
														{
															"name": "Successfully returned the search cluster node.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"hostName\": \"esse in ea\",\n \"nodeType\": \"dolore cillum non\",\n \"inventorySourceId\": \"minim sit exercitation\",\n \"deploymentConfig\": {\n  \"fqdn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipAddress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dns\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"gateway\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"netMask\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"networkMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipProtocol\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ovafile\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"additionalVMNetworks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"multiVlanEnabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"timeZone\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vlans\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"adminCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"adipisicing\",\n \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n \"rootCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"status\": {\n  \"aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"hostedComputeResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStats\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatusDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"powerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vcenterName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												},
												{
													"name": "Manage search cluster node.",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes",
																":nodeId",
																"management"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster."
																},
																{
																	"key": "nodeId",
																	"value": "incididunt in consequat do",
																	"description": "(Required) The ID of the search cluster node to be managed."
																}
															]
														},
														"description": "Manages the search cluster node.\n> This endpoint supports execution by the following roles: admin\n"
													},
													"response": [
														{
															"name": "Successful operation.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"nodeId\": \"dolor dolore\",\n \"operation\": \"REDEPLOY\"\n}"
														},
														{
															"name": "The request was accepted for processing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"nodeId\": \"dolor dolore\",\n \"operation\": \"REDEPLOY\"\n}"
														},
														{
															"name": "The request is not valid.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not authorized to perform this operation.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requestor is not allowed to perform this operation.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "The requested resource was not found.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														},
														{
															"name": "An unexpected error prevented the server from fulfilling your request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"nodeId\": \"dolor dolore\",\n    \"operation\": \"REDEPLOY\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes/:nodeId/management",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"search-clusters",
																		":id",
																		"nodes",
																		":nodeId",
																		"management"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "nodeId"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get all search cluster nodes.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"nodes"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "pageSize",
															"value": "100",
															"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
														},
														{
															"key": "filter",
															"value": "incididunt in consequat do",
															"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
														},
														{
															"key": "orderby",
															"value": "incididunt in consequat do",
															"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The ID of the search cluster."
														}
													]
												},
												"description": "Retrieves all search cluster nodes.\n> This endpoint supports execution by the following roles: admin\n"
											},
											"response": [
												{
													"name": "Successfully returned available nodes.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"hostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"inventorySourceId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"adminCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"instanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"rootCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"hostName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeType\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"inventorySourceId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deploymentConfig\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"adminCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"instanceUuid\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"rootCredentials\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "pageSize",
																	"value": "100"
																},
																{
																	"key": "filter",
																	"value": "incididunt in consequat do"
																},
																{
																	"key": "orderby",
																	"value": "incididunt in consequat do"
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										},
										{
											"name": "Deploy a search cluster node.",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"nodes"
													],
													"variable": [
														{
															"key": "id",
															"value": "incididunt in consequat do",
															"description": "(Required) The id of the search cluster"
														}
													]
												},
												"description": "Deploys a search cluster node.\n> This endpoint supports execution by the following roles: admin\n"
											},
											"response": [
												{
													"name": "Successful operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"hostName\": \"esse in ea\",\n \"nodeType\": \"dolore cillum non\",\n \"inventorySourceId\": \"minim sit exercitation\",\n \"deploymentConfig\": {\n  \"fqdn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipAddress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dns\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"gateway\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"netMask\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"networkMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipProtocol\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ovafile\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"additionalVMNetworks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"multiVlanEnabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"timeZone\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vlans\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"adminCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"adipisicing\",\n \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n \"rootCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"status\": {\n  \"aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"hostedComputeResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStats\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatusDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"powerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vcenterName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
												},
												{
													"name": "The request was accepted for processing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Accepted",
													"code": 202,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"hostName\": \"esse in ea\",\n \"nodeType\": \"dolore cillum non\",\n \"inventorySourceId\": \"minim sit exercitation\",\n \"deploymentConfig\": {\n  \"fqdn\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipAddress\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"dns\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"gateway\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"netMask\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"networkMoref\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ipProtocol\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"ovafile\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"location\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"additionalVMNetworks\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"multiVlanEnabled\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"timeZone\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vlans\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"adminCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"adipisicing\",\n \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n \"rootCredentials\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"status\": {\n  \"aliases\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"deployedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"hostedComputeResource\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastCheckedTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStats\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodeStatusDetail\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"powerState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vcenterName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
												},
												{
													"name": "The request is not valid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not authorized to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "The requestor is not allowed to perform this operation.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												},
												{
													"name": "An unexpected error prevented the server from fulfilling your request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"hostName\": \"esse in ea\",\n    \"nodeType\": \"dolore cillum non\",\n    \"inventorySourceId\": \"minim sit exercitation\",\n    \"deploymentConfig\": {\n        \"fqdn\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipAddress\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"dns\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gateway\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"netMask\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"networkMoref\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ipProtocol\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"ovafile\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"location\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"additionalVMNetworks\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"multiVlanEnabled\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"timeZone\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vlans\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"adminCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"adipisicing\",\n    \"instanceUuid\": \"aliqua Excepteur officia do ea\",\n    \"rootCredentials\": {\n        \"id\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {\n        \"aliases\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployed\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"deployedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostedComputeResource\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"lastCheckedTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStats\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"nodeStatusDetail\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"powerState\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vcenterName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"vmMoref\": \"fugiat Excepteur adipisicing magna\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/search-clusters/:id/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"search-clusters",
																":id",
																"nodes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get search cluster by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the search cluster to be retrieved."
												}
											]
										},
										"description": "Retrieves a search cluster by its ID.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the search cluster.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"aute qui\",\n \"state\": \"DISABLED\",\n \"config\": {\n  \"indexRetentionDays\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"do\",\n \"maintenanceMode\": true,\n \"stateDetail\": \"non pariatur dolor adipisicing\",\n \"summary\": {\n  \"diskCacheNfsServer\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"lastMetadataSyncTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nodes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssetsIndexed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalDiskCapacity\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalDiskUsage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalFailed\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalNodes\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"suspendedBy\": \"USER\",\n \"updatedBy\": \"ullamco eiusmod esse\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The search cluster ID does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update search cluster configuration.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters",
												":id",
												"config"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the search cluster to be updated."
												}
											]
										},
										"description": "Updates the search cluster configuration.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"indexRetentionDays\": -21243729\n}"
										},
										{
											"name": "The request was accepted for processing.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"indexRetentionDays\": -21243729\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requested resource was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation as it is not implemented.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"indexRetentionDays\": -21243729\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"config"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Collect search cluster log bundles.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters",
												":id",
												"log-bundles"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the search cluster."
												}
											]
										},
										"description": "Collects search cluster log bundles.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"config\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"config\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
										},
										{
											"name": "The request was accepted for processing.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"config\": {\n  \"logDirectory\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"logBundleRange\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"status\": {},\n \"id\": \"Lorem eu dolor exercitation\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"config\": {\n        \"logDirectory\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"logBundleRange\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"status\": {},\n    \"id\": \"Lorem eu dolor exercitation\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/log-bundles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"log-bundles"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Execute management request.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters",
												":id",
												"management"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The ID of the search cluster to be managed."
												}
											]
										},
										"description": "Runs search cluster management request.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"clusterId\": \"est dolor aute id qui\",\n \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
										},
										{
											"name": "The request was accepted for processing.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"clusterId\": \"est dolor aute id qui\",\n \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"clusterId\": \"est dolor aute id qui\",\n    \"operation\": \"ENTER_MAINTENANCE_MODE\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/search-clusters/:id/management",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"search-clusters",
														":id",
														"management"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all search clusters.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"search-clusters"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves the available search clusters.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successfully returned all search clusters.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/search-clusters?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"search-clusters"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "server-disaster-recovery-backups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete server disaster recovery backup by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Server backup ID sent in request."
												}
											]
										},
										"description": "Deletes the server DR backup based on the specified ID.\n> This endpoint supports execution by the following roles: admin,user\n"
									},
									"response": [
										{
											"name": "No content.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get server disaster recovery backup by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Server DR backup ID sent in request."
												}
											]
										},
										"description": "Retrieves the server disaster recovery backup by ID.\n> This endpoint supports execution by the following roles: admin,user\n"
									},
									"response": [
										{
											"name": "OK. Retrieves the server disaster recovery backup by ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"backupConsistencyType\": \"enim in dolore culpa\",\n \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n \"components\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"consistency\": \"sunt magna occaecat\",\n \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n \"elapsedSeconds\": 24040007,\n \"error\": \"est in laborum esse\",\n \"hostname\": \"commodo incididunt\",\n \"id\": \"dolore voluptate sit\",\n \"lockboxPassphrase\": \"labore laborum\",\n \"mfrManifestId\": \"dolor \",\n \"mfrReplicationId\": \"qui\",\n \"name\": \"id mollit anim\",\n \"noScheduledStorageAccess\": false,\n \"nodeId\": \"do sunt dolore laboris voluptate\",\n \"recover\": true,\n \"sequenceNumber\": 4900376,\n \"sizeInBytes\": 65992564,\n \"state\": \"dolor ut ad\",\n \"version\": \"dolor magna mollit\"\n}"
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update server disaster recovery backup by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Server DR backup ID sent in request."
												}
											]
										},
										"description": "Updates the server disaster recovery backup by ID.\n> This endpoint supports execution by the following roles: admin,user\n"
									},
									"response": [
										{
											"name": "OK. Updates the server disaster recovery backup by ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-backups",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all server disaster recovery backups.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-backups"
									],
									"query": [
										{
											"key": "full",
											"value": "true",
											"description": "The default is false. If it is true, it  returns all backups, including failures."
										}
									]
								},
								"description": "Retrieves a list of server disaster recovery backups.\n> This endpoint supports execution by the following roles: admin,user\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "OK. Retrieves a list of server disaster recovery backups.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "full",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "full",
													"value": "true"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "full",
													"value": "true"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "full",
													"value": "true"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "full",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create server disaster recovery backup.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backupConsistencyType\": \"lab\",\n    \"checksum\": \"ea laborum fugiat Ut\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"fugiat Lorem\",\n    \"creationTime\": \"2016-06-13T10:52:09.074Z\",\n    \"elapsedSeconds\": 97242278,\n    \"error\": \"laborum ipsum\",\n    \"hostname\": \"et velit Ut\",\n    \"id\": \"occaecat magna\",\n    \"lockboxPassphrase\": \"anim magna Lorem exercitation\",\n    \"mfrManifestId\": \"consequat laborum\",\n    \"mfrReplicationId\": \"laborum\",\n    \"name\": \"cillum\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"fugiat e\",\n    \"recover\": true,\n    \"sequenceNumber\": -63309018,\n    \"sizeInBytes\": -58328648,\n    \"state\": \"id voluptate quis ipsum\",\n    \"version\": \"sint labore ullamco\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-backups"
									],
									"query": [
										{
											"key": "name",
											"value": "incididunt in consequat do",
											"description": "Name of the component requesting a backup."
										}
									]
								},
								"description": "Creates the server disaster recovery backup.\n> This endpoint supports execution by the following roles: admin,user\n"
							},
							"response": [
								{
									"name": "OK. Creates the server disaster recovery backup.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "name",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "name",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "name",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "name",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"backupConsistencyType\": \"enim in dolore culpa\",\n    \"checksum\": \"irure eiusmod consectetur laboris tempor\",\n    \"components\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"consistency\": \"sunt magna occaecat\",\n    \"creationTime\": \"1970-07-15T15:41:59.531Z\",\n    \"elapsedSeconds\": 24040007,\n    \"error\": \"est in laborum esse\",\n    \"hostname\": \"commodo incididunt\",\n    \"id\": \"dolore voluptate sit\",\n    \"lockboxPassphrase\": \"labore laborum\",\n    \"mfrManifestId\": \"dolor \",\n    \"mfrReplicationId\": \"qui\",\n    \"name\": \"id mollit anim\",\n    \"noScheduledStorageAccess\": false,\n    \"nodeId\": \"do sunt dolore laboris voluptate\",\n    \"recover\": true,\n    \"sequenceNumber\": 4900376,\n    \"sizeInBytes\": 65992564,\n    \"state\": \"dolor ut ad\",\n    \"version\": \"dolor magna mollit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-backups?name=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-backups"
											],
											"query": [
												{
													"key": "name",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "server-disaster-recovery-configurations",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get server disaster recovery configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "default",
													"description": "(Required) If you specify ID as default, you get the integrated Integrated Storage configuration."
												}
											]
										},
										"description": "Retrieves the server disaster recovery configuration by its ID.\n> This endpoint supports execution by the following roles: admin,user\n"
									},
									"response": [
										{
											"name": "OK. Retrieves the server disaster recovery configuration by its ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"repositoryHost\": \"amet laborum\",\n \"repositoryPath\": \"commodo tempor id consectetur\",\n \"type\": \"sint sed dolor Excepteur consequat\",\n \"backupsEnabled\": false,\n \"credentialId\": \"fugiat ad in qui elit\",\n \"credentialPassword\": \"veniam ipsum\",\n \"credentialUsername\": \"sint\",\n \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
										},
										{
											"name": "No content.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update server disaster recovery configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Server DR backup ID sent in request."
												}
											]
										},
										"description": "Updates the server disaster recovery configuration by its ID.\n> This endpoint supports execution by the following roles: admin,user\n"
									},
									"response": [
										{
											"name": "OK. Updates the server disaster recovery configuration by its ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"repositoryHost\": \"amet laborum\",\n    \"repositoryPath\": \"commodo tempor id consectetur\",\n    \"type\": \"sint sed dolor Excepteur consequat\",\n    \"backupsEnabled\": false,\n    \"credentialId\": \"fugiat ad in qui elit\",\n    \"credentialPassword\": \"veniam ipsum\",\n    \"credentialUsername\": \"sint\",\n    \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n    \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"server-disaster-recovery-configurations",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all server disaster recovery configurations.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-configurations"
									]
								},
								"description": "Retrieves a list of all server disaster recovery configurations. The configurations detail includes the repository filesystem (NFS or BoostFS), repository host, repository path, DD Boost credential ID, type, and backupsEnabled flag. The configuration contains server disaster recovery type which specifying data domain system or integrated storage system supports currently in server disaster recovery backup.\n\nGET /api/v2/server-disaster-recovery-configurations produces new output collected from the data model, including some of the defined fields that toggle the ability for a component to generate backups. The ability to disable a component's backup will be exposed by the UI and the user can optionally change the value. A change of the element bound to the enable/disable backup for the specific component should trigger a PUT /api/v2/server-disaster-recovery-configurations to update the field in the data model, the change should be reflected to the ES index_data_component.\n> This endpoint supports execution by the following roles: admin,user\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "OK. Retrieves a list of all server disaster recovery configurations. The configurations contain unique id, repository host name, repository path, type, and backupsEnabled switch.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"repositoryHost\": \"amet laborum\",\n \"repositoryPath\": \"commodo tempor id consectetur\",\n \"type\": \"sint sed dolor Excepteur consequat\",\n \"backupsEnabled\": false,\n \"credentialId\": \"fugiat ad in qui elit\",\n \"credentialPassword\": \"veniam ipsum\",\n \"credentialUsername\": \"sint\",\n \"id\": \"eiusmod adipisicing velit Ut nostrud\",\n \"repositoryFilesystem\": \"quis cupidatat ipsum eu\"\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation. Errors can be like malformed request syntax, invalid request message parameters, or deceptive request routing etc.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request is Forbidden. An error response indicates that the client's request is formed correctly, but the REST API refuses to honor it, i.e. the user does not have the necessary permissions for the resource.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The internal server error with this response status code whenever they execute some request handler code that raises an exception.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-configurations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"server-disaster-recovery-configurations"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "service-level-agreements",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete service level agreement by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the service level agreement."
												}
											]
										},
										"description": "Deletes a service level agreement by ID. The service level agreement contains mutliple service level objectives. The service level objective defines a compliance check item for data protection.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the service level agreement.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get a service level agreement by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements",
												":id"
											],
											"query": [
												{
													"key": "includingSummary",
													"value": "false",
													"description": "Including summary calculation"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the service level agreement."
												}
											]
										},
										"description": "Retrieves a service level agreement by ID. The service level agreement contains mutliple service level objectives. The service level objective defines a compliance check item for data protection.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the service level agreement.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n \"description\": \"deserunt ut incididunt\",\n \"enabled\": true,\n \"id\": \"irure anim laboris do\",\n \"name\": \"dolore Lorem pariatur voluptate irure\",\n \"serviceLevelObjectives\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"stageType\": \"CDR\",\n \"summary\": {\n  \"outOfComplianceAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"outOfComplianceObjectives\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"policiesAtRisk\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPolicies\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										{
											"name": "The requested service level agreement does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id?includingSummary=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"query": [
														{
															"key": "includingSummary",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update service level agreement by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the service level agreement."
												}
											]
										},
										"description": "Updates a service level agreement by ID. The service level agreement contains mutliple service level objectives. The service level objective defines a compliance check item for data protection.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the service level agreement.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n \"description\": \"deserunt ut incididunt\",\n \"enabled\": true,\n \"id\": \"irure anim laboris do\",\n \"name\": \"dolore Lorem pariatur voluptate irure\",\n \"serviceLevelObjectives\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"stageType\": \"CDR\",\n \"summary\": {\n  \"outOfComplianceAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"outOfComplianceObjectives\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"policiesAtRisk\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPolicies\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/service-level-agreements/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"service-level-agreements",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all service level agreements.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service-level-agreements"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "includingSummary",
											"value": "false",
											"description": "Including summary calculation"
										}
									]
								},
								"description": "Retrieves all service level agreements. Each service level agreement contains mutliple service level objectives. The service level objective defines a compliance check item for data protection.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available service level agreements.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "includingSummary",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "includingSummary",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "includingSummary",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "includingSummary",
													"value": "false"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&includingSummary=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "includingSummary",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Create a service level agreement.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"createdAt\": \"1959-07-06T00:11:13.166Z\",\n    \"description\": \"Ut ullamco mollit in\",\n    \"enabled\": true,\n    \"id\": \"officia sunt\",\n    \"name\": \"do nostrud consectetur officia\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"REPLICATION\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1975-11-19T02:22:35.132Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/service-level-agreements",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service-level-agreements"
									]
								},
								"description": "Creates a service level agreement. The service level agreement contains mutliple service level objectives. The service level objective defines a compliance check item for data protection.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n \"description\": \"deserunt ut incididunt\",\n \"enabled\": true,\n \"id\": \"irure anim laboris do\",\n \"name\": \"dolore Lorem pariatur voluptate irure\",\n \"serviceLevelObjectives\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"stageType\": \"CDR\",\n \"summary\": {\n  \"outOfComplianceAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"outOfComplianceObjectives\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"policiesAtRisk\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPolicies\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
								},
								{
									"name": "Successfully created the service sevel agreement.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n \"description\": \"deserunt ut incididunt\",\n \"enabled\": true,\n \"id\": \"irure anim laboris do\",\n \"name\": \"dolore Lorem pariatur voluptate irure\",\n \"serviceLevelObjectives\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"stageType\": \"CDR\",\n \"summary\": {\n  \"outOfComplianceAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"outOfComplianceObjectives\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"policiesAtRisk\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalAssets\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPolicies\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2000-05-18T10:47:23.929Z\",\n    \"description\": \"deserunt ut incididunt\",\n    \"enabled\": true,\n    \"id\": \"irure anim laboris do\",\n    \"name\": \"dolore Lorem pariatur voluptate irure\",\n    \"serviceLevelObjectives\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"stageType\": \"CDR\",\n    \"summary\": {\n        \"outOfComplianceAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"outOfComplianceObjectives\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"policiesAtRisk\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalAssets\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"totalPolicies\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"updatedAt\": \"1991-12-20T22:01:53.350Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-agreements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-agreements"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "service-level-objectives",
					"item": [
						{
							"name": "Get all service level objectives.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service-level-objectives"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all service level objectives. The each service level objective defines one compliance type. The compliance type must follow each service service level objective that is required.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available service level objectives.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Get service level objective by ID.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service-level-objectives",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "incididunt in consequat do",
											"description": "(Required) Service level objective ID."
										}
									]
								},
								"description": "Retrieves service level objective by ID. The each service level objective defines one compliance type. The compliance type must follow each service service level objective that is required.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned the service level objective.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"description\": \"cillum deserunt labore\",\n \"id\": \"est anim\",\n \"mandatory\": true,\n \"name\": \"velit enim\",\n \"order\": 76984121,\n \"ruleExecutionClass\": \"amet reprehenderit consectetur occaecat adi\",\n \"stageType\": \"PROTECTION\",\n \"valueCardinality\": \"SINGLE\"\n}"
								},
								{
									"name": "The requested service level objective does not exist.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/service-level-objectives/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"service-level-objectives",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "smtp",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete SMTP configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) SMTP configuration ID."
												}
											]
										},
										"description": "Deletes SMTP configuration by ID.\nNo email is sent once SMTP configuration is deleted.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successful operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"incididunt consequat non dolore officia\",\n \"mailServer\": \"mollit ex quis\",\n \"mailFrom\": \"veniam\",\n \"password\": \"in cupidatat nisi ipsum\",\n \"port\": -681707,\n \"username\": \"ipsum commodo\"\n}"
										},
										{
											"name": "Deleted the SMTP with the specified ID.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find a SMTP configuration with the specified ID.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get SMTP configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Unique identifier for smtp",
													"description": "(Required) SMTP configuration ID."
												}
											]
										},
										"description": "Retrieves SMTP configuration by the specified ID.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
									},
									"response": [
										{
											"name": "Found and returned the SMTP configuration with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"incididunt consequat non dolore officia\",\n \"mailServer\": \"mollit ex quis\",\n \"mailFrom\": \"veniam\",\n \"password\": \"in cupidatat nisi ipsum\",\n \"port\": -681707,\n \"username\": \"ipsum commodo\"\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find an SMTP configuration with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update SMTP configuration by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) SMTP configuration ID sent in request."
												}
											]
										},
										"description": "Updates SMTP configuration by ID.\nYou can update the mailserver, mailFrom, and mailRecipient.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the SMTP configuration.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"incididunt consequat non dolore officia\",\n \"mailServer\": \"mollit ex quis\",\n \"mailFrom\": \"veniam\",\n \"password\": \"in cupidatat nisi ipsum\",\n \"port\": -681707,\n \"username\": \"ipsum commodo\"\n}"
										},
										{
											"name": "The submitted SMTP configuration has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot change the SMTP configuration in the current node state.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Cannot find an SMTP configuration with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/smtp/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"smtp",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all SMTP configuration information.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"smtp"
									]
								},
								"description": "Retrieves Simple Mail Transfer Protocol (SMTP) configuration. Returns the list of SMTP setup in the appliance.\nReturns only one SMTP configuration.\nReturns ID, mailserver, mailFrom, mailRecipient, and port.\n\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
							},
							"response": [
								{
									"name": "Located and returned the available SMTP configuration successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "Filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create SMTP configuration.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/smtp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"smtp"
									]
								},
								"description": "Creates the SMTP configuration, which requires mailserver, mailFrom:admin(email), and mailRecipient:email.\nThe email setup on the PowerProtect Data Manager System Settings area enables you to configure SMTP email server information to send emails for resetting local user passwords and customized alert notifications.\nOnly one SMTP configuration is allowed.\n\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successful operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"incididunt consequat non dolore officia\",\n \"mailServer\": \"mollit ex quis\",\n \"mailFrom\": \"veniam\",\n \"password\": \"in cupidatat nisi ipsum\",\n \"port\": -681707,\n \"username\": \"ipsum commodo\"\n}"
								},
								{
									"name": "Created new SMTP.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The submitted SMTP has a syntax error.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Only one SMTP is allowed.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Cannot find a SMTP with the specified ID.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"incididunt consequat non dolore officia\",\n    \"mailServer\": \"mollit ex quis\",\n    \"mailFrom\": \"veniam\",\n    \"password\": \"in cupidatat nisi ipsum\",\n    \"port\": -681707,\n    \"username\": \"ipsum commodo\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Send a test email.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mailServer\": \"nostrud esse consequat\",\n    \"recipient\": \"qui eu velit Duis\",\n    \"mailFrom\": \"sed pariatur cupidatat\",\n    \"password\": \"aliqua\",\n    \"port\": -58197597,\n    \"username\": \"do commodo dolor dolore\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/smtp/test",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"smtp",
										"test"
									]
								},
								"description": "Sends a test email.\nRequires mailRecipient and mailserver. Includes mailFrom: email.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Test email sent successfully.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mailServer\": \"nostrud esse consequat\",\n    \"recipient\": \"qui eu velit Duis\",\n    \"mailFrom\": \"sed pariatur cupidatat\",\n    \"password\": \"aliqua\",\n    \"port\": -58197597,\n    \"username\": \"do commodo dolor dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												"test"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mailServer\": \"nostrud esse consequat\",\n    \"recipient\": \"qui eu velit Duis\",\n    \"mailFrom\": \"sed pariatur cupidatat\",\n    \"password\": \"aliqua\",\n    \"port\": -58197597,\n    \"username\": \"do commodo dolor dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												"test"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mailServer\": \"nostrud esse consequat\",\n    \"recipient\": \"qui eu velit Duis\",\n    \"mailFrom\": \"sed pariatur cupidatat\",\n    \"password\": \"aliqua\",\n    \"port\": -58197597,\n    \"username\": \"do commodo dolor dolore\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/smtp/test",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"smtp",
												"test"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "storage-systems",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get a storage system by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) ID of the storage system."
												}
											]
										},
										"description": "Retrieves a storage system by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully returned the storage system.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"_embedded\": {\n  \"inventorySource\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"capacityUtilization\": -70205296.64504015,\n \"createdAt\": \"2020-10-04T08:16:01.952Z\",\n \"ddLocationId\": \"in eiusmod amet nisi\",\n \"details\": {\n  \"dataDomain\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"recoverPoint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmax\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"xio\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"enim dolore nisi\",\n \"lastDiscovered\": \"1994-09-29T04:28:22.687Z\",\n \"lastDiscoveryAt\": \"1982-11-24T07:47:45.348Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryStatus\": \"DELETED\",\n \"lastDiscoveryTaskId\": \"qui et ex Ut\",\n \"local\": false,\n \"locationId\": \"sed tempor\",\n \"name\": \"incididunt quis proid\",\n \"operatingSystem\": {\n  \"name\": \"laborum minim\",\n  \"version\": \"sint irure minim\"\n },\n \"type\": \"XTREMIO_STORAGE_SYSTEM\",\n \"updatedAt\": \"1957-06-09T09:34:55.082Z\"\n}"
										},
										{
											"name": "The requested storage system does not exist.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Update storage system location by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The storage system ID."
												}
											]
										},
										"description": "Updates storage system location by ID.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the storage system.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"_embedded\": {\n  \"inventorySource\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  },\n  \"location\": {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"name\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n },\n \"capacityUtilization\": -70205296.64504015,\n \"createdAt\": \"2020-10-04T08:16:01.952Z\",\n \"ddLocationId\": \"in eiusmod amet nisi\",\n \"details\": {\n  \"dataDomain\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"recoverPoint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"vmax\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"xio\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"id\": \"enim dolore nisi\",\n \"lastDiscovered\": \"1994-09-29T04:28:22.687Z\",\n \"lastDiscoveryAt\": \"1982-11-24T07:47:45.348Z\",\n \"lastDiscoveryResult\": {\n  \"error\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"status\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"summaries\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"lastDiscoveryStatus\": \"DELETED\",\n \"lastDiscoveryTaskId\": \"qui et ex Ut\",\n \"local\": false,\n \"locationId\": \"sed tempor\",\n \"name\": \"incididunt quis proid\",\n \"operatingSystem\": {\n  \"name\": \"laborum minim\",\n  \"version\": \"sint irure minim\"\n },\n \"type\": \"XTREMIO_STORAGE_SYSTEM\",\n \"updatedAt\": \"1957-06-09T09:34:55.082Z\"\n}"
										},
										{
											"name": "The request is not valid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not allowed to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"capacityUtilization\": 23994547.674223155,\n    \"createdAt\": \"1972-09-19T05:01:54.572Z\",\n    \"ddLocationId\": \"nisi magna\",\n    \"details\": {\n        \"dataDomain\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"recoverPoint\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vmax\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"xio\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"id\": \"aliquip est\",\n    \"lastDiscovered\": \"2004-03-10T13:27:17.554Z\",\n    \"lastDiscoveryResult\": {\n        \"error\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"summaries\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"lastDiscoveryStatus\": \"DETECTED\",\n    \"local\": false,\n    \"locationId\": \"sit do\",\n    \"name\": \"sunt\",\n    \"operatingSystem\": {\n        \"name\": \"dolore Excepteur sed in\",\n        \"version\": \"dolore ad anim in\"\n    },\n    \"type\": \"POWER_PROTECT_SYSTEM\",\n    \"updatedAt\": \"1971-11-29T02:14:24.067Z\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/storage-systems/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"storage-systems",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get all storage systems.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"storage-systems"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "supportedAssetType",
											"value": "MICROSOFT_SQL_DATABASE",
											"description": "The asset type the returned storage systems could support."
										}
									]
								},
								"description": "Retrieves all **Storage Systems** in the PowerProtect Data Manager including Data Domain systems, PowerProtect systems, and other local or external storage systems.\n**Storage Systems** are used to store the asset data regarding backing up or replicating assets.\nThis API request belongs to the storage management API.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
							},
							"response": [
								{
									"name": "Successfully returned available storage systems.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "supportedAssetType",
													"value": "MICROSOFT_SQL_DATABASE"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "supportedAssetType",
													"value": "MICROSOFT_SQL_DATABASE"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not allowed to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "supportedAssetType",
													"value": "MICROSOFT_SQL_DATABASE"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "supportedAssetType",
													"value": "MICROSOFT_SQL_DATABASE"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/storage-systems?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&supportedAssetType=MICROSOFT_SQL_DATABASE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"storage-systems"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "supportedAssetType",
													"value": "MICROSOFT_SQL_DATABASE"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "upgrade-packages",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete an uploaded upgrade package by its ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Deletes an upgrade package that is not installing nor has been installed. Packages in the processing state cannot be deleted.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "The upgrade package is succesfully deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The upgrade package cannot be deleted.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when an error occurs.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Get upgrade package by its ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Retrieves the details of an upgrade package by the specified ID, including its state, name, installed date, and so on.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Found and returned the upgrade package with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when an error occurs.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Install the upgrade package uploaded to the appliance.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id"
											],
											"query": [
												{
													"key": "forceUpgrade",
													"value": "true",
													"description": "Use this query parameter to force upgrade the PowerProtect Data Manager."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Installs upgrade package only if the state of the upgrade package is AVAILABLE or FAILED. To install the upgrade package, set state=INSTALLED in the PUT request body.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Request accepted and is upgrading with the upgrade package of the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The submitted upgrade package has a syntax error.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The upgrade package with specified ID is not allowed for upgrade in the current state.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Received when sending PUT request without query parameter \"forceUpgrade=true\". The request was failed in validation process.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Precondition Failed",
											"code": 412,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when error occurs.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"nisi off\",\n    \"state\": \"INSTALLED_WITH_ERRORS\",\n    \"certificateTrustedByUser\": false,\n    \"lockboxPassphrase\": \"et enim\",\n    \"upgradeToken\": \"aute\",\n    \"certificateDetailsMap\": {\n        \"issuerDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"md5\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notAfter\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"notBefore\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKey\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyExponent\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeyModulus\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"publicKeySize\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serialNumber\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha1\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sha256\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmName\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"signatureAlgorithmOID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subjectDN\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"version\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"criticality\": \"URGENT\",\n    \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n    \"description\": \"ea qui aute fu\",\n    \"errorMessage\": \"u\",\n    \"eula\": {\n        \"productEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"productEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaAccepted\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"telemetryEulaChanged\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"fileName\": \"in dolor incididunt dolor\",\n    \"fromVersion\": \"enim commodo culpa\",\n    \"initiationType\": \"CUSTOMER\",\n    \"lockboxResetRequired\": false,\n    \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n    \"maintenanceUpgrade\": false,\n    \"minimumVersion\": \"ad laborum irure esse\",\n    \"name\": \"quis ex proident\",\n    \"packageDelivery\": \"MFT\",\n    \"packageVersion\": \"cillum magna dolor ea\",\n    \"preUpgradeHealthCheck\": {\n        \"endTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"initiated\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"startTime\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"rebootRequired\": true,\n    \"releaseNotesLink\": \"non nostrud culpa veniam\",\n    \"sizeInBytes\": 63931774,\n    \"subComponentDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"type\": \"PATCH\",\n    \"upgradeError\": {\n        \"reason\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageArgs\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"messageID\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"remediation\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"upgradeMode\": \"MDU\",\n    \"upgradeStarted\": \"exercitation irure am\",\n    \"validationDetails\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id?forceUpgrade=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id"
													],
													"query": [
														{
															"key": "forceUpgrade",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Precheck upgrade package by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id",
												"precheck"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Enables you to precheck an upgrade package by the specified ID. The precheck verifies that all components are ready for upgrade.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Found and return the information of specific package.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The precheck upgrade package request was accepted and is being processed.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The precheck upgrade package is not allowed in the current state.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when an error occurs.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Cancel the precheck.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id",
												"precheck-cancellation"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Cancel the precheck for an upgrade package by specifying its ID. Use this API when the upgrade package is stopped in the PROCESSING state. When the cancellation completes, the upgrade package state changes to PRECHECK_FAILED.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Precheck cancellation request was accepted and is being processed.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Upgrade precheck cancellation request is not allowed in the current state.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when an error occurs.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/precheck-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"precheck-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								},
								{
									"name": "Cancel the upgrade.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages",
												":id",
												"upgrade-cancellation"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) The given package ID for upgrade."
												}
											]
										},
										"description": "Cancel the upgrade for an upgrade package by specifying its ID. Use this API when the upgrade package is stopped in the INSTALLED_CORE state. When cancellation is complete, the upgrade package state changes to INSTALLED_WITH_ERRORS.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Upgrade cancellation request was accepted and is being processed.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"nisi off\",\n \"state\": \"INSTALLED_WITH_ERRORS\",\n \"certificateTrustedByUser\": false,\n \"lockboxPassphrase\": \"et enim\",\n \"upgradeToken\": \"aute\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1949-03-16T02:33:24.794Z\",\n \"description\": \"ea qui aute fu\",\n \"errorMessage\": \"u\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"in dolor incididunt dolor\",\n \"fromVersion\": \"enim commodo culpa\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": false,\n \"madeAvailable\": \"1958-11-02T15:36:43.880Z\",\n \"maintenanceUpgrade\": false,\n \"minimumVersion\": \"ad laborum irure esse\",\n \"name\": \"quis ex proident\",\n \"packageDelivery\": \"MFT\",\n \"packageVersion\": \"cillum magna dolor ea\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": true,\n \"releaseNotesLink\": \"non nostrud culpa veniam\",\n \"sizeInBytes\": 63931774,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"MDU\",\n \"upgradeStarted\": \"exercitation irure am\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
										},
										{
											"name": "The requestor is not authorized to perform this operation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Cannot find an upgrade package with the specified ID.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "Upgrade cancellation request is not allowed in the current state.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "An unexpected error prevented the server from fulfilling your request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										},
										{
											"name": "The default response when an error occurs.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/upgrade-packages/:id/upgrade-cancellation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"upgrade-packages",
														":id",
														"upgrade-cancellation"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get list of all upgrade packages.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"upgrade-packages"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves a list of all upgrade packages. This API call checks the upgrade history of the system. If the system has been upgraded multiple times, the list includes the installed upgrade packages. At any time, only one package that has not been installed can exist.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Located and returned all upgrade packages successfully.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The filter syntax is not valid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The default response when error occurs.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						},
						{
							"name": "Upload an upgrade package to the appliance.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "nulla Ut velit",
											"description": "Upgrade package file to be uploaded.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/upgrade-packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"upgrade-packages"
									]
								},
								"description": "Uploads only one upgrade package at a time. To upload another, install or delete the existing upgrade package.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "The create upgrade package request was accepted and is being processed.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"enim commodo dolore\",\n \"state\": \"INVALID\",\n \"certificateTrustedByUser\": true,\n \"lockboxPassphrase\": \"Duis\",\n \"upgradeToken\": \"in commodo nisi ex dolor\",\n \"certificateDetailsMap\": {\n  \"issuerDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"md5\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notAfter\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"notBefore\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKey\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyExponent\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeyModulus\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"publicKeySize\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"serialNumber\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha1\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"sha256\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmName\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"signatureAlgorithmOID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"subjectDN\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"version\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"criticality\": \"URGENT\",\n \"dateInstalled\": \"1993-01-16T12:48:06.522Z\",\n \"description\": \"quis minim\",\n \"errorMessage\": \"ci\",\n \"eula\": {\n  \"productEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"productEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaAccepted\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"telemetryEulaChanged\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"fileName\": \"Ut sed\",\n \"fromVersion\": \"ad eu nulla velit anim\",\n \"initiationType\": \"CUSTOMER\",\n \"lockboxResetRequired\": true,\n \"madeAvailable\": \"2010-04-27T19:31:21.087Z\",\n \"maintenanceUpgrade\": true,\n \"minimumVersion\": \"ut exercitation \",\n \"name\": \"ea in pariatur laboris\",\n \"packageDelivery\": \"UPLOAD\",\n \"packageVersion\": \"aliquip dolo\",\n \"preUpgradeHealthCheck\": {\n  \"endTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"initiated\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"startTime\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"rebootRequired\": false,\n \"releaseNotesLink\": \"veniam\",\n \"sizeInBytes\": 31442689,\n \"subComponentDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"type\": \"PATCH\",\n \"upgradeError\": {\n  \"reason\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"message\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageArgs\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"messageID\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"remediation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"upgradeMode\": \"DU\",\n \"upgradeStarted\": \"eu ad sed occaecat Ut\",\n \"validationDetails\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
								},
								{
									"name": "The uploaded upgrade package is invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The requestor is not authorized to perform this operation.\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "It is not allowed to upload upgrade package in the current state.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "Unable to parse the request body.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "An unexpected error prevented the server from fulfilling your request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								},
								{
									"name": "The default response when error occurs.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "nulla Ut velit",
													"description": "Upgrade package file to be uploaded.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/upgrade-packages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"upgrade-packages"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
								}
							]
						}
					]
				},
				{
					"name": "user-groups",
					"item": [
						{
							"name": "{user Group Id}",
							"item": [
								{
									"name": "Delete a user group.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups",
												":userGroupId"
											],
											"variable": [
												{
													"key": "userGroupId",
													"value": "incididunt in consequat do",
													"description": "(Required) User group ID."
												}
											]
										},
										"description": "Deletes a user group by ID. When the user group is deleted, the users that are defined by the user group no longer have access to the system and can no longer perform actions.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully delete the user group.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user group was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get user group.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups",
												":userGroupId"
											],
											"variable": [
												{
													"key": "userGroupId",
													"value": "incididunt in consequat do",
													"description": "(Required) User group ID."
												}
											]
										},
										"description": "Retrieves a user group by ID, which is an identity source group-to-role mapping. User groups define who has access to the system and the actions they can perform based on their role.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved the specified user group.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"tempor cupidatat\",\n \"identitySourceGroups\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"createdDate\": \"1965-11-06T19:50:00.416Z\",\n \"id\": \"amet eiusmod ut\",\n \"roleId\": \"ex velit\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user group was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a user group.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"tempor cupidatat\",\n    \"identitySourceGroups\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"createdDate\": \"1965-11-06T19:50:00.416Z\",\n    \"id\": \"amet eiusmod ut\",\n    \"roleId\": \"ex velit\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups",
												":userGroupId"
											],
											"variable": [
												{
													"key": "userGroupId",
													"value": "incididunt in consequat do",
													"description": "(Required) User group ID."
												}
											]
										},
										"description": "Updates a user group by ID. When the user group is updated, the users that are defined by the user group have updated privileges to perform actions that are defined by their role.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the user group.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"name\": \"tempor cupidatat\",\n \"identitySourceGroups\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"createdDate\": \"1965-11-06T19:50:00.416Z\",\n \"id\": \"amet eiusmod ut\",\n \"roleId\": \"ex velit\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user group was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/user-groups/:userGroupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"user-groups",
														":userGroupId"
													],
													"variable": [
														{
															"key": "userGroupId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all user groups.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"user-groups"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "role",
											"value": "incididunt in consequat do",
											"description": "Filter the user groups by role ID or role name."
										}
									]
								},
								"description": "Retrieves all user groups, which are identity source group-to-role mappings. These user groups define who has access to the system and the actions they can perform based on their role.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully retrieved all the user groups.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a user group.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"eu esse reprehenderit ullamco mollit\",\n    \"identitySourceGroups\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ],\n    \"createdDate\": \"2019-02-21T01:01:12.711Z\",\n    \"id\": \"sunt non\",\n    \"roleId\": \"exercitation sed officia et\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/user-groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"user-groups"
									]
								},
								"description": "Creates a user group, which is an identity source group-to-role mapping. These user groups define who has access to the system and the actions they can perform based on their role.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successfully created the user group.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"tempor cupidatat\",\n \"identitySourceGroups\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"createdDate\": \"1965-11-06T19:50:00.416Z\",\n \"id\": \"amet eiusmod ut\",\n \"roleId\": \"ex velit\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Conflict.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/user-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"user-groups"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{user Id}",
							"item": [
								{
									"name": "Delete a local system user by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "incididunt in consequat do",
													"description": "(Required) User ID."
												}
											]
										},
										"description": "Deletes a user by ID. When the user is deleted, the user can no longer access the system or perform any actions.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the specified user.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a local system user by ID.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "incididunt in consequat do",
													"description": "(Required) User ID."
												}
											]
										},
										"description": "Retrieves the user that is specified by ID. The list of user information includes information such as name, username, and roles.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved the specified user.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"username\": \"1Q0FIWZ\",\n \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n \"emailAddress\": \"sit\",\n \"firstName\": \"qui\",\n \"forcePasswordChange\": true,\n \"id\": \"\",\n \"lastName\": \"tempor fugiat voluptate aute\",\n \"password\": \"sed esse fugiat consequat Excepteur\",\n \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a local system user.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Logged in user password to modify sensitive data.",
												"key": "x-auth-password",
												"value": "incididunt in consequat do"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "incididunt in consequat do",
													"description": "(Required) User ID."
												}
											]
										},
										"description": "Updates a user by ID. When updated, the user information is available. If the role changes, the user can perform only those actions that are defined by the role.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the user properties.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"username\": \"1Q0FIWZ\",\n \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n \"emailAddress\": \"sit\",\n \"firstName\": \"qui\",\n \"forcePasswordChange\": true,\n \"id\": \"\",\n \"lastName\": \"tempor fugiat voluptate aute\",\n \"password\": \"sed esse fugiat consequat Excepteur\",\n \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										{
											"name": "The request body is either invalid or is missing the required fields.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user does not have the proper privileges to perform the action.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The user was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Conflict.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Expectation failed.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Expectation Failed",
											"code": 417,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unprocessable entity.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Logged in user password to modify sensitive data.",
														"key": "x-auth-password",
														"value": "incididunt in consequat do"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "userId"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the local system users.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										},
										{
											"key": "role",
											"value": "incididunt in consequat do",
											"description": "Filters the user by role ID or role name."
										}
									]
								},
								"description": "Retrieves the list of all local users. The list of user information includes user information such as name, username, and roles.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the list of users.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/users?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&role=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												},
												{
													"key": "role",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a local system user.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"users"
									]
								},
								"description": "Creates a user. Once the user is created, the user can access the system and perform actions that are defined by the user role.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successfully created the user.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"username\": \"1Q0FIWZ\",\n \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n \"emailAddress\": \"sit\",\n \"firstName\": \"qui\",\n \"forcePasswordChange\": true,\n \"id\": \"\",\n \"lastName\": \"tempor fugiat voluptate aute\",\n \"password\": \"sed esse fugiat consequat Excepteur\",\n \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The user does not have the proper privileges to perform the action.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Conflict",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"1Q0FIWZ\",\n    \"createdDate\": \"2013-06-04T03:36:44.403Z\",\n    \"emailAddress\": \"sit\",\n    \"firstName\": \"qui\",\n    \"forcePasswordChange\": true,\n    \"id\": \"\",\n    \"lastName\": \"tempor fugiat voluptate aute\",\n    \"password\": \"sed esse fugiat consequat Excepteur\",\n    \"roleId\": \"reprehenderit fugiat sunt tempor\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"users"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "whitelist",
					"item": [
						{
							"name": "automatic",
							"item": [
								{
									"name": "Get automatic whitelist.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												"automatic"
											]
										},
										"description": "Retrieves the automatic whitelist element, if available. If the automatic whitelist is not set, HTTP 404 is returned. If the automatic whitelist is set, HTTP 200 is returned with the corresponding automatic whitelist element. The ID of the automatic whitelist element is always the same.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved the automatic whitelist entry.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The automatic whitelist entry was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Enable automatic whitelisting.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												"automatic"
											]
										},
										"description": "Enables automatic whitelist by creating whitelist entry. IP address must be set to 0.0.0.0 and state must be set to AUTOMATIC in the payload. The expiresAt property specifies when the automatic whitelist should expire.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully enabled the automatic whitelist feature.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/automatic",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														"automatic"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Delete a whitelist entry.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Whitelist ID."
												}
											]
										},
										"description": "Deletes a whitelist entry by the specified ID. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully deleted the whitelist entry.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The whitelist entry was not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get a whitelist entry.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Whitelist ID."
												}
											]
										},
										"description": "Retrieves a whitelist entry by the specified ID. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
									},
									"response": [
										{
											"name": "Successfully retrieved the whitelist entry.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The whitelist entry was not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Patch a whitelist entry.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Whitelist ID."
												}
											]
										},
										"description": "Updates specific properties in the whitelist by the specified ID. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the whitelist entry.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a whitelist entry.",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "incididunt in consequat do",
													"description": "(Required) Whitelist ID."
												}
											]
										},
										"description": "Updates a whitelist entry by the specified ID. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration.\n> This endpoint supports execution by the following roles: admin\n"
									},
									"response": [
										{
											"name": "Successfully updated the whitelist entry.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
										},
										{
											"name": "The authorization token is either invalid or expired.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "The whitelist entry was not found.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An internal server error occurred. Please contact the system administrator.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/whitelist/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"whitelist",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all the whitelist entries.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/whitelist?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"whitelist"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "pageSize",
											"value": "100",
											"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do",
											"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do",
											"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
										}
									]
								},
								"description": "Retrieves all whitelist entries. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the whitelist entries.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "incididunt in consequat do"
												},
												{
													"key": "orderby",
													"value": "incididunt in consequat do"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a whitelist entry.",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n    \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n    \"id\": \"pariatur veniam elit aliquip\",\n    \"internal\": false,\n    \"ip\": \"cupidatat sed fugiat anim est\",\n    \"roleId\": \"dolore incididunt labore Excepteur\",\n    \"state\": \"AUTOMATIC\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/whitelist",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"whitelist"
									]
								},
								"description": "Creates a whitelist entry. The whitelist defines which hosts are either pending, approved, or rejected for application agent registration. Approved hosts can be approved for a user-defined period.\n> This endpoint supports execution by the following roles: admin\n"
							},
							"response": [
								{
									"name": "Successfully retrieved the whitelist entry.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"createdTime\": \"2003-07-09T06:17:35.230Z\",\n \"expiresAt\": \"1977-09-22T13:52:16.144Z\",\n \"id\": \"pariatur veniam elit aliquip\",\n \"internal\": false,\n \"ip\": \"cupidatat sed fugiat anim est\",\n \"roleId\": \"dolore incididunt labore Excepteur\",\n \"state\": \"AUTOMATIC\"\n}"
								},
								{
									"name": "The authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An internal server error occurred. Please contact the system administrator.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/whitelist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"whitelist"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get aggregation of state counts for activities.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"activity-metrics"
							],
							"query": [
								{
									"key": "createTime",
									"value": "1969-01-08T22:21:53.890Z",
									"description": "createTime gt \"2019-07-08T20:26:16.032Z\""
								},
								{
									"key": "state",
									"value": "dolor deserunt",
									"description": "state in (\"RUNNING\", \"QUEUED\", \"PENDING_CANCELLATION\")."
								}
							]
						},
						"description": "Retrieves aggregation metrics for jobs and job groups in different states.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully returned available resources.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activity-metrics"
									],
									"query": [
										{
											"key": "createTime",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "state",
											"value": "dolor deserunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"aggregation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n {\n  \"aggregation\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n]"
						},
						{
							"name": "The request is not valid. Check request body and/or filters.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activity-metrics"
									],
									"query": [
										{
											"key": "createTime",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "state",
											"value": "dolor deserunt"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authenticated.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activity-metrics"
									],
									"query": [
										{
											"key": "createTime",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "state",
											"value": "dolor deserunt"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor does not have required permissions.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activity-metrics"
									],
									"query": [
										{
											"key": "createTime",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "state",
											"value": "dolor deserunt"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "A server error prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/activity-metrics?createTime=1969-01-08T22:21:53.890Z&state=dolor deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"activity-metrics"
									],
									"query": [
										{
											"key": "createTime",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "state",
											"value": "dolor deserunt"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get the agent registration status.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"agent-registration-status"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								},
								{
									"key": "orderby",
									"value": "incididunt in consequat do",
									"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
								}
							]
						},
						"description": "Retrieves the agent registration status. You can filter and sort various fields.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully returned the result.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"agent-registration-status"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "Bad request. Invalid argument.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"agent-registration-status"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"agent-registration-status"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"agent-registration-status"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Service unavailable. Internal server error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/agent-registration-status?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"agent-registration-status"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get all Alert metrics.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"alert-metrics"
							],
							"query": [
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								}
							]
						},
						"description": "Retrieves all alert metrics posted within a given time interval and includes the number of unacknowledged critical, warning, and informational alerts.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully returned available alert metrics.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alert-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fromPostTime\": \"1981-12-10T05:30:00.685Z\",\n \"toPostTime\": \"1965-12-09T10:56:02.456Z\",\n \"unacknowledgedCriticalCount\": 55682391,\n \"unacknowledgedInformationalCount\": -51029379,\n \"unacknowledgedWarningCount\": 81704654\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alert-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authenticated to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alert-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alert-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/alert-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"alert-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Trigger manual backup for an asset.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/asset-backups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"asset-backups"
							]
						},
						"description": "Triggers a manual backup for a single asset. The asset must be in a protection policy.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successful operation. Returns asset ID, backup type, and task ID.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetId\": \"veniam\",\n \"backupType\": \"FULL\",\n \"taskId\": \"Ut quis labore\"\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "A resource with the specified ID is not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"pariatur\",\n    \"backupType\": \"AUTO_FULL\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-backups"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Export asset compliance details as CSV.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"asset-compliance-details"
							],
							"query": [
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								}
							]
						},
						"description": "Retrieves asset compliance details from compliance verification result, extracts some fields, and exports to CSV. This API can support multiple filters (for example: slaId, timeRange, and completionStatus).\n> This endpoint supports execution by the following roles: admin,user\n"
					},
					"response": [
						{
							"name": "Successfully returned a CSV file containing the asset compliance details.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-compliance-details"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-compliance-details"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-compliance-details"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-compliance-details"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-compliance-details?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-compliance-details"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Network assignment / unassignment on assets.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"asset-networks-batch"
							]
						},
						"description": "Initiates assset networks assignment / unassignment batch operation on selected asset ids.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully patched asset networks.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-networks-batch"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-networks-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-networks-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-networks-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/asset-networks-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"asset-networks-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update a batch of assets.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/assets-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"assets-batch"
							]
						},
						"description": "Update a batch of assets.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "The batch of assets have been update successfully.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-batch"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Some of the assets failed to update.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-batch"
									]
								}
							},
							"status": "Multi-Status (WebDAV) (RFC 4918)",
							"code": 207,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"responses\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "Error Response.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Delete multiple assets in batch.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"assets-deletion-batch"
							]
						},
						"description": "Delete multiple assets in batch.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "assets deletion process complete.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-deletion-batch"
									]
								}
							},
							"status": "Multi-Status (WebDAV) (RFC 4918)",
							"code": 207,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"responses\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-deletion-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-deletion-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-deletion-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets-deletion-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Sign a certificate signing request (CSR).",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/certificates-signing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"certificates-signing"
							]
						},
						"description": "Signs a CSR by providing the certificate content and the IP and FQDN of the external host. The IP of the external host must be added to the whitelist before signing the CSR.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin \n"
					},
					"response": [
						{
							"name": "Successfully signed CSR and returned the signed certificate.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"rootCA\": \"incididunt\",\n \"cert\": \"tempor incididunt v\",\n \"globalCA\": \"Excepteur est cupidatat minim anim\",\n \"id\": \"sunt aliquip id proident\",\n \"virtualHost\": \"eiusmod ut \"\n}"
						},
						{
							"name": "The request body is either invalid or is missing the required fields.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The Authorization token is either invalid or expired.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Request could not be processed because of a data conflict.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An issue has occurred on the system. Please contact the system administrator.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"csr\": \"deserunt consequat Duis\",\n    \"fqdn\": \"tempor aute\",\n    \"ips\": \"aute incididunt culpa et irure\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates-signing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates-signing"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Cloud DR target networks.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"cloud-dr-regions",
								":region",
								"networks"
							],
							"variable": [
								{
									"key": "region",
									"value": "incididunt in consequat do",
									"description": "(Required) Specific region."
								}
							]
						},
						"description": "Retrieves Cloud Disaster Recovery (Cloud DR) target networks for the specified region. Getting this information enables you to run a disaster recovery operation.\n> This endpoint supports execution by the following roles: user\n"
					},
					"response": [
						{
							"name": "The response is a list of all the available networks in the specified region.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-regions",
										":region",
										"networks"
									],
									"variable": [
										{
											"key": "region"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"pageInfo\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-regions",
										":region",
										"networks"
									],
									"variable": [
										{
											"key": "region"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-regions",
										":region",
										"networks"
									],
									"variable": [
										{
											"key": "region"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authenticated to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-regions",
										":region",
										"networks"
									],
									"variable": [
										{
											"key": "region"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-regions/:region/networks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-regions",
										":region",
										"networks"
									],
									"variable": [
										{
											"key": "region"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get CDRS version.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"cloud-dr-server-version"
							]
						},
						"description": "Retrieves the Cloud Disaster Recovery Server (CDRS) version.\n> This endpoint supports execution by the following roles: user\n"
					},
					"response": [
						{
							"name": "Successfully returned CDRS version.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"exercitation ad\"\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-version"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-version"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not authenticated to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-version"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-dr-server-version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-dr-server-version"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Creates cloud tiering process for an asset or a copy set.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"cloud-tiered-copies"
							]
						},
						"description": "Starts a process to move copies from the Data Domain active tier to the cloud tier/cloud unit. Copies are moved to the cloud for long-term retention.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Cloud tiering process for asset has been created. ",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-tiered-copies"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"taskId\": \"proident\"\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-tiered-copies"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-tiered-copies"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not authenticated to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-tiered-copies"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protectionCopySetId\": \"in dolor pariatur\",\n    \"assetId\": \"sed nostrud\",\n    \"cloudTierStageId\": \"adipisicing irure\",\n    \"protectionLifeCycleId\": \"eiusmod in\",\n    \"protectionPolicyId\": \"nostrud laboris occaecat Excepteur id\",\n    \"workflowTaskId\": \"sunt dolore sit qui\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/cloud-tiered-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"cloud-tiered-copies"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get all compliance details.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"compliance-details"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								},
								{
									"key": "orderby",
									"value": "incididunt in consequat do",
									"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
								}
							]
						},
						"description": "Retrieves the **Compliance Details**. **Compliance Detail** is a summary of the compliance result for one asset on one SLA on one stage of policy. The compliance result is one run of compliance verification for one asset for all SLAs that are assigned to the asset. Normally, one compliance result has multiple assigned SLAs. This API can support multiple filters (for example, assetId and completionTime).\n\nThis API has a known issue for pagination. The size is not the actual page size, but the compliance result size.  For example, if you request a page size of 10, you receive 10 compliance results. If each compliance result has 4 SLAs on different stages, the return size is 40 instead of 10. The totalPages and totalElements properties are for the compliance result instead of compliance detail.\n\n> This endpoint supports execution by the following roles: admin,user\n\n> This endpoint supports pagination with types: random,serial\n"
					},
					"response": [
						{
							"name": "Successfully returned available compliance results.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An default error response.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/compliance-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"compliance-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Change retention time for copies.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/copies-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"copies-batch"
							]
						},
						"description": "Changes retention time for copies. All asset types and backup types are supported. The maximum batch size is 1000.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Retention time change request has been accepted.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-batch"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"activityId\": \"mollit in\"\n}"
						},
						{
							"name": "The request is invalid.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Batch delete copies.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"copies-deletion-batch"
							],
							"query": [
								{
									"key": "cascadeDelete",
									"value": "false",
									"description": "For asset type without dependency, this option makes no difference. For asset type with dependency between copies:\n- cascadeDelete=true deletes all copies in the dependency chain.\n- cascadeDelete=false does not delete any copy with HTTP status code of 409 (Conflict).\n- By default, if cascadeDelete is not specified, it functions as if cascadeDelete is false."
								},
								{
									"key": "removeConfigurationOnly",
									"value": "false",
									"description": "- removeConfigurationOnly=true only deletes metadata from PowerProtect Data Manager without physically deleting from storage or application agent.\n- removeConfigurationOnly=false deletes copy from storage and application agent (if any). If successfully deletes from storage and application agent, then it deletes metadata from PowerProtect Data Manager.\n- By default, if removeConfigurationOnly is not specified, it behaves as if removeConfigurationOnly is false."
								},
								{
									"key": "forceRemoveLatestBackup",
									"value": "false",
									"description": "- forceRemoveLatestBackup=true enables deleting the latest backup. It may break the later chain, or for VM CBT backup, it may break the in-progress backup.\n- forceRemoveLatestBackup=false, if the specified copy is the latest backup, returns 409 error.\n- By default is forceRemoveLatestBackup is not specified, it behaves as if removeConfigurationOnly is false."
								},
								{
									"key": "forceDelete",
									"value": "false",
									"description": "- forceDelete=true enables force deleting without checking the state of the copies.\n- forceDelete=false if the copy with restoring/cloud tiering state, skip deleting the copy.\n- By default, if forceDeleteis not specified, it behaves as if forceDeleteis false."
								}
							]
						},
						"description": "Batch deletes copies from different assets and stage types."
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"responses\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-deletion-batch?cascadeDelete=false&removeConfigurationOnly=false&forceRemoveLatestBackup=false&forceDelete=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-deletion-batch"
									],
									"query": [
										{
											"key": "cascadeDelete",
											"value": "false"
										},
										{
											"key": "removeConfigurationOnly",
											"value": "false"
										},
										{
											"key": "forceRemoveLatestBackup",
											"value": "false"
										},
										{
											"key": "forceDelete",
											"value": "false"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Export deleted copies as CSV report.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"copies-report"
							],
							"query": [
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								}
							]
						},
						"description": "Retrieves deleted copies based on the filter provided and exports detailed information in the report in CSV format.\n> This endpoint supports execution by the following roles: admin,user\n"
					},
					"response": [
						{
							"name": "Successfully returned a CSV file containing the deleted copies detail information.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-report"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-report"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-report"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-report"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies-report?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies-report"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get copy metrics.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"copy-metrics"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								}
							]
						},
						"description": "Get copy metrics per asset."
					},
					"response": [
						{
							"name": "Successfully returned copy metrics.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copy-metrics"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copy-metrics"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copy-metrics"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copy-metrics"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/copy-metrics?page=1&pageSize=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copy-metrics"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Credentials batch update.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/credentials-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"credentials-batch"
							]
						},
						"description": "Credentials batch update for password\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Credential password batch request has been accepted.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-batch"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"activityId\": \"labore enim ullamco in\"\n}"
						},
						{
							"name": "The request is invalid.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete multiple credentials in batch.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"credentials-deletion-batch"
							]
						},
						"description": "Delete multiple credentials in batch.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully deleted all the credentials.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Some of the credentials are failed to be deleted.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "Multi-Status (WebDAV) (RFC 4918)",
							"code": 207,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"responses\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        },\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials-deletion-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials-deletion-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get all cloud units by storage system ID.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"datadomain-cloud-units",
								":storageSystemId"
							],
							"variable": [
								{
									"key": "storageSystemId",
									"value": "incididunt in consequat do",
									"description": "(Required) Storage system ID."
								}
							]
						},
						"description": "Provides a storage system ID to retrieve a list of all cloud units on the specified Data Domain storage system. The result contains information about the cloud profile and provider name.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "The request completed successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requested cloud unit does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-cloud-units/:storageSystemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-cloud-units",
										":storageSystemId"
									],
									"variable": [
										{
											"key": "storageSystemId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get all Data Domain system MTrees.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"datadomain-mtrees"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								},
								{
									"key": "orderby",
									"value": "incididunt in consequat do",
									"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
								}
							]
						},
						"description": "Retrieves a list of all Data Domain MTrees existing in all added Data Domain systems in the current PowerProtect system. The result contains information about each Mtree on the list such as the name, retention lock, storage system, and quotas.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "The request completed successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-mtrees"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-mtrees"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-mtrees"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-mtrees"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-mtrees?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-mtrees"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get storage unit by data target ID.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"datadomain-storage-units",
								":dataTargetId"
							],
							"variable": [
								{
									"key": "dataTargetId",
									"value": "incididunt in consequat do",
									"description": "(Required) Data target ID"
								}
							]
						},
						"description": "Provides a data target ID to get information about the storage unit such as name, retention lock status, and Data Domain storage system.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "The request completed successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"credentialId\": \"enim commodo sed\",\n \"dataAccessIp\": \"est\",\n \"dataTargetId\": \"culpa voluptate id\",\n \"retentionLock\": {\n  \"enable\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"mode\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"storageArrayId\": \"voluptate id veniam\",\n \"storageUnit\": {\n  \"combinedStreamHardLimit\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"combinedStreamSoftLimit\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"hardLimit\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"name\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nativeId\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"nativeUri\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"softLimit\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"tenantUnit\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requested resource was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-storage-units/:dataTargetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-storage-units",
										":dataTargetId"
									],
									"variable": [
										{
											"key": "dataTargetId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Execute dynamic filters.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assetRuleIds\": [\n        \"reprehenderit laborum elit\",\n        \"nostrud labore dolor\"\n    ],\n    \"inventorySourceType\": \"SAP_HANA_DATABASE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-filters-execution"
							]
						},
						"description": "Executes dynamic filters.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully triggered the dynamic filters.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters-execution"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters-execution"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters-execution"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters-execution"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/dynamic-filters-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"dynamic-filters-execution"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get files and folders within protected assets.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"file-instances"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								},
								{
									"key": "orderby",
									"value": "incididunt in consequat do",
									"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
								},
								{
									"key": "copyStartDate",
									"value": "1969-01-08T22:21:53.890Z",
									"description": "The start date from which to show document copies.  Each file or folder copy has a copy start date and copy end date that records the from-and-to time.  Modifications to that file or folder cause another document to be indexed with a different copy start date and copy end date.  This filter limits result sets to be greater or equal to a particular copy start date."
								},
								{
									"key": "copyEndDate",
									"value": "1969-01-08T22:21:53.890Z",
									"description": "The end date up to which to show document copies.  Each file or folder copy has a copy start date and copy end date that records the from-and-to time.  Modifications to that file or folder cause another document to be indexed with a different copy start date and copy end date.  This filter limits result sets to be less or equal to a particular copy end date."
								}
							]
						},
						"description": "Retrieves a paginated list of files and folder documents within the protected assets. By default, a list of 10 objects is returned. The specified query parameters customize the ordering, pagination, and filtering of the result.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully returned the files and folders within the protected assets.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"file-instances"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "copyStartDate",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "copyEndDate",
											"value": "1969-01-08T22:21:53.890Z"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"file-instances"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "copyStartDate",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "copyEndDate",
											"value": "1969-01-08T22:21:53.890Z"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authenticated to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"file-instances"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "copyStartDate",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "copyEndDate",
											"value": "1969-01-08T22:21:53.890Z"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"file-instances"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "copyStartDate",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "copyEndDate",
											"value": "1969-01-08T22:21:53.890Z"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Server error prevented the successful completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/file-instances?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&copyStartDate=1969-01-08T22:21:53.890Z&copyEndDate=1969-01-08T22:21:53.890Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"file-instances"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "copyStartDate",
											"value": "1969-01-08T22:21:53.890Z"
										},
										{
											"key": "copyEndDate",
											"value": "1969-01-08T22:21:53.890Z"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Submit multiple File Level Restore requests in a batch operation.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"flr-sessions-batch"
							]
						},
						"description": "Submit multiple File Level Restore requests in a batch operation.\n\nEach request is submitted as a separate FLR session and results in a separate Job in a JobGroup.  Each Copy is mounted on the TargetVM and the selected files are restored, then the Copy is unmounted.\n\nJobs may run sequentially or in parallel, depending on the details of the request and available resources."
					},
					"response": [
						{
							"name": "The request was accepted and returned multiple results.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions-batch"
									]
								}
							},
							"status": "Multi-Status (WebDAV) (RFC 4918)",
							"code": 207,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"responses\": [\n  {\n   \"id\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"status\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"body\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  }\n ]\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions-batch"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions-batch"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions-batch"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"id\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"body\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/flr-sessions-batch",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"flr-sessions-batch"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get latest copies of specified assets.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"latest-copies"
							],
							"query": [
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								}
							]
						},
						"description": "This API returns the latest copies of the assets that are specified in the filter. One copy for one asset. The filter and the assetId must be provided. Examples follow:\n\nGet latest copies of specified assets\n`GET /api/v2/latest-copies?filter=assetId in (\"725efee5-b9e6-40be-a86c-e42c69e71894\", \"0e11f488-63b4-4a70-860c-994e5e433b19\")`\n\nGet latest copies that satisfy particular copy characteristics\n`GET /api/v2/latest-copies?filter=assetId in (\"725efee5-b9e6-40be-a86c-e42c69e71894\", \"0e11f488-63b4-4a70-860c-994e5e433b19\") and copyType in (\"FULL\", \"DIFFERENTIAL\", \"INCREMENTAL\") and replicatedCopy eq false and location in (\"LOCAL\", \"LOCAL_RECALLED\") and storageSystemId eq \"deaedef1-986a-4a44-a475-80afa3709b1f\" and not state in (\"DELETED\", \"DELETING\", \"SOFT_DELETED\", \"DELETE_FAILED\")`\n\nGet latest copies before a time point\n`GET /api/v2/latest-copies?filter=assetId in (\"725efee5-b9e6-40be-a86c-e42c69e71894\", \"0e11f488-63b4-4a70-860c-994e5e433b19\") and createTime lt \"2020-08-24T08:29:00Z\"`\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully returned latest copies for specified asset.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"latest-copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"latest-copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"latest-copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requester is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"latest-copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/latest-copies?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"latest-copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get disk usage information for the partition on which logging resides.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/log-disk-infos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"log-disk-infos"
							]
						},
						"description": "Returns the current log disk information.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully retrieved the log disk information.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-disk-infos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-disk-infos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The requestor did not provide valid authentication credentials.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-disk-infos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-disk-infos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor does not have required permissions to access the resource.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-disk-infos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-disk-infos"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Any server error that prevents completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/log-disk-infos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"log-disk-infos"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Log in to your account.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"login"
							]
						},
						"description": "Logs in with user credentials. Once logged in, the user may perform operations granted to the user and defined by the user role."
					},
					"response": [
						{
							"name": "Successfully logged in with the user.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"access_token\": \"j..Fqz2q3\",\n \"token_type\": \"ut Ut est elit commodo\",\n \"expires_in\": 47887977,\n \"jti\": \"Lorem labore qui\",\n \"refresh_token\": \"gfT1N.REpqXxkj_u0.icYkqGwgD\",\n \"scope\": \"esse pariatur Excepteur ex\"\n}"
						},
						{
							"name": "The user password is expired. Redirecting the user to change the password.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request body is either invalid or is missing the required fields.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The authorization token is either invalid or expired.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The user account is locked.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Locked (WebDAV) (RFC 4918)",
							"code": 423,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An internal server error occurred. Please contact the system administrator.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"commodo consequat\",\n    \"password\": \"sed ut quis\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Log out from your account.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"logout"
							]
						},
						"description": "Logs out of the user as specified in the access token. When logged out, the user that is defined in the access token can no longer run operations.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully logged out of the current user.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"logout"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request body is either invalid or is missing the required fields.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"logout"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The authorization token is either invalid or expired.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"logout"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An internal server error occurred. Please contact the system administrator.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get required IPs.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/network-requirement?serverType=SEARCH&referenceId=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"network-requirement"
							],
							"query": [
								{
									"key": "serverType",
									"value": "SEARCH",
									"description": "The type of server"
								},
								{
									"key": "referenceId",
									"value": "incididunt in consequat do",
									"description": "The reference id of the server"
								}
							]
						},
						"description": "Required Ip Count per component type, total just sum all up.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
					},
					"response": [
						{
							"name": "Return the ip needed info.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/network-requirement?serverType=SEARCH&referenceId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"network-requirement"
									],
									"query": [
										{
											"key": "serverType",
											"value": "SEARCH"
										},
										{
											"key": "referenceId",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"networks\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "Request contains invalid content.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/network-requirement?serverType=SEARCH&referenceId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"network-requirement"
									],
									"query": [
										{
											"key": "serverType",
											"value": "SEARCH"
										},
										{
											"key": "referenceId",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Valid login is required.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/network-requirement?serverType=SEARCH&referenceId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"network-requirement"
									],
									"query": [
										{
											"key": "serverType",
											"value": "SEARCH"
										},
										{
											"key": "referenceId",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/network-requirement?serverType=SEARCH&referenceId=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"network-requirement"
									],
									"query": [
										{
											"key": "serverType",
											"value": "SEARCH"
										},
										{
											"key": "referenceId",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Reset OS User password.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newPassword\": \"exercitation ipsum velit est\",\n    \"userName\": \"ut non magna min\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/os-user-password-reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"os-user-password-reset"
							]
						},
						"description": "Reset the OS user password. The root password must be active (not expired)."
					},
					"response": [
						{
							"name": "No Content",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPassword\": \"exercitation ipsum velit est\",\n    \"userName\": \"ut non magna min\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/os-user-password-reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"os-user-password-reset"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPassword\": \"exercitation ipsum velit est\",\n    \"userName\": \"ut non magna min\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/os-user-password-reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"os-user-password-reset"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPassword\": \"exercitation ipsum velit est\",\n    \"userName\": \"ut non magna min\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/os-user-password-reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"os-user-password-reset"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get a list of protection details.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"protection-details"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "pageSize",
									"value": "100",
									"description": "The number of resources to be returned. Must not be less than 1. See Tutorials - Page the List Result."
								},
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								},
								{
									"key": "orderby",
									"value": "incididunt in consequat do",
									"description": "The attributes/fields to be sorted by. This parameter can combine with sort direction \"ASC\" or \"DESC\". Default direction is ASC. See Tutorials - Sort the List Result."
								},
								{
									"key": "queryState",
									"value": "incididunt in consequat do",
									"description": "Token string to use to retrieve the next page of a result. The initial search request with queryState must be queryState=BEGIN and a pageSize. After a search begins, subsequent responses include a token string to pass as a parameter for the next page retrieval. When the query state in the response that is returned from the previous search is END, no further results can be retrieved from this query. More details see Tutorials - Page the List Result."
								}
							]
						},
						"description": "Retrieves a list of existing protections such as backups and replications. If there are too many results, this API request returns the HTTP response code 416 (REQUEST RANGE NOT SATISFIABLE). If successful, the API request returns the HTTP response code 200 (OK).\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n\n> This endpoint supports pagination with types: random,serial\n"
					},
					"response": [
						{
							"name": "Successfully returned available protection details.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The request is too large to be satisfied.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Requested Range Not Satisfiable",
							"code": 416,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevent the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-details?page=1&pageSize=100&filter=incididunt in consequat do&orderby=incididunt in consequat do&queryState=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-details"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										},
										{
											"key": "orderby",
											"value": "incididunt in consequat do"
										},
										{
											"key": "queryState",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Execute protection rules.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assetRuleIds\": [\n        \"ipsum veniam in laborum\",\n        \"Duis\"\n    ],\n    \"inventorySourceType\": \"XTREMIO_CONSISTENCY_GROUP\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"protection-rules-execution"
							]
						},
						"description": "Executes protection rules.\n> This endpoint supports execution by the following roles: admin\n"
					},
					"response": [
						{
							"name": "Successfully triggered the protection rules.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules-execution"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules-execution"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules-execution"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules-execution"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-rules-execution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-rules-execution"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get all protection storage metrics.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"protection-storage-metrics"
							]
						},
						"description": "Retrieves aggregation of all protection storage metrics.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully returned available protection storage metrics.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-storage-metrics"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"criticalSystemsCount\": 11125961,\n \"nonCriticalSystemsCount\": 72031917,\n \"systemsBySpaceUtilization\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-storage-metrics"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authenticated to perform this  operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-storage-metrics"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-storage-metrics"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-storage-metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-storage-metrics"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				},
				{
					"name": "Get all recovery contexts.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/recovery-contexts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"recovery-contexts"
							]
						},
						"description": "Retrieves all recovery contexts.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully returned available recovery contexts.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/recovery-contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"recovery-contexts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/recovery-contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"recovery-contexts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/recovery-contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"recovery-contexts"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/recovery-contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"recovery-contexts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/recovery-contexts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"recovery-contexts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						}
					]
				},
				{
					"name": "Get all server disaster recovery hosts.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"server-disaster-recovery-hosts"
							]
						},
						"description": "Retrieves a list of all the server disaster recovery hosts. The host info includes id, node id, host name, and version.\nThe nodeID is used to prepare the system for recovery. This API provides a list of available servers with DR backups, there could be more than one\n> This endpoint supports execution by the following roles: admin,user\n\n> This endpoint supports pagination with types: random\n"
					},
					"response": [
						{
							"name": "OK. Retrieves a list of all the server disaster recovery hosts. The host info includes id, node id, host name, and version.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-hosts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"page\": {\n  \"number\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"queryState\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"size\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalElements\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"totalPages\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n }\n}"
						},
						{
							"name": "The API request is bad. Errors can be like malformed request syntax, invalid request message parameters, or deceptive request routing etc.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-hosts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation. Errors can be like malformed request syntax, invalid request message parameters, or deceptive request routing etc.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-hosts"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is Forbidden. An error response indicates that the client's request is formed correctly, but the REST API refuses to honor it, i.e. the user does not have the necessary permissions for the resource.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-hosts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK. Retrieves a list of all the server disaster recovery hosts. The host info includes id, node id, host name, and version.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-hosts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get status of server disaster recovery restore.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"server-disaster-recovery-status"
							]
						},
						"description": "Retrieves the restore server disaster recovery status. The status includes action status like starting time, elapsed seconds, state, error, and so on.\nThe API is used by the UI to poll and check if restore is complete. Once the status is not active, the user is redirected to the login page.\n\n> This endpoint supports execution by the following roles: admin,user\n"
					},
					"response": [
						{
							"name": "OK. Retrieves the restore server disaster recovery status. The status includes action status like starting time, elapsed seconds, state, error ...etc.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"backupRef\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"elapsedSeconds\": 90360629,\n \"error\": \"eu dolore velit\",\n \"id\": \"in elit cillum labore\",\n \"progress\": -29330187,\n \"startTime\": \"1997-02-28T08:51:26.600Z\",\n \"state\": \"minim laboris\",\n \"type\": \"officia\"\n}"
						},
						{
							"name": "The API request is bad. Errors can be like malformed request syntax, invalid request message parameters, or deceptive request routing etc.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-status"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation. Errors can be like malformed request syntax, invalid request message parameters, or deceptive request routing etc.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-status"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request is Forbidden. An error response indicates that the client's request is formed correctly, but the REST API refuses to honor it, i.e. the user does not have the necessary permissions for the resource.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-status"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request. The internal server error with this response status code whenever they execute some request handler code that raises an exception.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/server-disaster-recovery-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"server-disaster-recovery-status"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"backupRef\": {\n  \"id\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"elapsedSeconds\": 90360629,\n \"error\": \"eu dolore velit\",\n \"id\": \"in elit cillum labore\",\n \"progress\": -29330187,\n \"startTime\": \"1997-02-28T08:51:26.600Z\",\n \"state\": \"minim laboris\",\n \"type\": \"officia\"\n}"
						}
					]
				},
				{
					"name": "Get SLA metrics.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"sla-metrics"
							],
							"query": [
								{
									"key": "filter",
									"value": "incididunt in consequat do",
									"description": "The filter string that is expressed using PowerProtect Data Manager filter syntax. See Tutorials - Filter the List Result."
								}
							]
						},
						"description": "Get metrics for Service Level Agreements (SLAs)."
					},
					"response": [
						{
							"name": "Successfully returned SLA compliance metrics.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"sla-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetMetrics\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ],\n \"endTime\": \"1943-03-10T12:40:58.830Z\",\n \"failedSlaCount\": -28888231,\n \"inComplianceAssetCount\": 58310252,\n \"outOfComplianceAssetCapacity\": -99924533.74793132,\n \"outOfComplianceAssetCount\": 46032181,\n \"outOfCompliancePolicyCount\": -63808064,\n \"startTime\": \"2005-07-15T00:57:47.210Z\"\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"sla-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"sla-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"sla-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Any server error that prevented the completion of the request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/sla-metrics?filter=incididunt in consequat do",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"sla-metrics"
									],
									"query": [
										{
											"key": "filter",
											"value": "incididunt in consequat do"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get all supported time zones.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v2/timezones",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"timezones"
							]
						},
						"description": "Retrieves all supported time zones.\n> This endpoint supports execution by the following roles: admin, user, export and recovery admin\n"
					},
					"response": [
						{
							"name": "Located and returned the available time zones successfully.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/timezones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"timezones"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"content\": [\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n ]\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/timezones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"timezones"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/timezones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"timezones"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Renew the access token for extended usage period.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"token"
							]
						},
						"description": "Extends the usage period of the user, as specified by the access token, by renewing the token. The grant_type in the request body must be refresh_token.\n> This endpoint supports execution by the following roles: admin,user,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully renewed the authorization token (also known as access token).",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "(Required) Authorization token.",
										"key": "Authorization",
										"value": "incididunt in consequat do"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"access_token\": \"j..Fqz2q3\",\n \"token_type\": \"ut Ut est elit commodo\",\n \"expires_in\": 47887977,\n \"jti\": \"Lorem labore qui\",\n \"refresh_token\": \"gfT1N.REpqXxkj_u0.icYkqGwgD\",\n \"scope\": \"esse pariatur Excepteur ex\"\n}"
						},
						{
							"name": "The request body is either invalid or is missing the required fields.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "(Required) Authorization token.",
										"key": "Authorization",
										"value": "incididunt in consequat do"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The authorization token is either invalid or expired.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "(Required) Authorization token.",
										"key": "Authorization",
										"value": "incididunt in consequat do"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "An internal server error occurred. Please contact the system administrator.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "(Required) Authorization token.",
										"key": "Authorization",
										"value": "incididunt in consequat do"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "(Required) Authorization token.",
										"key": "Authorization",
										"value": "incididunt in consequat do"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"..2NAHM5k\",\n    \"grant_type\": \"password\",\n    \"scope\": \"amet Lorem cupidatat consequat\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"token"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Initiate agent installation on VM asset.",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"vm-agent-installation"
							]
						},
						"description": "Initiates agent installation on selected VM asset.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n"
					},
					"response": [
						{
							"name": "Successfully triggered the agent installation process on VM.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"vm-agent-installation"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"activityId\": \"consequat velit id est\"\n}"
						},
						{
							"name": "The request is not valid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"vm-agent-installation"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not authorized to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"vm-agent-installation"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "The requestor is not allowed to perform this operation.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"vm-agent-installation"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						},
						{
							"name": "An unexpected error prevented the server from fulfilling your request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"applicationType\": \"MSSQL\",\n    \"vmAssetId\": \"pariatur fugiat deserunt\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/vm-agent-installation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"vm-agent-installation"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 80955715,\n \"extendedInfo\": \"id ea mollit esse in\",\n \"path\": \"proident deserunt\",\n \"reason\": \"aliqua incididunt\",\n \"remediation\": \"culpa\",\n \"timestamp\": 99672431\n}"
						}
					]
				}
			]
		},
		{
			"name": "PPDM  - Use Case",
			"item": [
				{
					"name": "PPDM 19.6 - Login",
					"item": [
						{
							"name": "Log into with user credential ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"//console.log('The whole json1 structure after parsing:...');",
											"//console.log(json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 UseCase - Add DD",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"//console.log('The whole json1 structure after parsing:...');",
											"//console.log(json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all certificates.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates?filter=host eq \"ddve-2.vlab.local\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "host eq \"ddve-2.vlab.local\""
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully retrieved all the certificates.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a certificate by ID.",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"ZGR2ZS0yLnZsYWIubG9jYWw6MzAwOTpob3N0\",\r\n    \"host\": \"ddve-2.vlab.local\",\r\n    \"port\": \"3009\",\r\n    \"notValidBefore\": \"Fri Mar 29 21:32:19 PDT 2019\",\r\n    \"notValidAfter\": \"Sat Mar 29 04:32:19 PDT 2025\",\r\n    \"fingerprint\": \"E1BB40B0284595297071177FE02BC9C76E85CD66\",\r\n    \"subjectName\": \"CN=ddve-2.vlab.local, O=Valued DataDomain customer, OU=Host Certificate, ST=CA, C=US\",\r\n    \"issuerName\": \"CN=ddve-2.vlab.local, OU=Root CA, O=Valued Datadomain Customer, L=Santa Clara, ST=CA, C=US\",\r\n    \"state\": \"ACCEPTED\",\r\n    \"type\": \"HOST\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates/{{DD_certId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates",
										"{{DD_certId}}"
									]
								}
							},
							"response": [
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "suported version of DDVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"",
											"pm.test(\"DD is supported?\", function () {   ",
											"    var jsonData = pm.response.json();   pm.expect(jsonData.data.isSupported).have.property('result', 'true');})",
											"    ",
											"",
											"//json1 = JSON.parse(responseBody)",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))",
											"//pm.environment.set(\"DD_certId\", json1.content[0].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"hostname\": \"ddve-2.vlab.local\", \"port\": \"3009\", \"username\": \"sysadmin\", \"password\": \"Password123!\" }\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/datadomain-system-validation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"datadomain-system-validation"
									]
								}
							},
							"response": [
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "!!! Create a ACCEPTED Certificate",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"host\": \"ddve-2.vlab.local\", \"port\": \"3009\" }\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									]
								}
							},
							"response": [
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "ADD Data Domain system credentials",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"DATADOMAIN\", \r\n    \"name\": \"ddve-rest\", \r\n    \"username\": \"sysadmin\", \r\n    \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add the Data Domain server",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"ddve-postman\", \"type\": \"EXTERNALDATADOMAIN\", \"address\": \"ddve-2.vlab.local\", \"port\": \"3009\",\r\n    \"credentials\": {\r\n        \"id\": \"aec0cfbd-f4d3-4b3e-b3d1-945e7faaa658\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									]
								}
							},
							"response": [
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 UseCase - Add vCenter",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"console.log(\"The JSON structure:...\" +json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all certificates for vCenter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"vcenter_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates?filter=host eq \"vc.vlab.local\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									],
									"query": [
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "port",
											"value": "443",
											"disabled": true
										},
										{
											"key": "host",
											"value": "vc.vlab.local",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "host eq \"vc.vlab.local\""
										}
									]
								}
							},
							"response": [
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully retrieved all the certificates.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a certificate forvcenter - \"state\": \"UNKNOWN\"",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"id\": \"dmMudmxhYi5sb2NhbDo0NDM6aG9zdA==\",\r\n        \"host\": \"vc.vlab.local\",\r\n        \"port\": \"443\",\r\n        \"notValidBefore\": \"Sat Oct 07 10:47:59 PDT 2017\",\r\n        \"notValidAfter\": \"Sat Oct 02 10:47:58 PDT 2027\",\r\n        \"fingerprint\": \"524B98C70111779F6CFC5A83B263BADD4E25F4A7\",\r\n        \"subjectName\": \"C=US, CN=vc.vlab.local\",\r\n        \"issuerName\": \"OU=VMware Engineering, O=vc.vlab.local, ST=California, C=US, DC=local, DC=vsphere, CN=CA\",\r\n        \"state\": \"ACCEPTED\",\r\n        \"type\": \"HOST\"\r\n}\r\n\r\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates/{{vcenter_certId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates",
										"{{vcenter_certId}}"
									]
								}
							},
							"response": [
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create credentials for vCenter",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"type\": \"VCENTER\", \"name\": \"vcenter-login\", \"username\": \"administrator@vsphere.local\", \"password\": \"Password123!\" }"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Show credentials for vCenter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"ppdm_vcenter_creds\", json1.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials?filter=type eq \"VCENTER\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"VCENTER\""
										}
									]
								}
							},
							"response": [
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add the vCenter",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"name\": \"vCenter\",\r\n    \"type\": \"VCENTER\",\r\n    \"address\": \"vc.vlab.local\",\r\n    \"port\": \"443\",\r\n    \"credentials\": {\r\n        \"id\": \"{{ppdm_vcenter_creds}}\" \r\n    }\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									]
								}
							},
							"response": [
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully updated the specified certificate.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"host\": \"occaecat nostrud consequat\",\n \"port\": \"laboris sit\",\n \"fingerprint\": \"aute pariatur est\",\n \"id\": \"non sed fugiat in\",\n \"issuerName\": \"veniam exercitation non\",\n \"notValidAfter\": \"sunt sit incididunt ullamco pariatur\",\n \"notValidBefore\": \"ex incididunt qui\",\n \"state\": \"EXPIRED\",\n \"subjectName\": \"laborum dolore aliqua minim\",\n \"type\": \"INTERMEDIATE\"\n}"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"host\": \"<string>\",\n    \"port\": \"<string>\",\n    \"fingerprint\": \"<string>\",\n    \"id\": \"<string>\",\n    \"issuerName\": \"<string>\",\n    \"notValidAfter\": \"<string>\",\n    \"notValidBefore\": \"<string>\",\n    \"state\": \"<string>\",\n    \"subjectName\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates/:certId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates",
												":certId"
											],
											"variable": [
												{
													"key": "certId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 UseCase - Discover DataDomain",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Query available DD inventory sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"DD-inventory-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources?filter=type eq \"EXTERNALDATADOMAIN\" and address eq \"ddve-2.vlab.local\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"EXTERNALDATADOMAIN\" and address eq \"ddve-2.vlab.local\""
										},
										{
											"key": "filter",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Start discovery of DataDomain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "beartoken"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"start\": \"/inventory-sources/{{DD-inventory-id}}\",\n\"level\": \"DataCopies\"\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/discoveries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"discoveries"
									]
								},
								"description": "body should contain\r\n{\r\n\"start\": \"/inventory-sources/<vCenter-inventory-source-id> \",\r\n\"level\": \"DataCopies\"\r\n}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 UseCase - Discover vCenter",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Query available vCenter inventory sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"vcenter-inventory-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources?filter=type eq \"VCENTER\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"VCENTER\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Query available DD inventory sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"DD-inventory-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources?filter=type eq \"EXTERNALDATADOMAIN\" and address eq \"ddve-2.vlab.local\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"EXTERNALDATADOMAIN\" and address eq \"ddve-2.vlab.local\""
										},
										{
											"key": "filter",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Start discovery of vcenter",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "beartoken"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"start\": \"/inventory-sources/{{vcenter-inventory-id}}\",\n\"level\": \"DataCopies\"\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/discoveries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"discoveries"
									]
								},
								"description": "body should contain:\r\n{\r\n\"start\": \"/inventory-sources/<vCenter-inventory-source-id> \",\r\n\"level\": \"DataCopies\"\r\n}"
							},
							"response": []
						},
						{
							"name": "Start discovery of DataDomain",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "beartoken"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"start\": \"/inventory-sources/{{DD-inventory-id}}\",\n\"level\": \"DataCopies\"\n}\n"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/discoveries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"discoveries"
									]
								},
								"description": "body should contain\r\n{\r\n\"start\": \"/inventory-sources/<vCenter-inventory-source-id> \",\r\n\"level\": \"DataCopies\"\r\n}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": " PPDM 19.6 Use Case - create Policy",
					"item": [
						{
							"name": "Log into with user credential ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"var json1 = JSON.parse(responseBody);",
											"//console.log (JSON.parse(responseBody));",
											"//console.log(\"The whole json1 struction after parsing:...\" +json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Query all  protection policy",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Query DD storage system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json1 = JSON.parse(responseBody);\r",
											"console.log (JSON.parse(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/storage-systems/?filter=type eq \"DATA_DOMAIN_SYSTEM\" and name eq \"ddve-2.vlab.local\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"storage-systems",
										""
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"DATA_DOMAIN_SYSTEM\" and name eq \"ddve-2.vlab.local\""
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all assets",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a protection policy PLC1",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PLC1\",\n  \"description\": \"create an policy for automation\",\n  \"assetType\": \"VMWARE_VIRTUAL_MACHINE\",\n  \"details\": {\n    \"vm\": {\n      \"protectionEngine\": \"VMDIRECT\"\n    }\n  },\n  \"type\": \"ACTIVE\",\n  \"enabled\": true,\n  \"dataConsistency\": \"CRASH_CONSISTENT\",\n  \"priority\": 1,\n  \"encrypted\": false,\n  \"stages\": [\n    {\n      \"id\": \"12345678-1234-1234-1234-1234567890ab\",\n      \"type\": \"PROTECTION\",\n      \"passive\": false,\n      \"retention\": {\n        \"interval\": 1,\n        \"unit\": \"DAY\",\n        \"storageSystemRetentionLock\": false\n      },\n      \"target\": {\n        \"storageSystemId\": \"c7f72395-0d5c-4181-a309-121b51d8fa8a\"\n      },\n      \"operations\": [\n        {\n          \"type\": \"AUTO_FULL\",\n          \"schedule\": {\n            \"frequency\": \"DAILY\",\n            \"startTime\": \"2020-11-11T03:00:00Z\",\n            \"duration\": \"PT10H\"\n          }\n        }\n      ]\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									]
								},
								"description": "Creates a protection policy.\n> This endpoint supports execution by the following roles: admin,export-and-recovery-admin\n\nFilling up the storageSystemId with the right ID you need to a :\n\nhttps://ppdm.vlab.local:8443/api/v2/storage-systems and copy and past the DD Id"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 Use Case - Assign asset to a policy Copy",
					"item": [
						{
							"name": "Step1 - Get policy ID to add assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)",
											"pm.environment.set(\"policy-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies?filter=name eq \"PLC1\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "name eq \"PLC1\"",
											"description": "Enter your policy name within quotes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step2 - Get asset ID to add to the policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)",
											"pm.environment.set(\"asset-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets?filter=name eq \"file\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "name eq \"file\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - Add asset to a policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\"{{asset-id}}\"]"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies/{{policy-id}}/asset-assignments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies",
										"{{policy-id}}",
										"asset-assignments"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 Use Case - Trigger manual backup of a Policy",
					"item": [
						{
							"name": "Step1 - Get policy-id to trigger a backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)",
											"pm.environment.set(\"policy-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies?filter=name eq \"PLC1\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "name eq \"PLC1\"",
											"description": "Enter your policy name within quotes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Trigger manual backup of a policy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\t\"assetIds\": null,\r\n\t\t\"backupType\": \"FULL\",\r\n\t\t\"retention\": {\r\n\t\t\t\"interval\": 1,\r\n\t\t\t\"unit\": \"YEAR\"\r\n\t\t},\r\n\t\t\"disableProtectionPolicyProcessing\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/protection-policies/{{policy-id}}/backups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"protection-policies",
										"{{policy-id}}",
										"backups"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PPDM 19.6 Use Case - VM Image Level Restore - to New VM Copy",
					"item": [
						{
							"name": "Step1 - Get an asset ID to of source VM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"data = JSON.parse(responseBody)",
											"pm.environment.set(\"source-asset-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets?filter=name eq \"file\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "name eq \"file\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step2 - Get asset backup copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)",
											"pm.environment.set(\"copy-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/assets/{{source-asset-id}}/copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"assets",
										"{{source-asset-id}}",
										"copies"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step3 - Get copy by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/copies/{{copy-id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"copies",
										"{{copy-id}}"
									],
									"query": [
										{
											"key": "filter",
											"value": "queryfilter",
											"disabled": true
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step4 - Get Inventory sources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"vcenter-id\", data.content[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources?filter=type eq \"VCENTER\"",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "filter",
											"value": "type eq \"VCENTER\""
										},
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step5 - Login vCenter for restore destination details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"vmware-api-session-id\", data.value);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "Password123!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{vcenter-username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{vcenter-host}}/rest/com/vmware/cis/session",
									"protocol": "https",
									"host": [
										"{{vcenter-host}}"
									],
									"path": [
										"rest",
										"com",
										"vmware",
										"cis",
										"session"
									],
									"query": [
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step6 - vCenter DC details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"datacenterMoref\", data.value[0].datacenter);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "vmware-api-session-id",
										"value": "{{vmware-api-session-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{vcenter-host}}/rest/vcenter/datacenter",
									"protocol": "https",
									"host": [
										"{{vcenter-host}}"
									],
									"path": [
										"rest",
										"vcenter",
										"datacenter"
									],
									"query": [
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step7 - vCenter Cluster details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"clusterMoref\", data.value[0].cluster);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "vmware-api-session-id",
										"value": "{{vmware-api-session-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{vcenter-host}}/rest/vcenter/cluster",
									"protocol": "https",
									"host": [
										"{{vcenter-host}}"
									],
									"path": [
										"rest",
										"vcenter",
										"cluster"
									],
									"query": [
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step8 - vCenter Host details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"hostMoref\", data.value[0].host);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "vmware-api-session-id",
										"type": "text",
										"value": "{{vmware-api-session-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{vcenter-host}}/rest/vcenter/host",
									"protocol": "https",
									"host": [
										"{{vcenter-host}}"
									],
									"path": [
										"rest",
										"vcenter",
										"host"
									],
									"query": [
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step9 - vCenter Datastore details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"data = JSON.parse(responseBody)\r",
											"pm.environment.set(\"dataStoreMoref\", data.value[0].datastore);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": " {{X-auth-token}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "vmware-api-session-id",
										"type": "text",
										"value": "{{vmware-api-session-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{vcenter-host}}/rest/vcenter/datastore",
									"protocol": "https",
									"host": [
										"{{vcenter-host}}"
									],
									"path": [
										"rest",
										"vcenter",
										"datastore"
									],
									"query": [
										{
											"key": "orderby",
											"value": "orderby",
											"disabled": true
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "100",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step10 - Restore to new VM",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"Restore VM to New\",\r\n    \"copyId\": \"{{copy-id}}\",\r\n    \"restoreType\": \"TO_ALTERNATE\",\r\n    \"restoredCopiesDetails\": {\r\n      \"targetVmInfo\": {\r\n        \"inventorySourceId\": \"{{vcenter-id}}\",\r\n        \"vmName\": \"New-vm-RESTAPI-restored\",\r\n        \"dataCenterMoref\": \"{{datacenterMoref}}\",\r\n        \"clusterMoref\": \"{{clusterMoref}}\",\r\n        \"hostMoref\": \"{{hostMoref}}\",\r\n        \"dataStoreMoref\": \"{{dataStoreMoref}}\",\r\n        \"vmPowerOn\": true,\r\n        \"vmReconnectNic\": false\r\n      }\r\n    }\r\n  }'"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/restored-copies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"restored-copies"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "WIP - PPDM 19.6 Use Case -delete DD cert renew",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"json1 = JSON.parse(responseBody)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all certificates",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates?port=3009",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									],
									"query": [
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "port eq 3009 and host lk \"ddve%\"",
											"disabled": true
										},
										{
											"key": "port",
											"value": "3009"
										}
									]
								}
							},
							"response": [
								{
									"name": "The Authorization token is either invalid or expired.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The request body is either invalid or is missing the required fields.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successfully retrieved all the certificates.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "The operation is currently unavailable. The system may currently be in maintenance mode.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"host\": \"amet fugiat laborum non\",\n  \"port\": \"quis velit dolore\",\n  \"fingerprint\": \"deserunt amet\",\n  \"id\": \"est labore sed aliqua velit\",\n  \"issuerName\": \"sint nulla sunt\",\n  \"notValidAfter\": \"nostrud\",\n  \"notValidBefore\": \"ut sint\",\n  \"state\": \"UNKNOWN\",\n  \"subjectName\": \"consequat Excepteur\",\n  \"type\": \"HOST\"\n },\n {\n  \"host\": \"veniam\",\n  \"port\": \"quis in consequat\",\n  \"fingerprint\": \"quis\",\n  \"id\": \"in ad in\",\n  \"issuerName\": \"commodo in in qui aliquip\",\n  \"notValidAfter\": \"do laborum culpa\",\n  \"notValidBefore\": \"eiusmod dolor ut\",\n  \"state\": \"EXPIRED\",\n  \"subjectName\": \"aliqua dolore cillum quis\",\n  \"type\": \"INTERMEDIATE\"\n }\n]"
								},
								{
									"name": "An issue has occurred on the system. Please contact the system administrator.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The certificate was not found.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/certificates?host=<string>&port=<string>&type=HOST&strict=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"certificates"
											],
											"query": [
												{
													"key": "host",
													"value": "<string>"
												},
												{
													"key": "port",
													"value": "<string>"
												},
												{
													"key": "type",
													"value": "HOST"
												},
												{
													"key": "strict",
													"value": "false"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "The following can be symptoms associated to this problem:\r\nUnable to create new PLC\r\nReplication fails",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Use Cases - PPDM Configuration",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"var json1 = JSON.parse(responseBody);",
											"//console.log (JSON.parse(responseBody));",
											"//console.log(\"The whole json1 struction after parsing:...\" +json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET THE POWERPROTECT EULA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"eulas",
										"PPDM"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ACCEPT THE POWERPROTECT EULA Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accepted\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/eulas/PPDM",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"eulas",
										"PPDM"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"configurations"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Start the configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "        {\r\n            \"id\": \"5003e003-35d8-402b-a006-7fbe6119339f\",\r\n            \"nodeId\": \"6ae11a45-84ae-4e9f-b20f-a7e4bc3605fd\",\r\n            \"networks\": [\r\n                {\r\n                    \"fqdn\": \"ppdm1.vlab.local\",\r\n                    \"ipAddress\": [\r\n                        \"192.168.1.51\"\r\n                    ],\r\n                    \"ipAddressFamily\": \"IPv4\",\r\n                    \"interfaceName\": \"eth0\",\r\n                    \"netMask\": \"255.255.255.0\",\r\n                    \"gateway\": \"192.168.1.1\",\r\n                    \"dnsServers\": [\r\n                        \"192.168.1.1\"\r\n                    ],\r\n                    \"nslookupSuccess\": true\r\n                },\r\n                {\r\n                    \"ipAddress\": [\r\n                        \"172.24.0.193\"\r\n                    ],\r\n                    \"ipAddressFamily\": \"IPv4\",\r\n                    \"interfaceName\": \"brpp0\",\r\n                    \"netMask\": \"255.255.255.192\"\r\n                }\r\n            ],\r\n            \"ntpServers\": [\r\n                \"192.168.1.1\"\r\n            ],\r\n            \"timeZone\": \"US/Central - Central Standard Time\",\r\n            \"osUsers\": [\r\n                {\r\n                    \"userName\": \"root\",\r\n                    \"description\": \"OS root user account\",\r\n                    \"numberOfDaysToExpire\": 59\r\n                },\r\n                {\r\n                    \"userName\": \"admin\",\r\n                    \"description\": \"OS administrator user account\",\r\n                    \"numberOfDaysToExpire\": 59\r\n                },\r\n                {\r\n                    \"userName\": \"support\",\r\n                    \"description\": \"OS support user account\",\r\n                    \"numberOfDaysToExpire\": 59,\r\n                    \"password\": \"$upp0rt!\",\r\n                    \"newPassword\": \"{{common_pwd}}\"\r\n                }\r\n            ],\r\n            \"lockbox\": {\r\n                \"name\": \"Lockbox\",\r\n                \"lastUpdatedTime\": \"2021-09-07T22:19:36.152+00:00\"\r\n            },\r\n            \"configType\": \"standalone\",\r\n            \"gettingStartedCompleted\": false,\r\n            \"autoSupport\": false,\r\n            \"integratedStorageSecuritySetupCompleted\": false,\r\n            \"deployedPlatform\": \"VMWARE\"\r\n        }"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/configurations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"configurations"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Use Case - vCenter",
					"item": [
						{
							"name": "Log into with user credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")",
											"//console.log(\"The whole response body:...\" +responseBody)",
											"//JSON Array füllen mit dem Response Body",
											"var json1 = JSON.parse(responseBody);",
											"//console.log (JSON.parse(responseBody));",
											"//console.log(\"The whole json1 struction after parsing:...\" +json1)",
											"//console.log(\"access_token: \" +json1.access_token)",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung",
											"pm.environment.set(\"access_token\", json1.access_token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"Password123!\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET THE VCENTER CERTIFICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var json1 = JSON.parse(responseBody);\r",
											"//console.log (JSON.parse(responseBody));\r",
											"//console.log(\"The whole json1 struction after parsing:...\" +json1)\r",
											"//console.log(\"access_token: \" +json1.access_token)\r",
											"//setzen den Token in eine Environment Variable für weitere Automatisierung\r",
											"//pm.environment.set(\"access_token\", json1.access_token);\r",
											"pm.environment.set(\"vc_cert_id\", json1[0].id);\r",
											"pm.environment.set(\"vc_cert_host\", json1[0].host);\r",
											"pm.environment.set(\"vc_cert_port\", json1[0].port);\r",
											"pm.environment.set(\"vc_cert_notValidBefore\", json1[0].notValidBefore);\r",
											"pm.environment.set(\"vc_cert_notValidAfter\", json1[0].notValidAfter);\r",
											"pm.environment.set(\"vc_cert_fingerprint\", json1[0].fingerprint);\r",
											"pm.environment.set(\"vc_cert_subjectName\", json1[0].subjectName);\r",
											"pm.environment.set(\"vc_cert_issuerName\", json1[0].issuerName);\r",
											"pm.environment.set(\"vc_cert_state\", json1[0].state);\r",
											"pm.environment.set(\"vc_cert_type\", json1[0].type);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates?host={{vcenter_host}}&port=443&type=Host",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates"
									],
									"query": [
										{
											"key": "host",
											"value": "{{vcenter_host}}"
										},
										{
											"key": "port",
											"value": "443"
										},
										{
											"key": "type",
											"value": "Host"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ACCEPT THE VCENTER CERTIFICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n        \"id\": \"{{vc_cert_id}}\",\r\n        \"host\": \"{{vc_cert_host}}\",\r\n        \"port\": \"{{vc_cert_port}}\",\r\n        \"notValidBefore\": \"{{vc_cert_notValidBefore}}\",\r\n        \"notValidAfter\": \"{{vc_cert_notValidAfter}}\",\r\n        \"fingerprint\": \"{{vc_cert_fingerprint}}\",\r\n        \"subjectName\": \"{{vc_cert_subjectName}}\",\r\n        \"issuerName\": \"{{vc_cert_issuerName}}\",\r\n        \"state\": \"ACCEPTED\",\r\n        \"type\": \"{{vc_cert_type}}\"\r\n        }"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/certificates/{{vc_cert_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"certificates",
										"{{vc_cert_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create vCenter Admin  credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"vc_creds_id\", json1.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"type\": \"VCENTER\",\r\n  \"username\": \"administrator@vsphere.local\",\r\n  \"password\": \"Password123!\",\r\n  \"name\": \"ADMINISTRATOR\" \r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get VCENTER credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"DD_certId\", json1.content[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/credentials?filter=type in(\"VCENTER\")",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"credentials"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "type in(\"VCENTER\")"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ADD THE VCENTER SERVER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Comming form Tests scripting\")\r",
											"//console.log(\"The whole response body:...\" +responseBody)\r",
											"json1 = JSON.parse(responseBody)\r",
											"//console.log(\"The whole response body after paring JSON:...\" JSON.parse(responseBody))\r",
											"pm.environment.set(\"vc_server_id\", json1[0].id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"VCENTER\",\r\n    \"name\": \"{{vcenter_host}}\",\r\n    \"port\": 443,\r\n    \"credentials\": {\r\n      \"id\": \"{{vc_creds_id}}\"\r\n      },\r\n    \"address\": \"{{vcenter_host}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/v2/inventory-sources",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"inventory-sources"
									],
									"query": [
										{
											"key": "port",
											"value": "3009",
											"description": "(Required) Specify the port number from which to get the certificate.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "HOST",
											"description": "Specify the type of certificate to get.",
											"disabled": true
										},
										{
											"key": "strict",
											"value": "false",
											"description": "Check if the host IP or fully qualified domain name (FQDN) used in host is in the certificate's subject alternative name.",
											"disabled": true
										},
										{
											"key": "host",
											"value": "ddve-2.vlab.local",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:8443",
			"type": "string"
		}
	]
}